
NUCLEO-L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b278  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000147c  0800b408  0800b408  0000c408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c884  0800c884  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c884  0800c884  0000d884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c88c  0800c88c  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c88c  0800c88c  0000d88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c890  0800c890  0000d890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800c894  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  200001e0  0800ca74  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  0800ca74  0000eb00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b75c  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004107  00000000  00000000  0002996c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002da78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ea  00000000  00000000  0002f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261d8  00000000  00000000  000305e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9af  00000000  00000000  000567ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0eb6  00000000  00000000  00076169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015701f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077bc  00000000  00000000  00157064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3f0 	.word	0x0800b3f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b3f0 	.word	0x0800b3f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	@ 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <hm10_uart_handle_tx>:
		show_error(hm10_error, sizeof(hm10_error), SerialUART_Out);
	}
}

void hm10_uart_handle_tx()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	// clear the TX buffer after sending
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <hm10_uart_handle_rx>:

void hm10_uart_handle_rx(uint8_t rx_data)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
	// Temporary testing solution to verify rx and tx with the device.

	// check the incoming characters sent from
	if (rx_data == 78) // ASCII for N (No)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f68:	d106      	bne.n	8000f78 <hm10_uart_handle_rx+0x1e>
	{
		// turn the green LED off
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f003 f809 	bl	8003f88 <HAL_GPIO_WritePin>
	else if (rx_data == 89) // ASCII for Y (Yes)
	{
		// turn the green LED on
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
	}
}
 8000f76:	e008      	b.n	8000f8a <hm10_uart_handle_rx+0x30>
	else if (rx_data == 89) // ASCII for Y (Yes)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b59      	cmp	r3, #89	@ 0x59
 8000f7c:	d105      	bne.n	8000f8a <hm10_uart_handle_rx+0x30>
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2102      	movs	r1, #2
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f86:	f002 ffff 	bl	8003f88 <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <mpu6050_init>:
/*!
 * \brief     Init function used to setup this module and the accelerometer for sampling.
 * \return    device_init_complete_s - True is the device is initialized okay, false if not.
 */
bool mpu6050_init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	device_init_complete_s = (who_am_i() == true) ? true : false;
 8000f9a:	f000 f8a5 	bl	80010e8 <who_am_i>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <mpu6050_init+0x9c>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	if (device_init_complete_s == false)
 8000fa6:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <mpu6050_init+0x9c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f083 0301 	eor.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <mpu6050_init+0x24>
	{
		return false; // early termination if get_who_am_i() failed
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e036      	b.n	8001026 <mpu6050_init+0x92>
	}

	// Need to take the accelerometer out of sleep mode.
	uint8_t data = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71fb      	strb	r3, [r7, #7]
	bool pwr_mgmt_write = write_register(MPU6050_REG_PWR_MGMT_1, data);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	206b      	movs	r0, #107	@ 0x6b
 8000fc2:	f000 f8c5 	bl	8001150 <write_register>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
	assert(pwr_mgmt_write);
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <mpu6050_init+0x48>
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <mpu6050_init+0xa0>)
 8000fd2:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <mpu6050_init+0xa4>)
 8000fd4:	212e      	movs	r1, #46	@ 0x2e
 8000fd6:	4819      	ldr	r0, [pc, #100]	@ (800103c <mpu6050_init+0xa8>)
 8000fd8:	f007 fba6 	bl	8008728 <__assert_func>

	// Set data rate to 1KHz by writing MPU6050_REG_SMPRT_DIV register.
	data = 0x07;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	71fb      	strb	r3, [r7, #7]
	bool set_data_rate = write_register(MPU6050_REG_SMPRT_DIV, data);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2019      	movs	r0, #25
 8000fe6:	f000 f8b3 	bl	8001150 <write_register>
 8000fea:	4603      	mov	r3, r0
 8000fec:	717b      	strb	r3, [r7, #5]
	assert(set_data_rate);
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d105      	bne.n	8001000 <mpu6050_init+0x6c>
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <mpu6050_init+0xac>)
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <mpu6050_init+0xa4>)
 8000ff8:	2133      	movs	r1, #51	@ 0x33
 8000ffa:	4810      	ldr	r0, [pc, #64]	@ (800103c <mpu6050_init+0xa8>)
 8000ffc:	f007 fb94 	bl	8008728 <__assert_func>

	// Set accelerometer configuration to +-2g.
	data = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
	bool set_accel = write_register(MPU6050_REG_ACCEL_CONFIG, data);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4619      	mov	r1, r3
 8001008:	201c      	movs	r0, #28
 800100a:	f000 f8a1 	bl	8001150 <write_register>
 800100e:	4603      	mov	r3, r0
 8001010:	713b      	strb	r3, [r7, #4]
	assert(set_accel);
 8001012:	793b      	ldrb	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d105      	bne.n	8001024 <mpu6050_init+0x90>
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <mpu6050_init+0xb0>)
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <mpu6050_init+0xa4>)
 800101c:	2138      	movs	r1, #56	@ 0x38
 800101e:	4807      	ldr	r0, [pc, #28]	@ (800103c <mpu6050_init+0xa8>)
 8001020:	f007 fb82 	bl	8008728 <__assert_func>

	return true;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001fc 	.word	0x200001fc
 8001034:	0800b408 	.word	0x0800b408
 8001038:	0800b554 	.word	0x0800b554
 800103c:	0800b418 	.word	0x0800b418
 8001040:	0800b440 	.word	0x0800b440
 8001044:	0800b450 	.word	0x0800b450

08001048 <mpu6050_get_temperature_data>:

	return (float)z_axis/16384.0;
}

float mpu6050_get_temperature_data(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	if (!device_init_complete_s)
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <mpu6050_get_temperature_data+0x98>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <mpu6050_get_temperature_data+0x1a>
	{
		return 0u;
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e031      	b.n	80010c6 <mpu6050_get_temperature_data+0x7e>
	}

	short temperature = 0; // resultant value holder used for combining L and H 8 bit values
 8001062:	2300      	movs	r3, #0
 8001064:	80fb      	strh	r3, [r7, #6]
	uint8_t temp_l = read_register(MPU6050_REG_TEMP_OUT_L);
 8001066:	2042      	movs	r0, #66	@ 0x42
 8001068:	f000 f854 	bl	8001114 <read_register>
 800106c:	4603      	mov	r3, r0
 800106e:	717b      	strb	r3, [r7, #5]
	uint8_t temp_h = read_register(MPU6050_REG_TEMP_OUT_H);
 8001070:	2041      	movs	r0, #65	@ 0x41
 8001072:	f000 f84f 	bl	8001114 <read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	713b      	strb	r3, [r7, #4]
	// combine the 2 with a bit shift and an or operator
	temperature = (temp_h << 8) | temp_l;
 800107a:	793b      	ldrb	r3, [r7, #4]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	80fb      	strh	r3, [r7, #6]

	// convert to Celcius per mpu6050 datasheet
	return (float)temperature/340.0 + 36.53;
 8001088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	ee17 0a90 	vmov	r0, s15
 8001098:	f7ff fa60 	bl	800055c <__aeabi_f2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <mpu6050_get_temperature_data+0x9c>)
 80010a2:	f7ff fbdd 	bl	8000860 <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	a30a      	add	r3, pc, #40	@ (adr r3, 80010d8 <mpu6050_get_temperature_data+0x90>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff f8f4 	bl	80002a0 <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd7c 	bl	8000bbc <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	0a3d70a4 	.word	0x0a3d70a4
 80010dc:	404243d7 	.word	0x404243d7
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	40754000 	.word	0x40754000

080010e8 <who_am_i>:
/*!
 * \brief     Reads the WHO_AM_I register of the MPU6050.
 * \return    device_present - True is the register value was read correctly, false if not.
 */
bool who_am_i(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	bool device_present = false;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]

	reg_value = read_register(MPU6050_REG_WHO_AM_I);
 80010f6:	2075      	movs	r0, #117	@ 0x75
 80010f8:	f000 f80c 	bl	8001114 <read_register>
 80010fc:	4603      	mov	r3, r0
 80010fe:	71bb      	strb	r3, [r7, #6]
	if (reg_value == WHO_AM_I_VALUE)
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	2b68      	cmp	r3, #104	@ 0x68
 8001104:	d101      	bne.n	800110a <who_am_i+0x22>
	{
		device_present = true;
 8001106:	2301      	movs	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
	}

	return device_present;
 800110a:	79fb      	ldrb	r3, [r7, #7]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <read_register>:
 * \brief     Reads from a register address passed into the function.
 * \param[in] reg_add - Address of the register we want to read.
 * \return    reg_val - Value of the register we read from.
 */
uint8_t read_register(uint8_t reg_add)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef i2c_rx_okay = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, reg_add, 1, &reg_value, 1, I2C_MAX_TIMEOUT);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	2364      	movs	r3, #100	@ 0x64
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 030e 	add.w	r3, r7, #14
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	21d0      	movs	r1, #208	@ 0xd0
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <read_register+0x38>)
 800113a:	f003 f8ed 	bl	8004318 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
	if (i2c_rx_okay != HAL_OK)
	{
		// handle the error
	}
	return reg_value;
 8001142:	7bbb      	ldrb	r3, [r7, #14]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200006d8 	.word	0x200006d8

08001150 <write_register>:
 * \param[in] reg_add - Address of the register we want to write to.
 * \param[in] reg_val - Value of the register we want to write.
 * \return    True is the register write was successful, false if not.
 */
bool write_register(uint8_t reg_add, uint8_t reg_val)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af04      	add	r7, sp, #16
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef i2c_tx_okay = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, reg_add, 1, &reg_val, 1, I2C_MAX_TIMEOUT);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	b29a      	uxth	r2, r3
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1dbb      	adds	r3, r7, #6
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	21d0      	movs	r1, #208	@ 0xd0
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <write_register+0x44>)
 8001176:	f002 ffbb 	bl	80040f0 <HAL_I2C_Mem_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
	if (i2c_tx_okay != HAL_OK)
	{
		// handle the error
	}
	return i2c_tx_okay == HAL_OK;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200006d8 	.word	0x200006d8

08001198 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	2200      	movs	r2, #0
 80011c4:	2178      	movs	r1, #120	@ 0x78
 80011c6:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <ssd1306_WriteCommand+0x2c>)
 80011c8:	f002 ff92 	bl	80040f0 <HAL_I2C_Mem_Write>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000072c 	.word	0x2000072c

080011d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011ea:	9202      	str	r2, [sp, #8]
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	2240      	movs	r2, #64	@ 0x40
 80011f6:	2178      	movs	r1, #120	@ 0x78
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <ssd1306_WriteData+0x30>)
 80011fa:	f002 ff79 	bl	80040f0 <HAL_I2C_Mem_Write>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000072c 	.word	0x2000072c

0800120c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001210:	f7ff ffc2 	bl	8001198 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	@ 0x64
 8001216:	f001 fb27 	bl	8002868 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fa30 	bl	8001680 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001220:	2020      	movs	r0, #32
 8001222:	f7ff ffc1 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff ffbe 	bl	80011a8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800122c:	20b0      	movs	r0, #176	@ 0xb0
 800122e:	f7ff ffbb 	bl	80011a8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001232:	20c8      	movs	r0, #200	@ 0xc8
 8001234:	f7ff ffb8 	bl	80011a8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ffb5 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800123e:	2010      	movs	r0, #16
 8001240:	f7ff ffb2 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001244:	2040      	movs	r0, #64	@ 0x40
 8001246:	f7ff ffaf 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800124a:	20ff      	movs	r0, #255	@ 0xff
 800124c:	f000 fa05 	bl	800165a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001250:	20a1      	movs	r0, #161	@ 0xa1
 8001252:	f7ff ffa9 	bl	80011a8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001256:	20a6      	movs	r0, #166	@ 0xa6
 8001258:	f7ff ffa6 	bl	80011a8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800125c:	20a8      	movs	r0, #168	@ 0xa8
 800125e:	f7ff ffa3 	bl	80011a8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001262:	203f      	movs	r0, #63	@ 0x3f
 8001264:	f7ff ffa0 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001268:	20a4      	movs	r0, #164	@ 0xa4
 800126a:	f7ff ff9d 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800126e:	20d3      	movs	r0, #211	@ 0xd3
 8001270:	f7ff ff9a 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff ff97 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800127a:	20d5      	movs	r0, #213	@ 0xd5
 800127c:	f7ff ff94 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001280:	20f0      	movs	r0, #240	@ 0xf0
 8001282:	f7ff ff91 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001286:	20d9      	movs	r0, #217	@ 0xd9
 8001288:	f7ff ff8e 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800128c:	2022      	movs	r0, #34	@ 0x22
 800128e:	f7ff ff8b 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001292:	20da      	movs	r0, #218	@ 0xda
 8001294:	f7ff ff88 	bl	80011a8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001298:	2012      	movs	r0, #18
 800129a:	f7ff ff85 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800129e:	20db      	movs	r0, #219	@ 0xdb
 80012a0:	f7ff ff82 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012a4:	2020      	movs	r0, #32
 80012a6:	f7ff ff7f 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012aa:	208d      	movs	r0, #141	@ 0x8d
 80012ac:	f7ff ff7c 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012b0:	2014      	movs	r0, #20
 80012b2:	f7ff ff79 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 f9e2 	bl	8001680 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f80f 	bl	80012e0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012c2:	f000 f825 	bl	8001310 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <ssd1306_Init+0xd0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <ssd1306_Init+0xd0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012d2:	4b02      	ldr	r3, [pc, #8]	@ (80012dc <ssd1306_Init+0xd0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	711a      	strb	r2, [r3, #4]
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000600 	.word	0x20000600

080012e0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <ssd1306_Fill+0x14>
 80012f0:	2300      	movs	r3, #0
 80012f2:	e000      	b.n	80012f6 <ssd1306_Fill+0x16>
 80012f4:	23ff      	movs	r3, #255	@ 0xff
 80012f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fa:	4619      	mov	r1, r3
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <ssd1306_Fill+0x2c>)
 80012fe:	f007 ffab 	bl	8009258 <memset>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000200 	.word	0x20000200

08001310 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e016      	b.n	800134a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b50      	subs	r3, #80	@ 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff40 	bl	80011a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff3d 	bl	80011a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff ff3a 	bl	80011a8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4a08      	ldr	r2, [pc, #32]	@ (800135c <ssd1306_UpdateScreen+0x4c>)
 800133a:	4413      	add	r3, r2
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff4a 	bl	80011d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3301      	adds	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d9e5      	bls.n	800131c <ssd1306_UpdateScreen+0xc>
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000200 	.word	0x20000200

08001360 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db3d      	blt.n	80013f6 <ssd1306_DrawPixel+0x96>
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b3f      	cmp	r3, #63	@ 0x3f
 800137e:	d83a      	bhi.n	80013f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d11a      	bne.n	80013bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	4413      	add	r3, r2
 8001394:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b259      	sxtb	r1, r3
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	b2c9      	uxtb	r1, r1
 80013b6:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 80013b8:	54d1      	strb	r1, [r2, r3]
 80013ba:	e01d      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4413      	add	r3, r2
 80013ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4603      	mov	r3, r0
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	4413      	add	r3, r2
 80013ee:	b2c9      	uxtb	r1, r1
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 80013f2:	54d1      	strb	r1, [r2, r3]
 80013f4:	e000      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
        return;
 80013f6:	bf00      	nop
    }
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000200 	.word	0x20000200

08001408 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4638      	mov	r0, r7
 8001412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001416:	4623      	mov	r3, r4
 8001418:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2b1f      	cmp	r3, #31
 800141e:	d902      	bls.n	8001426 <ssd1306_WriteChar+0x1e>
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b7e      	cmp	r3, #126	@ 0x7e
 8001424:	d901      	bls.n	800142a <ssd1306_WriteChar+0x22>
        return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e077      	b.n	800151a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	783b      	ldrb	r3, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	2b80      	cmp	r3, #128	@ 0x80
 8001436:	dc06      	bgt.n	8001446 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001438:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 800143a:	885b      	ldrh	r3, [r3, #2]
 800143c:	461a      	mov	r2, r3
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001442:	2b40      	cmp	r3, #64	@ 0x40
 8001444:	dd01      	ble.n	800144a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001446:	2300      	movs	r3, #0
 8001448:	e067      	b.n	800151a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e04e      	b.n	80014ee <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3b20      	subs	r3, #32
 8001456:	7879      	ldrb	r1, [r7, #1]
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	4619      	mov	r1, r3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	440b      	add	r3, r1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	e036      	b.n	80014de <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b2d8      	uxtb	r0, r3
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 8001490:	885b      	ldrh	r3, [r3, #2]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4413      	add	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff ff5d 	bl	8001360 <ssd1306_DrawPixel>
 80014a6:	e017      	b.n	80014d8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b2d8      	uxtb	r0, r3
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	b2d9      	uxtb	r1, r3
 80014c4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	f7ff ff44 	bl	8001360 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	783b      	ldrb	r3, [r7, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d3c3      	bcc.n	8001470 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	3301      	adds	r3, #1
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	787b      	ldrb	r3, [r7, #1]
 80014f0:	461a      	mov	r2, r3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d3ab      	bcc.n	8001450 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d005      	beq.n	800150e <ssd1306_WriteChar+0x106>
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	3a20      	subs	r2, #32
 8001508:	440a      	add	r2, r1
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	e000      	b.n	8001510 <ssd1306_WriteChar+0x108>
 800150e:	783a      	ldrb	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 8001516:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000600 	.word	0x20000600

08001528 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	4638      	mov	r0, r7
 8001532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001536:	e013      	b.n	8001560 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	7818      	ldrb	r0, [r3, #0]
 800153c:	7e3b      	ldrb	r3, [r7, #24]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	463b      	mov	r3, r7
 8001542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001544:	f7ff ff60 	bl	8001408 <ssd1306_WriteChar>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d002      	beq.n	800155a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	e008      	b.n	800156c <ssd1306_WriteString+0x44>
        }
        str++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e7      	bne.n	8001538 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	781b      	ldrb	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <ssd1306_SetCursor+0x2c>)
 800158a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <ssd1306_SetCursor+0x2c>)
 8001592:	805a      	strh	r2, [r3, #2]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	20000600 	.word	0x20000600

080015a4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	603a      	str	r2, [r7, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	460b      	mov	r3, r1
 80015b4:	71bb      	strb	r3, [r7, #6]
 80015b6:	4613      	mov	r3, r2
 80015b8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	3307      	adds	r3, #7
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da00      	bge.n	80015c4 <ssd1306_DrawBitmap+0x20>
 80015c2:	3307      	adds	r3, #7
 80015c4:	10db      	asrs	r3, r3, #3
 80015c6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db3e      	blt.n	8001652 <ssd1306_DrawBitmap+0xae>
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80015d8:	d83b      	bhi.n	8001652 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	73bb      	strb	r3, [r7, #14]
 80015de:	e033      	b.n	8001648 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	737b      	strb	r3, [r7, #13]
 80015e4:	e026      	b.n	8001634 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e00d      	b.n	8001614 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	7b7a      	ldrb	r2, [r7, #13]
 8001604:	08d2      	lsrs	r2, r2, #3
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	4413      	add	r3, r2
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da08      	bge.n	800162e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	4413      	add	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	7f3a      	ldrb	r2, [r7, #28]
 8001626:	79b9      	ldrb	r1, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fe99 	bl	8001360 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	3301      	adds	r3, #1
 8001632:	737b      	strb	r3, [r7, #13]
 8001634:	7b7a      	ldrb	r2, [r7, #13]
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3d4      	bcc.n	80015e6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	3301      	adds	r3, #1
 8001640:	73bb      	strb	r3, [r7, #14]
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	3301      	adds	r3, #1
 8001646:	71bb      	strb	r3, [r7, #6]
 8001648:	7bba      	ldrb	r2, [r7, #14]
 800164a:	7e3b      	ldrb	r3, [r7, #24]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3c7      	bcc.n	80015e0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001650:	e000      	b.n	8001654 <ssd1306_DrawBitmap+0xb0>
        return;
 8001652:	bf00      	nop
}
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001664:	2381      	movs	r3, #129	@ 0x81
 8001666:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd9c 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fd98 	bl	80011a8 <ssd1306_WriteCommand>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001690:	23af      	movs	r3, #175	@ 0xaf
 8001692:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <ssd1306_SetDisplayOn+0x38>)
 8001696:	2201      	movs	r2, #1
 8001698:	715a      	strb	r2, [r3, #5]
 800169a:	e004      	b.n	80016a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800169c:	23ae      	movs	r3, #174	@ 0xae
 800169e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <ssd1306_SetDisplayOn+0x38>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd7d 	bl	80011a8 <ssd1306_WriteCommand>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000600 	.word	0x20000600

080016bc <draw_github_intro>:
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
    ssd1306_UpdateScreen();
}

void draw_github_intro()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fe0c 	bl	80012e0 <ssd1306_Fill>
	ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2340      	movs	r3, #64	@ 0x40
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <draw_github_intro+0x2c>)
 80016d4:	2100      	movs	r1, #0
 80016d6:	2020      	movs	r0, #32
 80016d8:	f7ff ff64 	bl	80015a4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80016dc:	f7ff fe18 	bl	8001310 <ssd1306_UpdateScreen>
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800c2cc 	.word	0x0800c2cc

080016ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001704:	4a2b      	ldr	r2, [pc, #172]	@ (80017b4 <MX_ADC1_Init+0xc8>)
 8001706:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800170e:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001714:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800171a:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001720:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001722:	2208      	movs	r2, #8
 8001724:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001728:	2200      	movs	r2, #0
 800172a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800172c:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800172e:	2201      	movs	r2, #1
 8001730:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001734:	2201      	movs	r2, #1
 8001736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001738:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001748:	2200      	movs	r2, #0
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001756:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800175a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001764:	4812      	ldr	r0, [pc, #72]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001766:	f001 fa6b 	bl	8002c40 <HAL_ADC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001770:	f000 fba0 	bl	8001eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_ADC1_Init+0xcc>)
 8001776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001778:	2306      	movs	r3, #6
 800177a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001780:	237f      	movs	r3, #127	@ 0x7f
 8001782:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001784:	2304      	movs	r3, #4
 8001786:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001792:	f001 fc97 	bl	80030c4 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800179c:	f000 fb8a 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  // ADC needs to be started to work.
  (void)HAL_ADC_Start(&hadc1);
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 80017a2:	f001 fb8f 	bl	8002ec4 <HAL_ADC_Start>

  /* USER CODE END ADC1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000674 	.word	0x20000674
 80017b4:	50040000 	.word	0x50040000
 80017b8:	25b00200 	.word	0x25b00200

080017bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09e      	sub	sp, #120	@ 0x78
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2254      	movs	r2, #84	@ 0x54
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f007 fd3b 	bl	8009258 <memset>
  if(adcHandle->Instance==ADC1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a25      	ldr	r2, [pc, #148]	@ (800187c <HAL_ADC_MspInit+0xc0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d143      	bne.n	8001874 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80017f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017f8:	2301      	movs	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001800:	2310      	movs	r3, #16
 8001802:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001804:	2307      	movs	r3, #7
 8001806:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800180c:	2302      	movs	r3, #2
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f004 f89c 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001826:	f000 fb45 	bl	8001eb4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001830:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800185a:	2310      	movs	r3, #16
 800185c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800185e:	230b      	movs	r3, #11
 8001860:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001870:	f002 fa20 	bl	8003cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001874:	bf00      	nop
 8001876:	3778      	adds	r7, #120	@ 0x78
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	50040000 	.word	0x50040000
 8001880:	40021000 	.word	0x40021000

08001884 <pollADC>:
}

/* USER CODE BEGIN 1 */

void pollADC(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b09c      	sub	sp, #112	@ 0x70
 8001888:	af02      	add	r7, sp, #8
	// usage of both UART and the ADC
	adc_ok = HAL_ADC_PollForConversion(&hadc1, 100);
 800188a:	2164      	movs	r1, #100	@ 0x64
 800188c:	482e      	ldr	r0, [pc, #184]	@ (8001948 <pollADC+0xc4>)
 800188e:	f001 fb7c 	bl	8002f8a <HAL_ADC_PollForConversion>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <pollADC+0xc8>)
 8001898:	701a      	strb	r2, [r3, #0]

	if (adc_ok == HAL_OK)
 800189a:	4b2c      	ldr	r3, [pc, #176]	@ (800194c <pollADC+0xc8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d147      	bne.n	8001932 <pollADC+0xae>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 80018a2:	4829      	ldr	r0, [pc, #164]	@ (8001948 <pollADC+0xc4>)
 80018a4:	f001 fc00 	bl	80030a8 <HAL_ADC_GetValue>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a29      	ldr	r2, [pc, #164]	@ (8001950 <pollADC+0xcc>)
 80018ac:	6013      	str	r3, [r2, #0]
		voltage = volt_per_bit * adc_value;
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <pollADC+0xcc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001954 <pollADC+0xd0>
 80018be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c2:	4b25      	ldr	r3, [pc, #148]	@ (8001958 <pollADC+0xd4>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
		snprintf(buffer, 100, "Voltage read from ADC was: %.6f\r\n", voltage);
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <pollADC+0xd4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe45 	bl	800055c <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	e9cd 2300 	strd	r2, r3, [sp]
 80018da:	4a20      	ldr	r2, [pc, #128]	@ (800195c <pollADC+0xd8>)
 80018dc:	2164      	movs	r1, #100	@ 0x64
 80018de:	4820      	ldr	r0, [pc, #128]	@ (8001960 <pollADC+0xdc>)
 80018e0:	f007 fb98 	bl	8009014 <sniprintf>
		serial_uart_send_tx(buffer, 100);
 80018e4:	2164      	movs	r1, #100	@ 0x64
 80018e6:	481e      	ldr	r0, [pc, #120]	@ (8001960 <pollADC+0xdc>)
 80018e8:	f000 feaa 	bl	8002640 <serial_uart_send_tx>

		// output to the OLED display
		ssd1306_SetCursor(2, 20);
 80018ec:	2114      	movs	r1, #20
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7ff fe40 	bl	8001574 <ssd1306_SetCursor>
		char volts_msg[MAX_BUFFER_LEN] = "";
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2260      	movs	r2, #96	@ 0x60
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fca9 	bl	8009258 <memset>
		snprintf(volts_msg, MAX_BUFFER_LEN, "ADC: %.1fV", voltage);
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <pollADC+0xd4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe26 	bl	800055c <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	1d38      	adds	r0, r7, #4
 8001916:	e9cd 2300 	strd	r2, r3, [sp]
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <pollADC+0xe0>)
 800191c:	2164      	movs	r1, #100	@ 0x64
 800191e:	f007 fb79 	bl	8009014 <sniprintf>
		ssd1306_WriteString(volts_msg, Font_11x18, White);
 8001922:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <pollADC+0xe4>)
 8001924:	1d38      	adds	r0, r7, #4
 8001926:	2201      	movs	r2, #1
 8001928:	9200      	str	r2, [sp, #0]
 800192a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192c:	f7ff fdfc 	bl	8001528 <ssd1306_WriteString>
	}
	else
	{
		serial_uart_send_tx((char *)error, 9);
	}
}
 8001930:	e005      	b.n	800193e <pollADC+0xba>
		serial_uart_send_tx((char *)error, 9);
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <pollADC+0xe8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2109      	movs	r1, #9
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fe81 	bl	8002640 <serial_uart_send_tx>
}
 800193e:	bf00      	nop
 8001940:	3768      	adds	r7, #104	@ 0x68
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000674 	.word	0x20000674
 800194c:	20000000 	.word	0x20000000
 8001950:	20000608 	.word	0x20000608
 8001954:	3a534067 	.word	0x3a534067
 8001958:	2000060c 	.word	0x2000060c
 800195c:	0800b468 	.word	0x0800b468
 8001960:	20000610 	.word	0x20000610
 8001964:	0800b48c 	.word	0x0800b48c
 8001968:	0800c2c0 	.word	0x0800c2c0
 800196c:	20000004 	.word	0x20000004

08001970 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	4b28      	ldr	r3, [pc, #160]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001992:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2102      	movs	r1, #2
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d6:	f002 fad7 	bl	8003f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2108      	movs	r1, #8
 80019de:	4813      	ldr	r0, [pc, #76]	@ (8001a2c <MX_GPIO_Init+0xbc>)
 80019e0:	f002 fad2 	bl	8003f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fe:	f002 f959 	bl	8003cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a02:	2308      	movs	r3, #8
 8001a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <MX_GPIO_Init+0xbc>)
 8001a1a:	f002 f94b 	bl	8003cb4 <HAL_GPIO_Init>

}
 8001a1e:	bf00      	nop
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000400 	.word	0x48000400

08001a30 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a36:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <MX_I2C1_Init+0x7c>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <MX_I2C1_Init+0x80>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a64:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6a:	480f      	ldr	r0, [pc, #60]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a6c:	f002 faa4 	bl	8003fb8 <HAL_I2C_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f000 fa1d 	bl	8001eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a7e:	f003 f827 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a88:	f000 fa14 	bl	8001eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a90:	f003 f869 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 fa0b 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  if (mpu6050_init() == false)
 8001a9e:	f7ff fa79 	bl	8000f94 <mpu6050_init>
	  // TODO: handle init error for mpu6050
  }

  /* USER CODE END I2C1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200006d8 	.word	0x200006d8
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	00b07cb4 	.word	0x00b07cb4

08001ab4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001aba:	4a20      	ldr	r2, [pc, #128]	@ (8001b3c <MX_I2C3_Init+0x88>)
 8001abc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0060112F;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <MX_I2C3_Init+0x8c>)
 8001ac2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aca:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001aee:	4812      	ldr	r0, [pc, #72]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001af0:	f002 fa62 	bl	8003fb8 <HAL_I2C_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001afa:	f000 f9db 	bl	8001eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afe:	2100      	movs	r1, #0
 8001b00:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001b02:	f002 ffe5 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b0c:	f000 f9d2 	bl	8001eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4809      	ldr	r0, [pc, #36]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001b14:	f003 f827 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 f9c9 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  ssd1306_Init();
 8001b22:	f7ff fb73 	bl	800120c <ssd1306_Init>

  draw_github_intro();
 8001b26:	f7ff fdc9 	bl	80016bc <draw_github_intro>
  HAL_Delay(1000); // let the logo stay on the screen for a second
 8001b2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b2e:	f000 fe9b 	bl	8002868 <HAL_Delay>

  /* USER CODE END I2C3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000072c 	.word	0x2000072c
 8001b3c:	40005c00 	.word	0x40005c00
 8001b40:	0060112f 	.word	0x0060112f

08001b44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a2      	sub	sp, #136	@ 0x88
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	2254      	movs	r2, #84	@ 0x54
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f007 fb77 	bl	8009258 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca8 <HAL_I2C_MspInit+0x164>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d138      	bne.n	8001be6 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fee9 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b8c:	f000 f992 	bl	8001eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b46      	ldr	r3, [pc, #280]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	4a45      	ldr	r2, [pc, #276]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9c:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba8:	23c0      	movs	r3, #192	@ 0xc0
 8001baa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	483a      	ldr	r0, [pc, #232]	@ (8001cb0 <HAL_I2C_MspInit+0x16c>)
 8001bc8:	f002 f874 	bl	8003cb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bcc:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	4a36      	ldr	r2, [pc, #216]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001bd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd8:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001be4:	e05c      	b.n	8001ca0 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C3)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a32      	ldr	r2, [pc, #200]	@ (8001cb4 <HAL_I2C_MspInit+0x170>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d157      	bne.n	8001ca0 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bf4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 feaa 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8001c0a:	f000 f953 	bl	8001eb4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c50:	2304      	movs	r3, #4
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c60:	f002 f828 	bl	8003cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c64:	2310      	movs	r3, #16
 8001c66:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c68:	2312      	movs	r3, #18
 8001c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c76:	2304      	movs	r3, #4
 8001c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c80:	4619      	mov	r1, r3
 8001c82:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <HAL_I2C_MspInit+0x16c>)
 8001c84:	f002 f816 	bl	8003cb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3788      	adds	r7, #136	@ 0x88
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	40005c00 	.word	0x40005c00

08001cb8 <print_temperature_data>:
}

/* USER CODE BEGIN 1 */

void print_temperature_data(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0b8      	sub	sp, #224	@ 0xe0
 8001cbc:	af02      	add	r7, sp, #8
	float temp_value = mpu6050_get_temperature_data();
 8001cbe:	f7ff f9c3 	bl	8001048 <mpu6050_get_temperature_data>
 8001cc2:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
	// comes in as C, convert to F
	// (C × 9/5) + 32
	float temp_value_F = (temp_value * 1.8) + 32.0;
 8001cc6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001cca:	f7fe fc47 	bl	800055c <__aeabi_f2d>
 8001cce:	a338      	add	r3, pc, #224	@ (adr r3, 8001db0 <print_temperature_data+0xf8>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc9a 	bl	800060c <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <print_temperature_data+0xe8>)
 8001ce6:	f7fe fadb 	bl	80002a0 <__adddf3>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff63 	bl	8000bbc <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	char temp_msg[MAX_BUFFER_LEN] = "";
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d04:	2260      	movs	r2, #96	@ 0x60
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f007 faa5 	bl	8009258 <memset>

	snprintf(temp_msg, MAX_BUFFER_LEN, "temperature is: %.1f\r\n", temp_value_F);
 8001d0e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001d12:	f7fe fc23 	bl	800055c <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8001d22:	4a20      	ldr	r2, [pc, #128]	@ (8001da4 <print_temperature_data+0xec>)
 8001d24:	2164      	movs	r1, #100	@ 0x64
 8001d26:	f007 f975 	bl	8009014 <sniprintf>

	// output over the uart to serial port
	uint16_t temp_buffer_len = strlen(temp_msg);
 8001d2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa9e 	bl	8000270 <strlen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
	serial_uart_send_tx(temp_msg, temp_buffer_len);
 8001d3a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8001d3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fc7b 	bl	8002640 <serial_uart_send_tx>

	// output to the OLED display
	ssd1306_Fill(Black);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fac8 	bl	80012e0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8001d50:	2100      	movs	r1, #0
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff fc0e 	bl	8001574 <ssd1306_SetCursor>
	char temp_F[MAX_BUFFER_LEN] = "";
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	2260      	movs	r2, #96	@ 0x60
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f007 fa77 	bl	8009258 <memset>
	snprintf(temp_F, MAX_BUFFER_LEN, "Temp: %.1fF", temp_value_F);
 8001d6a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001d6e:	f7fe fbf5 	bl	800055c <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	1d38      	adds	r0, r7, #4
 8001d78:	e9cd 2300 	strd	r2, r3, [sp]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <print_temperature_data+0xf0>)
 8001d7e:	2164      	movs	r1, #100	@ 0x64
 8001d80:	f007 f948 	bl	8009014 <sniprintf>
	ssd1306_WriteString(temp_F, Font_11x18, White);
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <print_temperature_data+0xf4>)
 8001d86:	1d38      	adds	r0, r7, #4
 8001d88:	2201      	movs	r2, #1
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8e:	f7ff fbcb 	bl	8001528 <ssd1306_WriteString>
}
 8001d92:	bf00      	nop
 8001d94:	37d8      	adds	r7, #216	@ 0xd8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	40400000 	.word	0x40400000
 8001da4:	0800b498 	.word	0x0800b498
 8001da8:	0800b4b0 	.word	0x0800b4b0
 8001dac:	0800c2c0 	.word	0x0800c2c0
 8001db0:	cccccccd 	.word	0xcccccccd
 8001db4:	3ffccccc 	.word	0x3ffccccc

08001db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dbc:	f000 fcdf 	bl	800277e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc0:	f000 f816 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc4:	f7ff fdd4 	bl	8001970 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dc8:	f000 fac8 	bl	800235c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001dcc:	f000 fa8c 	bl	80022e8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001dd0:	f7ff fc8c 	bl	80016ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8001dd4:	f7ff fe2c 	bl	8001a30 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001dd8:	f7ff fe6c 	bl	8001ab4 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001ddc:	f000 f9a6 	bl	800212c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start the interrupt timer.
  HAL_TIM_Base_Start_IT(&htim2);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <main+0x34>)
 8001de2:	f004 f909 	bl	8005ff8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001de6:	bf00      	nop
 8001de8:	e7fd      	b.n	8001de6 <main+0x2e>
 8001dea:	bf00      	nop
 8001dec:	20000784 	.word	0x20000784

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b096      	sub	sp, #88	@ 0x58
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	2244      	movs	r2, #68	@ 0x44
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f007 fa2a 	bl	8009258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	463b      	mov	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e16:	f002 ff11 	bl	8004c3c <HAL_PWREx_ControlVoltageScaling>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e20:	f000 f848 	bl	8001eb4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e24:	f002 feec 	bl	8004c00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e28:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <SystemClock_Config+0xc0>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2e:	4a20      	ldr	r2, [pc, #128]	@ (8001eb0 <SystemClock_Config+0xc0>)
 8001e30:	f023 0318 	bic.w	r3, r3, #24
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e38:	2314      	movs	r3, #20
 8001e3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e48:	2360      	movs	r3, #96	@ 0x60
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e50:	2301      	movs	r3, #1
 8001e52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 ff3b 	bl	8004ce8 <HAL_RCC_OscConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e78:	f000 f81c 	bl	8001eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e80:	2303      	movs	r3, #3
 8001e82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e90:	463b      	mov	r3, r7
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fb3b 	bl	8005510 <HAL_RCC_ClockConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ea0:	f000 f808 	bl	8001eb4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ea4:	f003 ff4e 	bl	8005d44 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ea8:	bf00      	nop
 8001eaa:	3758      	adds	r7, #88	@ 0x58
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <Error_Handler+0x8>

08001ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eca:	4a0e      	ldr	r2, [pc, #56]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	4a08      	ldr	r2, [pc, #32]	@ (8001f04 <HAL_MspInit+0x44>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_MspInit+0x44>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <NMI_Handler+0x4>

08001f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <MemManage_Handler+0x4>

08001f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5e:	f000 fc63 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <TIM2_IRQHandler+0x10>)
 8001f6e:	f004 f8f8 	bl	8006162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000784 	.word	0x20000784

08001f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_kill>:

int _kill(int pid, int sig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f96:	f007 f96b 	bl	8009270 <__errno>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2216      	movs	r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_exit>:

void _exit (int status)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffe7 	bl	8001f8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <_exit+0x12>

08001fc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e00a      	b.n	8001fea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	4601      	mov	r1, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbf0      	blt.n	8001fd4 <_read+0x12>
  }

  return len;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e009      	b.n	8002022 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	dbf1      	blt.n	800200e <_write+0x12>
  }
  return len;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_close>:

int _close(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800205c:	605a      	str	r2, [r3, #4]
  return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_isatty>:

int _isatty(int file)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f007 f8d0 	bl	8009270 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2000c000 	.word	0x2000c000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20000780 	.word	0x20000780
 8002104:	20000b00 	.word	0x20000b00

08002108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	@ 0x38
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	615a      	str	r2, [r3, #20]
 800215c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800215e:	4b2e      	ldr	r3, [pc, #184]	@ (8002218 <MX_TIM2_Init+0xec>)
 8002160:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002164:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 8002166:	4b2c      	ldr	r3, [pc, #176]	@ (8002218 <MX_TIM2_Init+0xec>)
 8002168:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800216c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <MX_TIM2_Init+0xec>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8002174:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <MX_TIM2_Init+0xec>)
 8002176:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800217a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <MX_TIM2_Init+0xec>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002182:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <MX_TIM2_Init+0xec>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002188:	4823      	ldr	r0, [pc, #140]	@ (8002218 <MX_TIM2_Init+0xec>)
 800218a:	f003 fedd 	bl	8005f48 <HAL_TIM_Base_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002194:	f7ff fe8e 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800219e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a2:	4619      	mov	r1, r3
 80021a4:	481c      	ldr	r0, [pc, #112]	@ (8002218 <MX_TIM2_Init+0xec>)
 80021a6:	f004 f95d 	bl	8006464 <HAL_TIM_ConfigClockSource>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80021b0:	f7ff fe80 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80021b4:	4818      	ldr	r0, [pc, #96]	@ (8002218 <MX_TIM2_Init+0xec>)
 80021b6:	f003 ff73 	bl	80060a0 <HAL_TIM_OC_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80021c0:	f7ff fe78 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	4811      	ldr	r0, [pc, #68]	@ (8002218 <MX_TIM2_Init+0xec>)
 80021d4:	f004 fdc0 	bl	8006d58 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80021de:	f7ff fe69 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4807      	ldr	r0, [pc, #28]	@ (8002218 <MX_TIM2_Init+0xec>)
 80021fa:	f004 f8b9 	bl	8006370 <HAL_TIM_OC_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002204:	f7ff fe56 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002208:	4803      	ldr	r0, [pc, #12]	@ (8002218 <MX_TIM2_Init+0xec>)
 800220a:	f000 f82b 	bl	8002264 <HAL_TIM_MspPostInit>

}
 800220e:	bf00      	nop
 8002210:	3738      	adds	r7, #56	@ 0x38
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000784 	.word	0x20000784

0800221c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222c:	d113      	bne.n	8002256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222e:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <HAL_TIM_Base_MspInit+0x44>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <HAL_TIM_Base_MspInit+0x44>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6593      	str	r3, [r2, #88]	@ 0x58
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_TIM_Base_MspInit+0x44>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	201c      	movs	r0, #28
 800224c:	f001 fc7d 	bl	8003b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002250:	201c      	movs	r0, #28
 8002252:	f001 fc96 	bl	8003b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000

08002264 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002284:	d11c      	bne.n	80022c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_TIM_MspPostInit+0x64>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_TIM_MspPostInit+0x64>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_TIM_MspPostInit+0x64>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800229e:	2320      	movs	r3, #32
 80022a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022bc:	f001 fcfa 	bl	8003cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	// our (close to 1 second) timer elapsed, do updates in here.

	print_temperature_data();
 80022d4:	f7ff fcf0 	bl	8001cb8 <print_temperature_data>
	pollADC();
 80022d8:	f7ff fad4 	bl	8001884 <pollADC>
	ssd1306_UpdateScreen();
 80022dc:	f7ff f818 	bl	8001310 <ssd1306_UpdateScreen>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 80022ee:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <MX_USART1_UART_Init+0x6c>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022f2:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 80022f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231e:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800232a:	4809      	ldr	r0, [pc, #36]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 800232c:	f004 fd98 	bl	8006e60 <HAL_UART_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002336:	f7ff fdbd 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_Delay(20); // delay needed to get UART working properly
 800233a:	2014      	movs	r0, #20
 800233c:	f000 fa94 	bl	8002868 <HAL_Delay>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002340:	2201      	movs	r2, #1
 8002342:	4905      	ldr	r1, [pc, #20]	@ (8002358 <MX_USART1_UART_Init+0x70>)
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <MX_USART1_UART_Init+0x68>)
 8002346:	f004 fec1 	bl	80070cc <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200008a0 	.word	0x200008a0
 8002354:	40013800 	.word	0x40013800
 8002358:	200007d0 	.word	0x200007d0

0800235c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002360:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 8002362:	4a1b      	ldr	r2, [pc, #108]	@ (80023d0 <MX_USART2_UART_Init+0x74>)
 8002364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 8002368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800236c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 8002394:	2200      	movs	r2, #0
 8002396:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 800239a:	2200      	movs	r2, #0
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800239e:	480b      	ldr	r0, [pc, #44]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 80023a0:	f004 fd5e 	bl	8006e60 <HAL_UART_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023aa:	f7ff fd83 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_Delay(20); // delay needed to get UART working properly
 80023ae:	2014      	movs	r0, #20
 80023b0:	f000 fa5a 	bl	8002868 <HAL_Delay>

  HAL_UART_Transmit_IT(&huart2, uart2_tx_buffer, MAX_BUFFER_LEN);
 80023b4:	2264      	movs	r2, #100	@ 0x64
 80023b6:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <MX_USART2_UART_Init+0x78>)
 80023b8:	4804      	ldr	r0, [pc, #16]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 80023ba:	f004 fe29 	bl	8007010 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80023be:	2201      	movs	r2, #1
 80023c0:	4905      	ldr	r1, [pc, #20]	@ (80023d8 <MX_USART2_UART_Init+0x7c>)
 80023c2:	4802      	ldr	r0, [pc, #8]	@ (80023cc <MX_USART2_UART_Init+0x70>)
 80023c4:	f004 fe82 	bl	80070cc <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000928 	.word	0x20000928
 80023d0:	40004400 	.word	0x40004400
 80023d4:	200007d4 	.word	0x200007d4
 80023d8:	200007d1 	.word	0x200007d1

080023dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0a0      	sub	sp, #128	@ 0x80
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	2254      	movs	r2, #84	@ 0x54
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f006 ff2b 	bl	8009258 <memset>
  if(uartHandle->Instance==USART1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a46      	ldr	r2, [pc, #280]	@ (8002520 <HAL_UART_MspInit+0x144>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d140      	bne.n	800248e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800240c:	2301      	movs	r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002410:	2300      	movs	r3, #0
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	4618      	mov	r0, r3
 800241a:	f003 fa9d 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002424:	f7ff fd46 	bl	8001eb4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002428:	4b3e      	ldr	r3, [pc, #248]	@ (8002524 <HAL_UART_MspInit+0x148>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242c:	4a3d      	ldr	r2, [pc, #244]	@ (8002524 <HAL_UART_MspInit+0x148>)
 800242e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002432:	6613      	str	r3, [r2, #96]	@ 0x60
 8002434:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_UART_MspInit+0x148>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <HAL_UART_MspInit+0x148>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	4a37      	ldr	r2, [pc, #220]	@ (8002524 <HAL_UART_MspInit+0x148>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244c:	4b35      	ldr	r3, [pc, #212]	@ (8002524 <HAL_UART_MspInit+0x148>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002458:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800245c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002466:	2302      	movs	r3, #2
 8002468:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246a:	2307      	movs	r3, #7
 800246c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002478:	f001 fc1c 	bl	8003cb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2025      	movs	r0, #37	@ 0x25
 8002482:	f001 fb62 	bl	8003b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002486:	2025      	movs	r0, #37	@ 0x25
 8002488:	f001 fb7b 	bl	8003b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800248c:	e043      	b.n	8002516 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <HAL_UART_MspInit+0x14c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d13e      	bne.n	8002516 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800249c:	2300      	movs	r3, #0
 800249e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 fa57 	bl	8005958 <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80024b0:	f7ff fd00 	bl	8001eb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_UART_MspInit+0x148>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <HAL_UART_MspInit+0x148>)
 80024ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024be:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_UART_MspInit+0x148>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_UART_MspInit+0x148>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d0:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <HAL_UART_MspInit+0x148>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_UART_MspInit+0x148>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024e4:	230c      	movs	r3, #12
 80024e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f4:	2307      	movs	r3, #7
 80024f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024fc:	4619      	mov	r1, r3
 80024fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002502:	f001 fbd7 	bl	8003cb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2026      	movs	r0, #38	@ 0x26
 800250c:	f001 fb1d 	bl	8003b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002510:	2026      	movs	r0, #38	@ 0x26
 8002512:	f001 fb36 	bl	8003b82 <HAL_NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3780      	adds	r7, #128	@ 0x80
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40013800 	.word	0x40013800
 8002524:	40021000 	.word	0x40021000
 8002528:	40004400 	.word	0x40004400

0800252c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <USART1_IRQHandler+0x10>)
 8002532:	f004 fe17 	bl	8007164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200008a0 	.word	0x200008a0

08002540 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <USART2_IRQHandler+0x10>)
 8002546:	f004 fe0d 	bl	8007164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000928 	.word	0x20000928

08002554 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <HAL_UART_TxCpltCallback+0x34>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d102      	bne.n	800256e <HAL_UART_TxCpltCallback+0x1a>
	{
		serial_uart_handle_tx();
 8002568:	f000 f882 	bl	8002670 <serial_uart_handle_tx>
	}
	else if (huart->Instance == huart1.Instance)
	{
		hm10_uart_handle_tx();
	}
}
 800256c:	e007      	b.n	800257e <HAL_UART_TxCpltCallback+0x2a>
	else if (huart->Instance == huart1.Instance)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_UART_TxCpltCallback+0x38>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d101      	bne.n	800257e <HAL_UART_TxCpltCallback+0x2a>
		hm10_uart_handle_tx();
 800257a:	f7fe fce7 	bl	8000f4c <hm10_uart_handle_tx>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000928 	.word	0x20000928
 800258c:	200008a0 	.word	0x200008a0

08002590 <HAL_UART_RxCpltCallback>:

// called from HAL for any UART callback setup with Interrupts.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	// if from the HCO5 or HM10 Bluetooth module
	if (huart->Instance == huart1.Instance)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <HAL_UART_RxCpltCallback+0x4c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10a      	bne.n	80025ba <HAL_UART_RxCpltCallback+0x2a>
	{
		hm10_uart_handle_rx(uart1_rx_data);
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_UART_RxCpltCallback+0x50>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fcd6 	bl	8000f5a <hm10_uart_handle_rx>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80025ae:	2201      	movs	r2, #1
 80025b0:	490b      	ldr	r1, [pc, #44]	@ (80025e0 <HAL_UART_RxCpltCallback+0x50>)
 80025b2:	480a      	ldr	r0, [pc, #40]	@ (80025dc <HAL_UART_RxCpltCallback+0x4c>)
 80025b4:	f004 fd8a 	bl	80070cc <HAL_UART_Receive_IT>
	else if (huart->Instance == huart2.Instance)
	{
		serial_uart_handle_rx();
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
	}
}
 80025b8:	e00c      	b.n	80025d4 <HAL_UART_RxCpltCallback+0x44>
	else if (huart->Instance == huart2.Instance)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_UART_RxCpltCallback+0x54>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d106      	bne.n	80025d4 <HAL_UART_RxCpltCallback+0x44>
		serial_uart_handle_rx();
 80025c6:	f000 f85f 	bl	8002688 <serial_uart_handle_rx>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80025ca:	2201      	movs	r2, #1
 80025cc:	4906      	ldr	r1, [pc, #24]	@ (80025e8 <HAL_UART_RxCpltCallback+0x58>)
 80025ce:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <HAL_UART_RxCpltCallback+0x54>)
 80025d0:	f004 fd7c 	bl	80070cc <HAL_UART_Receive_IT>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200008a0 	.word	0x200008a0
 80025e0:	200007d0 	.word	0x200007d0
 80025e4:	20000928 	.word	0x20000928
 80025e8:	200007d1 	.word	0x200007d1

080025ec <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	char* error_msg = "UART error occurred.";
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <HAL_UART_ErrorCallback+0x40>)
 80025f6:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == huart1.Instance)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <HAL_UART_ErrorCallback+0x44>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d106      	bne.n	8002612 <HAL_UART_ErrorCallback+0x26>
	{
		error_msg = "HM10 UART error occurred.";
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_UART_ErrorCallback+0x48>)
 8002606:	60fb      	str	r3, [r7, #12]
		serial_uart_send_tx(error_msg, sizeof(error_msg));
 8002608:	2104      	movs	r1, #4
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f818 	bl	8002640 <serial_uart_send_tx>
	else if (huart->Instance == huart2.Instance)
	{
		error_msg = "Serial port UART error occurred";
		// probably output over BLE or just output to terminal.
	}
}
 8002610:	e007      	b.n	8002622 <HAL_UART_ErrorCallback+0x36>
	else if (huart->Instance == huart2.Instance)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <HAL_UART_ErrorCallback+0x4c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d101      	bne.n	8002622 <HAL_UART_ErrorCallback+0x36>
		error_msg = "Serial port UART error occurred";
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_UART_ErrorCallback+0x50>)
 8002620:	60fb      	str	r3, [r7, #12]
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	0800b4bc 	.word	0x0800b4bc
 8002630:	200008a0 	.word	0x200008a0
 8002634:	0800b4d4 	.word	0x0800b4d4
 8002638:	20000928 	.word	0x20000928
 800263c:	0800b4f0 	.word	0x0800b4f0

08002640 <serial_uart_send_tx>:
 * \brief    Sends content in the buffer over uart tx
 * \param[in] tx_buff - Buffer with the message we want to send.
 * \param[in] buffer_len - Maximum length of the buffer we want to send.
 */
void serial_uart_send_tx(const char *buffer, uint16_t buffer_len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
	strcpy((char *)uart2_tx_buffer, buffer);
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4806      	ldr	r0, [pc, #24]	@ (8002668 <serial_uart_send_tx+0x28>)
 8002650:	f006 fe49 	bl	80092e6 <strcpy>
	HAL_UART_Transmit(&huart2, uart2_tx_buffer, buffer_len, 100);
 8002654:	887a      	ldrh	r2, [r7, #2]
 8002656:	2364      	movs	r3, #100	@ 0x64
 8002658:	4903      	ldr	r1, [pc, #12]	@ (8002668 <serial_uart_send_tx+0x28>)
 800265a:	4804      	ldr	r0, [pc, #16]	@ (800266c <serial_uart_send_tx+0x2c>)
 800265c:	f004 fc4e 	bl	8006efc <HAL_UART_Transmit>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200007d4 	.word	0x200007d4
 800266c:	20000928 	.word	0x20000928

08002670 <serial_uart_handle_tx>:
/*!
 * \brief    Readies the uart tx buffer
 * \param[in] huart - pointer to huart handle.
 */
void serial_uart_handle_tx()
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	memset(uart2_tx_buffer, '\0', (size_t)MAX_BUFFER_LEN); //empty the transmit data buffer to be ready for new data.
 8002674:	2264      	movs	r2, #100	@ 0x64
 8002676:	2100      	movs	r1, #0
 8002678:	4802      	ldr	r0, [pc, #8]	@ (8002684 <serial_uart_handle_tx+0x14>)
 800267a:	f006 fded 	bl	8009258 <memset>
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200007d4 	.word	0x200007d4

08002688 <serial_uart_handle_rx>:
/*!
 * \brief    Handles uart rx by taking in next character, processing it, then sending out over tx
 * \param[in] huart - pointer to huart handle.
 */
void serial_uart_handle_rx()
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
	// if we didn't receive the carriage return increment the rx_buffer and add the next character
	if (uart2_rx_data != '\r')
 800268e:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <serial_uart_handle_rx+0x84>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b0d      	cmp	r3, #13
 8002694:	d00e      	beq.n	80026b4 <serial_uart_handle_rx+0x2c>
	{
		// if there is data coming into the rx_data pointer that isn't the "Enter" character then add it to the buffer.
		uart2_rx_buffer[counter_s++] = uart2_rx_data;
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <serial_uart_handle_rx+0x88>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	491c      	ldr	r1, [pc, #112]	@ (8002710 <serial_uart_handle_rx+0x88>)
 800269e:	600a      	str	r2, [r1, #0]
 80026a0:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <serial_uart_handle_rx+0x84>)
 80026a2:	7811      	ldrb	r1, [r2, #0]
 80026a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <serial_uart_handle_rx+0x8c>)
 80026a6:	54d1      	strb	r1, [r2, r3]
		// Get ready for new data in rx_data_s pointer.
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80026a8:	2201      	movs	r2, #1
 80026aa:	4918      	ldr	r1, [pc, #96]	@ (800270c <serial_uart_handle_rx+0x84>)
 80026ac:	481a      	ldr	r0, [pc, #104]	@ (8002718 <serial_uart_handle_rx+0x90>)
 80026ae:	f004 fd0d 	bl	80070cc <HAL_UART_Receive_IT>
		return;
 80026b2:	e028      	b.n	8002706 <serial_uart_handle_rx+0x7e>
	}

	// otherwise we did get a carriage return, check against our expected string
	if (strcmp(hello_cmd, (char*)uart2_rx_buffer) == 0) // string compare the command against what we received from the sender.
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <serial_uart_handle_rx+0x94>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4916      	ldr	r1, [pc, #88]	@ (8002714 <serial_uart_handle_rx+0x8c>)
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fde0 	bl	8000280 <strcmp>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <serial_uart_handle_rx+0x4c>
	{
		const char *response = "Hello to you too!\r\n";
 80026c6:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <serial_uart_handle_rx+0x98>)
 80026c8:	603b      	str	r3, [r7, #0]
		strcpy((char*)uart2_tx_buffer, response); // move response into tx buffer
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	4815      	ldr	r0, [pc, #84]	@ (8002724 <serial_uart_handle_rx+0x9c>)
 80026ce:	f006 fe0a 	bl	80092e6 <strcpy>
 80026d2:	e005      	b.n	80026e0 <serial_uart_handle_rx+0x58>
	}
	else
	{
		// otherwise put an error in the tx buffer.
		const char *error = "Uh oh, didn't get the right word...\r\n";
 80026d4:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <serial_uart_handle_rx+0xa0>)
 80026d6:	607b      	str	r3, [r7, #4]
		strcpy((char*)uart2_tx_buffer, error);
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4812      	ldr	r0, [pc, #72]	@ (8002724 <serial_uart_handle_rx+0x9c>)
 80026dc:	f006 fe03 	bl	80092e6 <strcpy>
	}

	// now transmit out the answer over tx.
	HAL_UART_Transmit(&huart2, uart2_tx_buffer, (uint16_t)MAX_BUFFER_LEN, 100);
 80026e0:	2364      	movs	r3, #100	@ 0x64
 80026e2:	2264      	movs	r2, #100	@ 0x64
 80026e4:	490f      	ldr	r1, [pc, #60]	@ (8002724 <serial_uart_handle_rx+0x9c>)
 80026e6:	480c      	ldr	r0, [pc, #48]	@ (8002718 <serial_uart_handle_rx+0x90>)
 80026e8:	f004 fc08 	bl	8006efc <HAL_UART_Transmit>
	// clear both buffers
	memset(uart2_tx_buffer, '\0', (size_t)MAX_BUFFER_LEN);
 80026ec:	2264      	movs	r2, #100	@ 0x64
 80026ee:	2100      	movs	r1, #0
 80026f0:	480c      	ldr	r0, [pc, #48]	@ (8002724 <serial_uart_handle_rx+0x9c>)
 80026f2:	f006 fdb1 	bl	8009258 <memset>
	memset(uart2_rx_buffer, '\0', (size_t)MAX_BUFFER_LEN);
 80026f6:	2264      	movs	r2, #100	@ 0x64
 80026f8:	2100      	movs	r1, #0
 80026fa:	4806      	ldr	r0, [pc, #24]	@ (8002714 <serial_uart_handle_rx+0x8c>)
 80026fc:	f006 fdac 	bl	8009258 <memset>
	counter_s = 0; // reset the counter to be ready for new data.
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <serial_uart_handle_rx+0x88>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200007d1 	.word	0x200007d1
 8002710:	2000089c 	.word	0x2000089c
 8002714:	20000838 	.word	0x20000838
 8002718:	20000928 	.word	0x20000928
 800271c:	2000000c 	.word	0x2000000c
 8002720:	0800b518 	.word	0x0800b518
 8002724:	200007d4 	.word	0x200007d4
 8002728:	0800b52c 	.word	0x0800b52c

0800272c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff fcea 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490d      	ldr	r1, [pc, #52]	@ (800276c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0a      	ldr	r4, [pc, #40]	@ (8002778 <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f006 fd8f 	bl	800927c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800275e:	f7ff fb2b 	bl	8001db8 <main>

08002762 <LoopForever>:

LoopForever:
    b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002764:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002770:	0800c894 	.word	0x0800c894
  ldr r2, =_sbss
 8002774:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002778:	20000b00 	.word	0x20000b00

0800277c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC1_IRQHandler>

0800277e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f001 f9d3 	bl	8003b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800278e:	2000      	movs	r0, #0
 8002790:	f000 f80e 	bl	80027b0 <HAL_InitTick>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e001      	b.n	80027a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a0:	f7ff fb8e 	bl	8001ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a4:	79fb      	ldrb	r3, [r7, #7]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027bc:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_InitTick+0x6c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d023      	beq.n	800280c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027c4:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <HAL_InitTick+0x70>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b14      	ldr	r3, [pc, #80]	@ (800281c <HAL_InitTick+0x6c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f9df 	bl	8003b9e <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d809      	bhi.n	8002800 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027f4:	f001 f9a9 	bl	8003b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <HAL_InitTick+0x74>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e007      	b.n	8002810 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e004      	b.n	8002810 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e001      	b.n	8002810 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000014 	.word	0x20000014
 8002820:	20000008 	.word	0x20000008
 8002824:	20000010 	.word	0x20000010

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000014 	.word	0x20000014
 800284c:	200009b0 	.word	0x200009b0

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200009b0 	.word	0x200009b0

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000014 	.word	0x20000014

080028b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3360      	adds	r3, #96	@ 0x60
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b08      	ldr	r3, [pc, #32]	@ (800295c <LL_ADC_SetOffset+0x44>)
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	4313      	orrs	r3, r2
 8002948:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	03fff000 	.word	0x03fff000

08002960 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3360      	adds	r3, #96	@ 0x60
 800296e:	461a      	mov	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3360      	adds	r3, #96	@ 0x60
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3330      	adds	r3, #48	@ 0x30
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	4413      	add	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	211f      	movs	r1, #31
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 011f 	and.w	r1, r3, #31
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0e5b      	lsrs	r3, r3, #25
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	4413      	add	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	0d1b      	lsrs	r3, r3, #20
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2107      	movs	r1, #7
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	401a      	ands	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	0d1b      	lsrs	r3, r3, #20
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	431a      	orrs	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0318 	and.w	r3, r3, #24
 8002aba:	4908      	ldr	r1, [pc, #32]	@ (8002adc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002abc:	40d9      	lsrs	r1, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	0007ffff 	.word	0x0007ffff

08002ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6093      	str	r3, [r2, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b18:	d101      	bne.n	8002b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <LL_ADC_IsEnabled+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_ADC_IsEnabled+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e126      	b.n	8002ea8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7fe fda7 	bl	80017bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff3f 	bl	8002b04 <LL_ADC_IsDeepPowerDownEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff25 	bl	8002ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff5a 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d115      	bne.n	8002cd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff3e 	bl	8002b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb0:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb0 <HAL_ADC_Init+0x270>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	4a7f      	ldr	r2, [pc, #508]	@ (8002eb4 <HAL_ADC_Init+0x274>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cc4:	e002      	b.n	8002ccc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f9      	bne.n	8002cc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff3c 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff75 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8002d08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 80bf 	bne.w	8002e96 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 80bb 	bne.w	8002e96 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d28:	f043 0202 	orr.w	r2, r3, #2
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff35 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d40:	485d      	ldr	r0, [pc, #372]	@ (8002eb8 <HAL_ADC_Init+0x278>)
 8002d42:	f7ff ff2f 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4619      	mov	r1, r3
 8002d52:	485a      	ldr	r0, [pc, #360]	@ (8002ebc <HAL_ADC_Init+0x27c>)
 8002d54:	f7ff fdac 	bl	80028b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7e5b      	ldrb	r3, [r3, #25]
 8002d5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d106      	bne.n	8002d94 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	045b      	lsls	r3, r3, #17
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b42      	ldr	r3, [pc, #264]	@ (8002ec0 <HAL_ADC_Init+0x280>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff25 	bl	8002c18 <LL_ADC_INJ_IsConversionOngoing>
 8002dce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d13d      	bne.n	8002e52 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d13a      	bne.n	8002e52 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002de8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002df8:	f023 0302 	bic.w	r3, r3, #2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	430b      	orrs	r3, r1
 8002e04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d118      	bne.n	8002e42 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e32:	430a      	orrs	r2, r1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	611a      	str	r2, [r3, #16]
 8002e40:	e007      	b.n	8002e52 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10c      	bne.n	8002e74 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	f023 010f 	bic.w	r1, r3, #15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e72:	e007      	b.n	8002e84 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020f 	bic.w	r2, r2, #15
 8002e82:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e94:	e007      	b.n	8002ea6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	053e2d63 	.word	0x053e2d63
 8002eb8:	50040000 	.word	0x50040000
 8002ebc:	50040300 	.word	0x50040300
 8002ec0:	fff0c007 	.word	0xfff0c007

08002ec4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe8e 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d14f      	bne.n	8002f7c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_Start+0x26>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e04b      	b.n	8002f82 <HAL_ADC_Start+0xbe>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fcc8 	bl	8003888 <ADC_Enable>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d137      	bne.n	8002f72 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f22:	d106      	bne.n	8002f32 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	f023 0206 	bic.w	r2, r3, #6
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f30:	e002      	b.n	8002f38 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	221c      	movs	r2, #28
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fe2d 	bl	8002bca <LL_ADC_REG_StartConversion>
 8002f70:	e006      	b.n	8002f80 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f7a:	e001      	b.n	8002f80 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d102      	bne.n	8002fa2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e010      	b.n	8002fc4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e06f      	b.n	80030a0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fc4:	f7ff fc44 	bl	8002850 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fca:	e021      	b.n	8003010 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fd2:	d01d      	beq.n	8003010 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fd4:	f7ff fc3c 	bl	8002850 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <HAL_ADC_PollForConversion+0x60>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d112      	bne.n	8003010 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e047      	b.n	80030a0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0d6      	beq.n	8002fcc <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003022:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fcc7 	bl	80029c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01c      	beq.n	8003074 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7e5b      	ldrb	r3, [r3, #25]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b08      	cmp	r3, #8
 800304e:	d111      	bne.n	8003074 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003054:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b08      	cmp	r3, #8
 8003080:	d104      	bne.n	800308c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2208      	movs	r2, #8
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e008      	b.n	800309e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	220c      	movs	r2, #12
 800309c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b0b6      	sub	sp, #216	@ 0xd8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x22>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e3bb      	b.n	800385e <HAL_ADC_ConfigChannel+0x79a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fd7d 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 83a0 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d824      	bhi.n	800315a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	3b02      	subs	r3, #2
 8003116:	2b03      	cmp	r3, #3
 8003118:	d81b      	bhi.n	8003152 <HAL_ADC_ConfigChannel+0x8e>
 800311a:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <HAL_ADC_ConfigChannel+0x5c>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003139 	.word	0x08003139
 8003128:	08003141 	.word	0x08003141
 800312c:	08003149 	.word	0x08003149
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003130:	230c      	movs	r3, #12
 8003132:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003136:	e010      	b.n	800315a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003138:	2312      	movs	r3, #18
 800313a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800313e:	e00c      	b.n	800315a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003140:	2318      	movs	r3, #24
 8003142:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003146:	e008      	b.n	800315a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800314c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003150:	e003      	b.n	800315a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003152:	2306      	movs	r3, #6
 8003154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003158:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003168:	f7ff fc3e 	bl	80029e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fd3e 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8003176:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fd4a 	bl	8002c18 <LL_ADC_INJ_IsConversionOngoing>
 8003184:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 81a4 	bne.w	80034da <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 819f 	bne.w	80034da <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f7ff fc49 	bl	8002a40 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	08db      	lsrs	r3, r3, #3
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00a      	beq.n	80031e6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6919      	ldr	r1, [r3, #16]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e0:	f7ff fb9a 	bl	8002918 <LL_ADC_SetOffset>
 80031e4:	e179      	b.n	80034da <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fbb7 	bl	8002960 <LL_ADC_GetOffsetChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x14e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fbac 	bl	8002960 <LL_ADC_GetOffsetChannel>
 8003208:	4603      	mov	r3, r0
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	f003 021f 	and.w	r2, r3, #31
 8003210:	e01e      	b.n	8003250 <HAL_ADC_ConfigChannel+0x18c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fba1 	bl	8002960 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003234:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003238:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	e004      	b.n	800324e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003244:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1a4>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0e9b      	lsrs	r3, r3, #26
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	e018      	b.n	800329a <HAL_ADC_ConfigChannel+0x1d6>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800327c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800328c:	2320      	movs	r3, #32
 800328e:	e004      	b.n	800329a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800329a:	429a      	cmp	r2, r3
 800329c:	d106      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fb70 	bl	800298c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fb54 	bl	8002960 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x214>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fb49 	bl	8002960 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 021f 	and.w	r2, r3, #31
 80032d6:	e01e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x252>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fb3e 	bl	8002960 <LL_ADC_GetOffsetChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80032f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80032fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e004      	b.n	8003314 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800330a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_ADC_ConfigChannel+0x26a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	e018      	b.n	8003360 <HAL_ADC_ConfigChannel+0x29c>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003342:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003346:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800334a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003352:	2320      	movs	r3, #32
 8003354:	e004      	b.n	8003360 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003356:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003360:	429a      	cmp	r2, r3
 8003362:	d106      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	2101      	movs	r1, #1
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fb0d 	bl	800298c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2102      	movs	r1, #2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff faf1 	bl	8002960 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_ADC_ConfigChannel+0x2da>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2102      	movs	r1, #2
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fae6 	bl	8002960 <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	e01e      	b.n	80033dc <HAL_ADC_ConfigChannel+0x318>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2102      	movs	r1, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fadb 	bl	8002960 <LL_ADC_GetOffsetChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80033bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80033c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e004      	b.n	80033da <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80033d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x330>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	e014      	b.n	800341e <HAL_ADC_ConfigChannel+0x35a>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003402:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003408:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e004      	b.n	800341e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003414:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800341e:	429a      	cmp	r2, r3
 8003420:	d106      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	2102      	movs	r1, #2
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff faae 	bl	800298c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2103      	movs	r1, #3
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fa92 	bl	8002960 <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <HAL_ADC_ConfigChannel+0x398>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2103      	movs	r1, #3
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fa87 	bl	8002960 <LL_ADC_GetOffsetChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	f003 021f 	and.w	r2, r3, #31
 800345a:	e017      	b.n	800348c <HAL_ADC_ConfigChannel+0x3c8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2103      	movs	r1, #3
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fa7c 	bl	8002960 <LL_ADC_GetOffsetChannel>
 8003468:	4603      	mov	r3, r0
 800346a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003476:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800347e:	2320      	movs	r3, #32
 8003480:	e003      	b.n	800348a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x3e0>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	e011      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x404>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80034b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80034b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80034c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d106      	bne.n	80034da <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2103      	movs	r1, #3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fa59 	bl	800298c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fb60 	bl	8002ba4 <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 8140 	bne.w	800376c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f7ff facd 	bl	8002a98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4a8f      	ldr	r2, [pc, #572]	@ (8003740 <HAL_ADC_ConfigChannel+0x67c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	f040 8131 	bne.w	800376c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x46e>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	0e9b      	lsrs	r3, r3, #26
 8003520:	3301      	adds	r3, #1
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2b09      	cmp	r3, #9
 8003528:	bf94      	ite	ls
 800352a:	2301      	movls	r3, #1
 800352c:	2300      	movhi	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e019      	b.n	8003566 <HAL_ADC_ConfigChannel+0x4a2>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003542:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800354a:	2320      	movs	r3, #32
 800354c:	e003      	b.n	8003556 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800354e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2b09      	cmp	r3, #9
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003566:	2b00      	cmp	r3, #0
 8003568:	d079      	beq.n	800365e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x4c2>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0e9b      	lsrs	r3, r3, #26
 800357c:	3301      	adds	r3, #1
 800357e:	069b      	lsls	r3, r3, #26
 8003580:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003584:	e015      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x4ee>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003596:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800359e:	2320      	movs	r3, #32
 80035a0:	e003      	b.n	80035aa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80035a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	3301      	adds	r3, #1
 80035ac:	069b      	lsls	r3, r3, #26
 80035ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x50e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	0e9b      	lsrs	r3, r3, #26
 80035c4:	3301      	adds	r3, #1
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	e017      	b.n	8003602 <HAL_ADC_ConfigChannel+0x53e>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80035e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80035e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80035ea:	2320      	movs	r3, #32
 80035ec:	e003      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80035ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	ea42 0103 	orr.w	r1, r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x564>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	3301      	adds	r3, #1
 800361a:	f003 021f 	and.w	r2, r3, #31
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	051b      	lsls	r3, r3, #20
 8003626:	e018      	b.n	800365a <HAL_ADC_ConfigChannel+0x596>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800363a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800365a:	430b      	orrs	r3, r1
 800365c:	e081      	b.n	8003762 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_ADC_ConfigChannel+0x5b6>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	3301      	adds	r3, #1
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003678:	e015      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x5e2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e003      	b.n	800369e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	069b      	lsls	r3, r3, #26
 80036a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x602>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0e9b      	lsrs	r3, r3, #26
 80036b8:	3301      	adds	r3, #1
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	e017      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x632>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	61bb      	str	r3, [r7, #24]
  return result;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80036de:	2320      	movs	r3, #32
 80036e0:	e003      	b.n	80036ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	ea42 0103 	orr.w	r1, r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10d      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x65e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	3301      	adds	r3, #1
 800370e:	f003 021f 	and.w	r2, r3, #31
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	3b1e      	subs	r3, #30
 800371a:	051b      	lsls	r3, r3, #20
 800371c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003720:	e01e      	b.n	8003760 <HAL_ADC_ConfigChannel+0x69c>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	60fb      	str	r3, [r7, #12]
  return result;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800373a:	2320      	movs	r3, #32
 800373c:	e006      	b.n	800374c <HAL_ADC_ConfigChannel+0x688>
 800373e:	bf00      	nop
 8003740:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	3b1e      	subs	r3, #30
 800375a:	051b      	lsls	r3, r3, #20
 800375c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003766:	4619      	mov	r1, r3
 8003768:	f7ff f96a 	bl	8002a40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b3d      	ldr	r3, [pc, #244]	@ (8003868 <HAL_ADC_ConfigChannel+0x7a4>)
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d06c      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003778:	483c      	ldr	r0, [pc, #240]	@ (800386c <HAL_ADC_ConfigChannel+0x7a8>)
 800377a:	f7ff f8bf 	bl	80028fc <LL_ADC_GetCommonPathInternalCh>
 800377e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3a      	ldr	r2, [pc, #232]	@ (8003870 <HAL_ADC_ConfigChannel+0x7ac>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d127      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800378c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d121      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a35      	ldr	r2, [pc, #212]	@ (8003874 <HAL_ADC_ConfigChannel+0x7b0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d157      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037aa:	4619      	mov	r1, r3
 80037ac:	482f      	ldr	r0, [pc, #188]	@ (800386c <HAL_ADC_ConfigChannel+0x7a8>)
 80037ae:	f7ff f892 	bl	80028d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b2:	4b31      	ldr	r3, [pc, #196]	@ (8003878 <HAL_ADC_ConfigChannel+0x7b4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	4a30      	ldr	r2, [pc, #192]	@ (800387c <HAL_ADC_ConfigChannel+0x7b8>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	099b      	lsrs	r3, r3, #6
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037cc:	e002      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f9      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037da:	e03a      	b.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a27      	ldr	r2, [pc, #156]	@ (8003880 <HAL_ADC_ConfigChannel+0x7bc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d113      	bne.n	800380e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003874 <HAL_ADC_ConfigChannel+0x7b0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d12a      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003800:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003804:	4619      	mov	r1, r3
 8003806:	4819      	ldr	r0, [pc, #100]	@ (800386c <HAL_ADC_ConfigChannel+0x7a8>)
 8003808:	f7ff f865 	bl	80028d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800380c:	e021      	b.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1c      	ldr	r2, [pc, #112]	@ (8003884 <HAL_ADC_ConfigChannel+0x7c0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d11c      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800381c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a12      	ldr	r2, [pc, #72]	@ (8003874 <HAL_ADC_ConfigChannel+0x7b0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d111      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800382e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003832:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003836:	4619      	mov	r1, r3
 8003838:	480c      	ldr	r0, [pc, #48]	@ (800386c <HAL_ADC_ConfigChannel+0x7a8>)
 800383a:	f7ff f84c 	bl	80028d6 <LL_ADC_SetCommonPathInternalCh>
 800383e:	e008      	b.n	8003852 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800385a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800385e:	4618      	mov	r0, r3
 8003860:	37d8      	adds	r7, #216	@ 0xd8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	80080000 	.word	0x80080000
 800386c:	50040300 	.word	0x50040300
 8003870:	c7520000 	.word	0xc7520000
 8003874:	50040000 	.word	0x50040000
 8003878:	20000008 	.word	0x20000008
 800387c:	053e2d63 	.word	0x053e2d63
 8003880:	cb840000 	.word	0xcb840000
 8003884:	80000001 	.word	0x80000001

08003888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f983 	bl	8002ba4 <LL_ADC_IsEnabled>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d169      	bne.n	8003978 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	4b36      	ldr	r3, [pc, #216]	@ (8003984 <ADC_Enable+0xfc>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e055      	b.n	800397a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f952 	bl	8002b7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038d8:	482b      	ldr	r0, [pc, #172]	@ (8003988 <ADC_Enable+0x100>)
 80038da:	f7ff f80f 	bl	80028fc <LL_ADC_GetCommonPathInternalCh>
 80038de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e8:	4b28      	ldr	r3, [pc, #160]	@ (800398c <ADC_Enable+0x104>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <ADC_Enable+0x108>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003902:	e002      	b.n	800390a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003910:	f7fe ff9e 	bl	8002850 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003916:	e028      	b.n	800396a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f941 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff f925 	bl	8002b7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003932:	f7fe ff8d 	bl	8002850 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d914      	bls.n	800396a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d00d      	beq.n	800396a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d1cf      	bne.n	8003918 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	8000003f 	.word	0x8000003f
 8003988:	50040300 	.word	0x50040300
 800398c:	20000008 	.word	0x20000008
 8003990:	053e2d63 	.word	0x053e2d63

08003994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c6:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	60d3      	str	r3, [r2, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <__NVIC_GetPriorityGrouping+0x18>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0307 	and.w	r3, r3, #7
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db0b      	blt.n	8003a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 021f 	and.w	r2, r3, #31
 8003a10:	4907      	ldr	r1, [pc, #28]	@ (8003a30 <__NVIC_EnableIRQ+0x38>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2001      	movs	r0, #1
 8003a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e100 	.word	0xe000e100

08003a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db0a      	blt.n	8003a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	490c      	ldr	r1, [pc, #48]	@ (8003a80 <__NVIC_SetPriority+0x4c>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a5c:	e00a      	b.n	8003a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4908      	ldr	r1, [pc, #32]	@ (8003a84 <__NVIC_SetPriority+0x50>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	761a      	strb	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000e100 	.word	0xe000e100
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	@ 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f1c3 0307 	rsb	r3, r3, #7
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	bf28      	it	cs
 8003aa6:	2304      	movcs	r3, #4
 8003aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d902      	bls.n	8003ab8 <NVIC_EncodePriority+0x30>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3b03      	subs	r3, #3
 8003ab6:	e000      	b.n	8003aba <NVIC_EncodePriority+0x32>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	401a      	ands	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae0:	4313      	orrs	r3, r2
         );
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	@ 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b00:	d301      	bcc.n	8003b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00f      	b.n	8003b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b06:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <SysTick_Config+0x40>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0e:	210f      	movs	r1, #15
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b14:	f7ff ff8e 	bl	8003a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <SysTick_Config+0x40>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1e:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <SysTick_Config+0x40>)
 8003b20:	2207      	movs	r2, #7
 8003b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	e000e010 	.word	0xe000e010

08003b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff29 	bl	8003994 <__NVIC_SetPriorityGrouping>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b5c:	f7ff ff3e 	bl	80039dc <__NVIC_GetPriorityGrouping>
 8003b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff ff8e 	bl	8003a88 <NVIC_EncodePriority>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff5d 	bl	8003a34 <__NVIC_SetPriority>
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff31 	bl	80039f8 <__NVIC_EnableIRQ>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff ffa2 	bl	8003af0 <SysTick_Config>
 8003bac:	4603      	mov	r3, r0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d008      	beq.n	8003be0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e022      	b.n	8003c26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 020e 	bic.w	r2, r2, #14
 8003bee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	f003 021c 	and.w	r2, r3, #28
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c12:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d005      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	e029      	b.n	8003caa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 020e 	bic.w	r2, r2, #14
 8003c64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f003 021c 	and.w	r2, r3, #28
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f202 	lsl.w	r2, r1, r2
 8003c88:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
    }
  }
  return status;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc2:	e148      	b.n	8003f56 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 813a 	beq.w	8003f50 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d005      	beq.n	8003cf4 <HAL_GPIO_Init+0x40>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d130      	bne.n	8003d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 0201 	and.w	r2, r3, #1
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d017      	beq.n	8003d92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d123      	bne.n	8003de6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	08da      	lsrs	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3208      	adds	r2, #8
 8003da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	220f      	movs	r2, #15
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	08da      	lsrs	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3208      	adds	r2, #8
 8003de0:	6939      	ldr	r1, [r7, #16]
 8003de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	2203      	movs	r2, #3
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0203 	and.w	r2, r3, #3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8094 	beq.w	8003f50 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e28:	4b52      	ldr	r3, [pc, #328]	@ (8003f74 <HAL_GPIO_Init+0x2c0>)
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2c:	4a51      	ldr	r2, [pc, #324]	@ (8003f74 <HAL_GPIO_Init+0x2c0>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e34:	4b4f      	ldr	r3, [pc, #316]	@ (8003f74 <HAL_GPIO_Init+0x2c0>)
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e40:	4a4d      	ldr	r2, [pc, #308]	@ (8003f78 <HAL_GPIO_Init+0x2c4>)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	3302      	adds	r3, #2
 8003e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	220f      	movs	r2, #15
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e6a:	d00d      	beq.n	8003e88 <HAL_GPIO_Init+0x1d4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a43      	ldr	r2, [pc, #268]	@ (8003f7c <HAL_GPIO_Init+0x2c8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <HAL_GPIO_Init+0x1d0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a42      	ldr	r2, [pc, #264]	@ (8003f80 <HAL_GPIO_Init+0x2cc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_GPIO_Init+0x1cc>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e004      	b.n	8003e8a <HAL_GPIO_Init+0x1d6>
 8003e80:	2307      	movs	r3, #7
 8003e82:	e002      	b.n	8003e8a <HAL_GPIO_Init+0x1d6>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_GPIO_Init+0x1d6>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	f002 0203 	and.w	r2, r2, #3
 8003e90:	0092      	lsls	r2, r2, #2
 8003e92:	4093      	lsls	r3, r2
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e9a:	4937      	ldr	r1, [pc, #220]	@ (8003f78 <HAL_GPIO_Init+0x2c4>)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ea8:	4b36      	ldr	r3, [pc, #216]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ef6:	4a23      	ldr	r2, [pc, #140]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f20:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f26:	4b17      	ldr	r3, [pc, #92]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f84 <HAL_GPIO_Init+0x2d0>)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3301      	adds	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f47f aeaf 	bne.w	8003cc4 <HAL_GPIO_Init+0x10>
  }
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	48000400 	.word	0x48000400
 8003f80:	48000800 	.word	0x48000800
 8003f84:	40010400 	.word	0x40010400

08003f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
 8003f94:	4613      	mov	r3, r2
 8003f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f98:	787b      	ldrb	r3, [r7, #1]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fa4:	e002      	b.n	8003fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e08d      	b.n	80040e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd fdb0 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	@ 0x24
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004008:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004018:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	e006      	b.n	8004040 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800403e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d108      	bne.n	800405a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	e007      	b.n	800406a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800407c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800408c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	461a      	mov	r2, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	460b      	mov	r3, r1
 8004104:	813b      	strh	r3, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	f040 80f9 	bne.w	800430a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_I2C_Mem_Write+0x34>
 800411e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004120:	2b00      	cmp	r3, #0
 8004122:	d105      	bne.n	8004130 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800412a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0ed      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_I2C_Mem_Write+0x4e>
 800413a:	2302      	movs	r3, #2
 800413c:	e0e6      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004146:	f7fe fb83 	bl	8002850 <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	2319      	movs	r3, #25
 8004152:	2201      	movs	r2, #1
 8004154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fac3 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0d1      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2221      	movs	r2, #33	@ 0x21
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2240      	movs	r2, #64	@ 0x40
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004190:	88f8      	ldrh	r0, [r7, #6]
 8004192:	893a      	ldrh	r2, [r7, #8]
 8004194:	8979      	ldrh	r1, [r7, #10]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4603      	mov	r3, r0
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f9d3 	bl	800454c <I2C_RequestMemoryWrite>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0a9      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2bff      	cmp	r3, #255	@ 0xff
 80041c0:	d90e      	bls.n	80041e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	22ff      	movs	r2, #255	@ 0xff
 80041c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	8979      	ldrh	r1, [r7, #10]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fc47 	bl	8004a6c <I2C_TransferConfig>
 80041de:	e00f      	b.n	8004200 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	8979      	ldrh	r1, [r7, #10]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fc36 	bl	8004a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fac6 	bl	8004796 <I2C_WaitOnTXISFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e07b      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d034      	beq.n	80042b8 <HAL_I2C_Mem_Write+0x1c8>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d130      	bne.n	80042b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425c:	2200      	movs	r2, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fa3f 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e04d      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2bff      	cmp	r3, #255	@ 0xff
 8004278:	d90e      	bls.n	8004298 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	22ff      	movs	r2, #255	@ 0xff
 800427e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	b2da      	uxtb	r2, r3
 8004286:	8979      	ldrh	r1, [r7, #10]
 8004288:	2300      	movs	r3, #0
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fbeb 	bl	8004a6c <I2C_TransferConfig>
 8004296:	e00f      	b.n	80042b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	8979      	ldrh	r1, [r7, #10]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fbda 	bl	8004a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d19e      	bne.n	8004200 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 faac 	bl	8004824 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e01a      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2220      	movs	r2, #32
 80042dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <HAL_I2C_Mem_Write+0x224>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	fe00e800 	.word	0xfe00e800

08004318 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	4603      	mov	r3, r0
 8004328:	817b      	strh	r3, [r7, #10]
 800432a:	460b      	mov	r3, r1
 800432c:	813b      	strh	r3, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b20      	cmp	r3, #32
 800433c:	f040 80fd 	bne.w	800453a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_I2C_Mem_Read+0x34>
 8004346:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0f1      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_I2C_Mem_Read+0x4e>
 8004362:	2302      	movs	r3, #2
 8004364:	e0ea      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800436e:	f7fe fa6f 	bl	8002850 <HAL_GetTick>
 8004372:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2319      	movs	r3, #25
 800437a:	2201      	movs	r2, #1
 800437c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f9af 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0d5      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2222      	movs	r2, #34	@ 0x22
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b8:	88f8      	ldrh	r0, [r7, #6]
 80043ba:	893a      	ldrh	r2, [r7, #8]
 80043bc:	8979      	ldrh	r1, [r7, #10]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	4603      	mov	r3, r0
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f913 	bl	80045f4 <I2C_RequestMemoryRead>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0ad      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2bff      	cmp	r3, #255	@ 0xff
 80043e8:	d90e      	bls.n	8004408 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	8979      	ldrh	r1, [r7, #10]
 80043f8:	4b52      	ldr	r3, [pc, #328]	@ (8004544 <HAL_I2C_Mem_Read+0x22c>)
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fb33 	bl	8004a6c <I2C_TransferConfig>
 8004406:	e00f      	b.n	8004428 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	b2da      	uxtb	r2, r3
 8004418:	8979      	ldrh	r1, [r7, #10]
 800441a:	4b4a      	ldr	r3, [pc, #296]	@ (8004544 <HAL_I2C_Mem_Read+0x22c>)
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fb22 	bl	8004a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	2200      	movs	r2, #0
 8004430:	2104      	movs	r1, #4
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f956 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07c      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d034      	beq.n	80044e8 <HAL_I2C_Mem_Read+0x1d0>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	d130      	bne.n	80044e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448c:	2200      	movs	r2, #0
 800448e:	2180      	movs	r1, #128	@ 0x80
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f927 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e04d      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2bff      	cmp	r3, #255	@ 0xff
 80044a8:	d90e      	bls.n	80044c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	8979      	ldrh	r1, [r7, #10]
 80044b8:	2300      	movs	r3, #0
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fad3 	bl	8004a6c <I2C_TransferConfig>
 80044c6:	e00f      	b.n	80044e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	8979      	ldrh	r1, [r7, #10]
 80044da:	2300      	movs	r3, #0
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fac2 	bl	8004a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d19a      	bne.n	8004428 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f994 	bl	8004824 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e01a      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2220      	movs	r2, #32
 800450c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6859      	ldr	r1, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_I2C_Mem_Read+0x230>)
 800451a:	400b      	ands	r3, r1
 800451c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e000      	b.n	800453c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	80002400 	.word	0x80002400
 8004548:	fe00e800 	.word	0xfe00e800

0800454c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	8979      	ldrh	r1, [r7, #10]
 800456c:	4b20      	ldr	r3, [pc, #128]	@ (80045f0 <I2C_RequestMemoryWrite+0xa4>)
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fa79 	bl	8004a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f909 	bl	8004796 <I2C_WaitOnTXISFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e02c      	b.n	80045e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	629a      	str	r2, [r3, #40]	@ 0x28
 800459e:	e015      	b.n	80045cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f8ef 	bl	8004796 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e012      	b.n	80045e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c2:	893b      	ldrh	r3, [r7, #8]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2200      	movs	r2, #0
 80045d4:	2180      	movs	r1, #128	@ 0x80
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f884 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	80002000 	.word	0x80002000

080045f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	461a      	mov	r2, r3
 8004602:	4603      	mov	r3, r0
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	460b      	mov	r3, r1
 8004608:	813b      	strh	r3, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	8979      	ldrh	r1, [r7, #10]
 8004614:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <I2C_RequestMemoryRead+0xa4>)
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	2300      	movs	r3, #0
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fa26 	bl	8004a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	69b9      	ldr	r1, [r7, #24]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f8b6 	bl	8004796 <I2C_WaitOnTXISFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e02c      	b.n	800468e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d105      	bne.n	8004646 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	629a      	str	r2, [r3, #40]	@ 0x28
 8004644:	e015      	b.n	8004672 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004646:	893b      	ldrh	r3, [r7, #8]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b29b      	uxth	r3, r3
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	69b9      	ldr	r1, [r7, #24]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f89c 	bl	8004796 <I2C_WaitOnTXISFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e012      	b.n	800468e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004668:	893b      	ldrh	r3, [r7, #8]
 800466a:	b2da      	uxtb	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	@ 0x40
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f831 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	80002000 	.word	0x80002000

0800469c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d103      	bne.n	80046ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d007      	beq.n	80046d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	619a      	str	r2, [r3, #24]
  }
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f4:	e03b      	b.n	800476e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8d6 	bl	80048ac <I2C_IsErrorOccurred>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e041      	b.n	800478e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004710:	d02d      	beq.n	800476e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe f89d 	bl	8002850 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d122      	bne.n	800476e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	429a      	cmp	r2, r3
 8004744:	d113      	bne.n	800476e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0220 	orr.w	r2, r3, #32
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e00f      	b.n	800478e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4013      	ands	r3, r2
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	429a      	cmp	r2, r3
 800478a:	d0b4      	beq.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047a2:	e033      	b.n	800480c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f87f 	bl	80048ac <I2C_IsErrorOccurred>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e031      	b.n	800481c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047be:	d025      	beq.n	800480c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7fe f846 	bl	8002850 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11a      	bne.n	800480c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d013      	beq.n	800480c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e007      	b.n	800481c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d1c4      	bne.n	80047a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004830:	e02f      	b.n	8004892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f838 	bl	80048ac <I2C_IsErrorOccurred>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e02d      	b.n	80048a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fe f803 	bl	8002850 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11a      	bne.n	8004892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b20      	cmp	r3, #32
 8004868:	d013      	beq.n	8004892 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e007      	b.n	80048a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b20      	cmp	r3, #32
 800489e:	d1c8      	bne.n	8004832 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	@ 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d068      	beq.n	80049aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2210      	movs	r2, #16
 80048de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048e0:	e049      	b.n	8004976 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e8:	d045      	beq.n	8004976 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	f7fd ffb1 	bl	8002850 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <I2C_IsErrorOccurred+0x54>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d13a      	bne.n	8004976 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800490a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004912:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800491e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004922:	d121      	bne.n	8004968 <I2C_IsErrorOccurred+0xbc>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492a:	d01d      	beq.n	8004968 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b20      	cmp	r3, #32
 8004930:	d01a      	beq.n	8004968 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004940:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004942:	f7fd ff85 	bl	8002850 <HAL_GetTick>
 8004946:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004948:	e00e      	b.n	8004968 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800494a:	f7fd ff81 	bl	8002850 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b19      	cmp	r3, #25
 8004956:	d907      	bls.n	8004968 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f043 0320 	orr.w	r3, r3, #32
 800495e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004966:	e006      	b.n	8004976 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d1e9      	bne.n	800494a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b20      	cmp	r3, #32
 8004982:	d003      	beq.n	800498c <I2C_IsErrorOccurred+0xe0>
 8004984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0aa      	beq.n	80048e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800498c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004990:	2b00      	cmp	r3, #0
 8004992:	d103      	bne.n	800499c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2220      	movs	r2, #32
 800499a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01c      	beq.n	8004a5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff fe3b 	bl	800469c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <I2C_IsErrorOccurred+0x1bc>)
 8004a32:	400b      	ands	r3, r1
 8004a34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	@ 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	fe00e800 	.word	0xfe00e800

08004a6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a84:	7a7b      	ldrb	r3, [r7, #9]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	0d5b      	lsrs	r3, r3, #21
 8004aa6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <I2C_TransferConfig+0x60>)
 8004aac:	430b      	orrs	r3, r1
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	ea02 0103 	and.w	r1, r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	03ff63ff 	.word	0x03ff63ff

08004ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d138      	bne.n	8004b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e032      	b.n	8004b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	@ 0x24
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e000      	b.n	8004b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
  }
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d139      	bne.n	8004bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e033      	b.n	8004bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2224      	movs	r2, #36	@ 0x24
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a04      	ldr	r2, [pc, #16]	@ (8004c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40007000 	.word	0x40007000

08004c20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c24:	4b04      	ldr	r3, [pc, #16]	@ (8004c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40007000 	.word	0x40007000

08004c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c4a:	d130      	bne.n	8004cae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c4c:	4b23      	ldr	r3, [pc, #140]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c58:	d038      	beq.n	8004ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c62:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2232      	movs	r2, #50	@ 0x32
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c80:	e002      	b.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c88:	4b14      	ldr	r3, [pc, #80]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c94:	d102      	bne.n	8004c9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f2      	bne.n	8004c82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca8:	d110      	bne.n	8004ccc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e00f      	b.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cba:	d007      	beq.n	8004ccc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cbc:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cc4:	4a05      	ldr	r2, [pc, #20]	@ (8004cdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	20000008 	.word	0x20000008
 8004ce4:	431bde83 	.word	0x431bde83

08004ce8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f000 bc02 	b.w	8005500 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfc:	4b96      	ldr	r3, [pc, #600]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d06:	4b94      	ldr	r3, [pc, #592]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80e4 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_RCC_OscConfig+0x4c>
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	f040 808b 	bne.w	8004e42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	f040 8087 	bne.w	8004e42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d34:	4b88      	ldr	r3, [pc, #544]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_OscConfig+0x64>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e3d9      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	4b81      	ldr	r3, [pc, #516]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_RCC_OscConfig+0x7e>
 8004d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d64:	e005      	b.n	8004d72 <HAL_RCC_OscConfig+0x8a>
 8004d66:	4b7c      	ldr	r3, [pc, #496]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d223      	bcs.n	8004dbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fd8c 	bl	8005898 <RCC_SetFlashLatencyFromMSIRange>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e3ba      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d8a:	4b73      	ldr	r3, [pc, #460]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a72      	ldr	r2, [pc, #456]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4b70      	ldr	r3, [pc, #448]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	496d      	ldr	r1, [pc, #436]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004da8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	4968      	ldr	r1, [pc, #416]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	e025      	b.n	8004e0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dbe:	4b66      	ldr	r3, [pc, #408]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a65      	ldr	r2, [pc, #404]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	f043 0308 	orr.w	r3, r3, #8
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b63      	ldr	r3, [pc, #396]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4960      	ldr	r1, [pc, #384]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	495b      	ldr	r1, [pc, #364]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fd4c 	bl	8005898 <RCC_SetFlashLatencyFromMSIRange>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e37a      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e0a:	f000 fc81 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b51      	ldr	r3, [pc, #324]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	4950      	ldr	r1, [pc, #320]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e1c:	5ccb      	ldrb	r3, [r1, r3]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	fa22 f303 	lsr.w	r3, r2, r3
 8004e26:	4a4e      	ldr	r2, [pc, #312]	@ (8004f60 <HAL_RCC_OscConfig+0x278>)
 8004e28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e2a:	4b4e      	ldr	r3, [pc, #312]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fd fcbe 	bl	80027b0 <HAL_InitTick>
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d052      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	e35e      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d032      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e4a:	4b43      	ldr	r3, [pc, #268]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a42      	ldr	r2, [pc, #264]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e56:	f7fd fcfb 	bl	8002850 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e5e:	f7fd fcf7 	bl	8002850 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e347      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e70:	4b39      	ldr	r3, [pc, #228]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e7c:	4b36      	ldr	r3, [pc, #216]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a35      	ldr	r2, [pc, #212]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e82:	f043 0308 	orr.w	r3, r3, #8
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b33      	ldr	r3, [pc, #204]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	4930      	ldr	r1, [pc, #192]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	492b      	ldr	r1, [pc, #172]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
 8004eae:	e01a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004eb0:	4b29      	ldr	r3, [pc, #164]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a28      	ldr	r2, [pc, #160]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ebc:	f7fd fcc8 	bl	8002850 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ec4:	f7fd fcc4 	bl	8002850 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e314      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x1dc>
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ee4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d073      	beq.n	8004fda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_OscConfig+0x21c>
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d10e      	bne.n	8004f1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d10b      	bne.n	8004f1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f04:	4b14      	ldr	r3, [pc, #80]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d063      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x2f0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d15f      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e2f1      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f24:	d106      	bne.n	8004f34 <HAL_RCC_OscConfig+0x24c>
 8004f26:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e025      	b.n	8004f80 <HAL_RCC_OscConfig+0x298>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f3c:	d114      	bne.n	8004f68 <HAL_RCC_OscConfig+0x280>
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a05      	ldr	r2, [pc, #20]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	4b03      	ldr	r3, [pc, #12]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a02      	ldr	r2, [pc, #8]	@ (8004f58 <HAL_RCC_OscConfig+0x270>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e013      	b.n	8004f80 <HAL_RCC_OscConfig+0x298>
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	0800c4cc 	.word	0x0800c4cc
 8004f60:	20000008 	.word	0x20000008
 8004f64:	20000010 	.word	0x20000010
 8004f68:	4ba0      	ldr	r3, [pc, #640]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a9f      	ldr	r2, [pc, #636]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8004f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	4b9d      	ldr	r3, [pc, #628]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a9c      	ldr	r2, [pc, #624]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8004f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d013      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fd fc62 	bl	8002850 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fd fc5e 	bl	8002850 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	@ 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e2ae      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa2:	4b92      	ldr	r3, [pc, #584]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x2a8>
 8004fae:	e014      	b.n	8004fda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fd fc4e 	bl	8002850 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7fd fc4a 	bl	8002850 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	@ 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e29a      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fca:	4b88      	ldr	r3, [pc, #544]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x2d0>
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d060      	beq.n	80050a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d005      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x310>
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b0c      	cmp	r3, #12
 8004ff0:	d119      	bne.n	8005026 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d116      	bne.n	8005026 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_RCC_OscConfig+0x328>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e277      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005010:	4b76      	ldr	r3, [pc, #472]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	4973      	ldr	r1, [pc, #460]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005020:	4313      	orrs	r3, r2
 8005022:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005024:	e040      	b.n	80050a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d023      	beq.n	8005076 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800502e:	4b6f      	ldr	r3, [pc, #444]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6e      	ldr	r2, [pc, #440]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fd fc09 	bl	8002850 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005042:	f7fd fc05 	bl	8002850 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e255      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005054:	4b65      	ldr	r3, [pc, #404]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	4b62      	ldr	r3, [pc, #392]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	495f      	ldr	r1, [pc, #380]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
 8005074:	e018      	b.n	80050a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005076:	4b5d      	ldr	r3, [pc, #372]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a5c      	ldr	r2, [pc, #368]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 800507c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fd fbe5 	bl	8002850 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508a:	f7fd fbe1 	bl	8002850 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e231      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800509c:	4b53      	ldr	r3, [pc, #332]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d03c      	beq.n	800512e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01c      	beq.n	80050f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050bc:	4b4b      	ldr	r3, [pc, #300]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80050be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c2:	4a4a      	ldr	r2, [pc, #296]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fd fbc0 	bl	8002850 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d4:	f7fd fbbc 	bl	8002850 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e20c      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050e6:	4b41      	ldr	r3, [pc, #260]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80050e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ef      	beq.n	80050d4 <HAL_RCC_OscConfig+0x3ec>
 80050f4:	e01b      	b.n	800512e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f6:	4b3d      	ldr	r3, [pc, #244]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80050f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050fc:	4a3b      	ldr	r2, [pc, #236]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005106:	f7fd fba3 	bl	8002850 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510e:	f7fd fb9f 	bl	8002850 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e1ef      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005120:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ef      	bne.n	800510e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80a6 	beq.w	8005288 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800513c:	2300      	movs	r3, #0
 800513e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005140:	4b2a      	ldr	r3, [pc, #168]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10d      	bne.n	8005168 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800514c:	4b27      	ldr	r3, [pc, #156]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	4a26      	ldr	r2, [pc, #152]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005156:	6593      	str	r3, [r2, #88]	@ 0x58
 8005158:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005164:	2301      	movs	r3, #1
 8005166:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005168:	4b21      	ldr	r3, [pc, #132]	@ (80051f0 <HAL_RCC_OscConfig+0x508>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d118      	bne.n	80051a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005174:	4b1e      	ldr	r3, [pc, #120]	@ (80051f0 <HAL_RCC_OscConfig+0x508>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1d      	ldr	r2, [pc, #116]	@ (80051f0 <HAL_RCC_OscConfig+0x508>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005180:	f7fd fb66 	bl	8002850 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005188:	f7fd fb62 	bl	8002850 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e1b2      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800519a:	4b15      	ldr	r3, [pc, #84]	@ (80051f0 <HAL_RCC_OscConfig+0x508>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d108      	bne.n	80051c0 <HAL_RCC_OscConfig+0x4d8>
 80051ae:	4b0f      	ldr	r3, [pc, #60]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b4:	4a0d      	ldr	r2, [pc, #52]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051be:	e029      	b.n	8005214 <HAL_RCC_OscConfig+0x52c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d115      	bne.n	80051f4 <HAL_RCC_OscConfig+0x50c>
 80051c8:	4b08      	ldr	r3, [pc, #32]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	4a07      	ldr	r2, [pc, #28]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80051d0:	f043 0304 	orr.w	r3, r3, #4
 80051d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051d8:	4b04      	ldr	r3, [pc, #16]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051de:	4a03      	ldr	r2, [pc, #12]	@ (80051ec <HAL_RCC_OscConfig+0x504>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051e8:	e014      	b.n	8005214 <HAL_RCC_OscConfig+0x52c>
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
 80051f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fa:	4a99      	ldr	r2, [pc, #612]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005204:	4b96      	ldr	r3, [pc, #600]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	4a95      	ldr	r2, [pc, #596]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800520c:	f023 0304 	bic.w	r3, r3, #4
 8005210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d016      	beq.n	800524a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fd fb18 	bl	8002850 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	e00a      	b.n	800523a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fd fb14 	bl	8002850 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e162      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523a:	4b89      	ldr	r3, [pc, #548]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ed      	beq.n	8005224 <HAL_RCC_OscConfig+0x53c>
 8005248:	e015      	b.n	8005276 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524a:	f7fd fb01 	bl	8002850 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005250:	e00a      	b.n	8005268 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7fd fafd 	bl	8002850 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e14b      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005268:	4b7d      	ldr	r3, [pc, #500]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1ed      	bne.n	8005252 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005276:	7ffb      	ldrb	r3, [r7, #31]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d105      	bne.n	8005288 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527c:	4b78      	ldr	r3, [pc, #480]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800527e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005280:	4a77      	ldr	r2, [pc, #476]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005286:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d03c      	beq.n	800530e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01c      	beq.n	80052d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800529c:	4b70      	ldr	r3, [pc, #448]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800529e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fd fad0 	bl	8002850 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052b4:	f7fd facc 	bl	8002850 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e11c      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052c6:	4b66      	ldr	r3, [pc, #408]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80052c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ef      	beq.n	80052b4 <HAL_RCC_OscConfig+0x5cc>
 80052d4:	e01b      	b.n	800530e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052d6:	4b62      	ldr	r3, [pc, #392]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80052d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052dc:	4a60      	ldr	r2, [pc, #384]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e6:	f7fd fab3 	bl	8002850 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052ee:	f7fd faaf 	bl	8002850 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e0ff      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005300:	4b57      	ldr	r3, [pc, #348]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ef      	bne.n	80052ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 80f3 	beq.w	80054fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	2b02      	cmp	r3, #2
 800531e:	f040 80c9 	bne.w	80054b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005322:	4b4f      	ldr	r3, [pc, #316]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f003 0203 	and.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	429a      	cmp	r2, r3
 8005334:	d12c      	bne.n	8005390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005340:	3b01      	subs	r3, #1
 8005342:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d123      	bne.n	8005390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005352:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d11b      	bne.n	8005390 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005362:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d113      	bne.n	8005390 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	3b01      	subs	r3, #1
 8005376:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d109      	bne.n	8005390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	3b01      	subs	r3, #1
 800538a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d06b      	beq.n	8005468 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d062      	beq.n	800545c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005396:	4b32      	ldr	r3, [pc, #200]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e0ac      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80053ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053b2:	f7fd fa4d 	bl	8002850 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ba:	f7fd fa49 	bl	8002850 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e099      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053cc:	4b24      	ldr	r3, [pc, #144]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f0      	bne.n	80053ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d8:	4b21      	ldr	r3, [pc, #132]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	4b21      	ldr	r3, [pc, #132]	@ (8005464 <HAL_RCC_OscConfig+0x77c>)
 80053de:	4013      	ands	r3, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053e8:	3a01      	subs	r2, #1
 80053ea:	0112      	lsls	r2, r2, #4
 80053ec:	4311      	orrs	r1, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053f2:	0212      	lsls	r2, r2, #8
 80053f4:	4311      	orrs	r1, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053fa:	0852      	lsrs	r2, r2, #1
 80053fc:	3a01      	subs	r2, #1
 80053fe:	0552      	lsls	r2, r2, #21
 8005400:	4311      	orrs	r1, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005406:	0852      	lsrs	r2, r2, #1
 8005408:	3a01      	subs	r2, #1
 800540a:	0652      	lsls	r2, r2, #25
 800540c:	4311      	orrs	r1, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005412:	06d2      	lsls	r2, r2, #27
 8005414:	430a      	orrs	r2, r1
 8005416:	4912      	ldr	r1, [pc, #72]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005418:	4313      	orrs	r3, r2
 800541a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800541c:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0f      	ldr	r2, [pc, #60]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005428:	4b0d      	ldr	r3, [pc, #52]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a0c      	ldr	r2, [pc, #48]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 800542e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005434:	f7fd fa0c 	bl	8002850 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543c:	f7fd fa08 	bl	8002850 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e058      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544e:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <HAL_RCC_OscConfig+0x778>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800545a:	e050      	b.n	80054fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04f      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
 8005460:	40021000 	.word	0x40021000
 8005464:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005468:	4b27      	ldr	r3, [pc, #156]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d144      	bne.n	80054fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005474:	4b24      	ldr	r3, [pc, #144]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a23      	ldr	r2, [pc, #140]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 800547a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800547e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005480:	4b21      	ldr	r3, [pc, #132]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a20      	ldr	r2, [pc, #128]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 8005486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800548a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800548c:	f7fd f9e0 	bl	8002850 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fd f9dc 	bl	8002850 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e02c      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a6:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x7ac>
 80054b2:	e024      	b.n	80054fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d01f      	beq.n	80054fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b13      	ldr	r3, [pc, #76]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a12      	ldr	r2, [pc, #72]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 80054c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fd f9c3 	bl	8002850 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fd f9bf 	bl	8002850 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e00f      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e0:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80054ec:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	4905      	ldr	r1, [pc, #20]	@ (8005508 <HAL_RCC_OscConfig+0x820>)
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_RCC_OscConfig+0x824>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	60cb      	str	r3, [r1, #12]
 80054f8:	e001      	b.n	80054fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000
 800550c:	feeefffc 	.word	0xfeeefffc

08005510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0e7      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005524:	4b75      	ldr	r3, [pc, #468]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d910      	bls.n	8005554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b72      	ldr	r3, [pc, #456]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 0207 	bic.w	r2, r3, #7
 800553a:	4970      	ldr	r1, [pc, #448]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b6e      	ldr	r3, [pc, #440]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0cf      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	4b66      	ldr	r3, [pc, #408]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800556c:	429a      	cmp	r2, r3
 800556e:	d908      	bls.n	8005582 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005570:	4b63      	ldr	r3, [pc, #396]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4960      	ldr	r1, [pc, #384]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 800557e:	4313      	orrs	r3, r2
 8005580:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d04c      	beq.n	8005628 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b03      	cmp	r3, #3
 8005594:	d107      	bne.n	80055a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005596:	4b5a      	ldr	r3, [pc, #360]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d121      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0a6      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d107      	bne.n	80055be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ae:	4b54      	ldr	r3, [pc, #336]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d115      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e09a      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e08e      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e086      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4b46      	ldr	r3, [pc, #280]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 0203 	bic.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4943      	ldr	r1, [pc, #268]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f8:	f7fd f92a 	bl	8002850 <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fd f926 	bl	8002850 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e06e      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b3a      	ldr	r3, [pc, #232]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 020c 	and.w	r2, r3, #12
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	429a      	cmp	r2, r3
 8005626:	d1eb      	bne.n	8005600 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d010      	beq.n	8005656 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	4b31      	ldr	r3, [pc, #196]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005640:	429a      	cmp	r2, r3
 8005642:	d208      	bcs.n	8005656 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005644:	4b2e      	ldr	r3, [pc, #184]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	492b      	ldr	r1, [pc, #172]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005656:	4b29      	ldr	r3, [pc, #164]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d210      	bcs.n	8005686 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005664:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 0207 	bic.w	r2, r3, #7
 800566c:	4923      	ldr	r1, [pc, #140]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005674:	4b21      	ldr	r3, [pc, #132]	@ (80056fc <HAL_RCC_ClockConfig+0x1ec>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d001      	beq.n	8005686 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e036      	b.n	80056f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d008      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005692:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	4918      	ldr	r1, [pc, #96]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b0:	4b13      	ldr	r3, [pc, #76]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4910      	ldr	r1, [pc, #64]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056c4:	f000 f824 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005700 <HAL_RCC_ClockConfig+0x1f0>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	490b      	ldr	r1, [pc, #44]	@ (8005704 <HAL_RCC_ClockConfig+0x1f4>)
 80056d6:	5ccb      	ldrb	r3, [r1, r3]
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	4a09      	ldr	r2, [pc, #36]	@ (8005708 <HAL_RCC_ClockConfig+0x1f8>)
 80056e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056e4:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_RCC_ClockConfig+0x1fc>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fd f861 	bl	80027b0 <HAL_InitTick>
 80056ee:	4603      	mov	r3, r0
 80056f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80056f2:	7afb      	ldrb	r3, [r7, #11]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40022000 	.word	0x40022000
 8005700:	40021000 	.word	0x40021000
 8005704:	0800c4cc 	.word	0x0800c4cc
 8005708:	20000008 	.word	0x20000008
 800570c:	20000010 	.word	0x20000010

08005710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	@ 0x24
 8005714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571e:	4b3e      	ldr	r3, [pc, #248]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d121      	bne.n	8005782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d11e      	bne.n	8005782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005744:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005750:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	e005      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005760:	4b2d      	ldr	r3, [pc, #180]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800576c:	4a2b      	ldr	r2, [pc, #172]	@ (800581c <HAL_RCC_GetSysClockFreq+0x10c>)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d102      	bne.n	800578e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005788:	4b25      	ldr	r3, [pc, #148]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x110>)
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e004      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d101      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005794:	4b23      	ldr	r3, [pc, #140]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x114>)
 8005796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d134      	bne.n	8005808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800579e:	4b1e      	ldr	r3, [pc, #120]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d003      	beq.n	80057b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d003      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0xac>
 80057b4:	e005      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x110>)
 80057b8:	617b      	str	r3, [r7, #20]
      break;
 80057ba:	e005      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057bc:	4b19      	ldr	r3, [pc, #100]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x114>)
 80057be:	617b      	str	r3, [r7, #20]
      break;
 80057c0:	e002      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	617b      	str	r3, [r7, #20]
      break;
 80057c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c8:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	3301      	adds	r3, #1
 80057d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057d6:	4b10      	ldr	r3, [pc, #64]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	fb03 f202 	mul.w	r2, r3, r2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	0e5b      	lsrs	r3, r3, #25
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	3301      	adds	r3, #1
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005808:	69bb      	ldr	r3, [r7, #24]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3724      	adds	r7, #36	@ 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	0800c4e4 	.word	0x0800c4e4
 8005820:	00f42400 	.word	0x00f42400
 8005824:	007a1200 	.word	0x007a1200

08005828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800582c:	4b03      	ldr	r3, [pc, #12]	@ (800583c <HAL_RCC_GetHCLKFreq+0x14>)
 800582e:	681b      	ldr	r3, [r3, #0]
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20000008 	.word	0x20000008

08005840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005844:	f7ff fff0 	bl	8005828 <HAL_RCC_GetHCLKFreq>
 8005848:	4602      	mov	r2, r0
 800584a:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	4904      	ldr	r1, [pc, #16]	@ (8005868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005856:	5ccb      	ldrb	r3, [r1, r3]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40021000 	.word	0x40021000
 8005868:	0800c4dc 	.word	0x0800c4dc

0800586c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005870:	f7ff ffda 	bl	8005828 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0adb      	lsrs	r3, r3, #11
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4904      	ldr	r1, [pc, #16]	@ (8005894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000
 8005894:	0800c4dc 	.word	0x0800c4dc

08005898 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058a0:	2300      	movs	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058b0:	f7ff f9b6 	bl	8004c20 <HAL_PWREx_GetVoltageRange>
 80058b4:	6178      	str	r0, [r7, #20]
 80058b6:	e014      	b.n	80058e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058b8:	4b25      	ldr	r3, [pc, #148]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	4a24      	ldr	r2, [pc, #144]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c4:	4b22      	ldr	r3, [pc, #136]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058d0:	f7ff f9a6 	bl	8004c20 <HAL_PWREx_GetVoltageRange>
 80058d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058da:	4a1d      	ldr	r2, [pc, #116]	@ (8005950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e8:	d10b      	bne.n	8005902 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b80      	cmp	r3, #128	@ 0x80
 80058ee:	d919      	bls.n	8005924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80058f4:	d902      	bls.n	80058fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058f6:	2302      	movs	r3, #2
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	e013      	b.n	8005924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058fc:	2301      	movs	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	e010      	b.n	8005924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b80      	cmp	r3, #128	@ 0x80
 8005906:	d902      	bls.n	800590e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005908:	2303      	movs	r3, #3
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	e00a      	b.n	8005924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b80      	cmp	r3, #128	@ 0x80
 8005912:	d102      	bne.n	800591a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005914:	2302      	movs	r3, #2
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	e004      	b.n	8005924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b70      	cmp	r3, #112	@ 0x70
 800591e:	d101      	bne.n	8005924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005920:	2301      	movs	r3, #1
 8005922:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005924:	4b0b      	ldr	r3, [pc, #44]	@ (8005954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f023 0207 	bic.w	r2, r3, #7
 800592c:	4909      	ldr	r1, [pc, #36]	@ (8005954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005934:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000
 8005954:	40022000 	.word	0x40022000

08005958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005960:	2300      	movs	r3, #0
 8005962:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005964:	2300      	movs	r3, #0
 8005966:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005970:	2b00      	cmp	r3, #0
 8005972:	d031      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005978:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800597c:	d01a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800597e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005982:	d814      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005988:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800598c:	d10f      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800598e:	4b5d      	ldr	r3, [pc, #372]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	4a5c      	ldr	r2, [pc, #368]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005998:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800599a:	e00c      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	2100      	movs	r1, #0
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f9de 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059ac:	e003      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	74fb      	strb	r3, [r7, #19]
      break;
 80059b2:	e000      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80059b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b6:	7cfb      	ldrb	r3, [r7, #19]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059bc:	4b51      	ldr	r3, [pc, #324]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	494e      	ldr	r1, [pc, #312]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80059d2:	e001      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	7cfb      	ldrb	r3, [r7, #19]
 80059d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 809e 	beq.w	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059ea:	4b46      	ldr	r3, [pc, #280]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00d      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a00:	4b40      	ldr	r3, [pc, #256]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a04:	4a3f      	ldr	r2, [pc, #252]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a39      	ldr	r2, [pc, #228]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a28:	f7fc ff12 	bl	8002850 <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a2e:	e009      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a30:	f7fc ff0e 	bl	8002850 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d902      	bls.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	74fb      	strb	r3, [r7, #19]
        break;
 8005a42:	e005      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a44:	4b30      	ldr	r3, [pc, #192]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ef      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d15a      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a56:	4b2b      	ldr	r3, [pc, #172]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01e      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d019      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a72:	4b24      	ldr	r3, [pc, #144]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a7e:	4b21      	ldr	r3, [pc, #132]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a84:	4a1f      	ldr	r2, [pc, #124]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a94:	4a1b      	ldr	r2, [pc, #108]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a9e:	4a19      	ldr	r2, [pc, #100]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d016      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fc fece 	bl	8002850 <HAL_GetTick>
 8005ab4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fc feca 	bl	8002850 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d902      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	74fb      	strb	r3, [r7, #19]
            break;
 8005ace:	e006      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0ec      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005ade:	7cfb      	ldrb	r3, [r7, #19]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae4:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af2:	4904      	ldr	r1, [pc, #16]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005afa:	e009      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005afc:	7cfb      	ldrb	r3, [r7, #19]
 8005afe:	74bb      	strb	r3, [r7, #18]
 8005b00:	e006      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b10:	7c7b      	ldrb	r3, [r7, #17]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b16:	4b8a      	ldr	r3, [pc, #552]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1a:	4a89      	ldr	r2, [pc, #548]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b2e:	4b84      	ldr	r3, [pc, #528]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b34:	f023 0203 	bic.w	r2, r3, #3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	4980      	ldr	r1, [pc, #512]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b50:	4b7b      	ldr	r3, [pc, #492]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b56:	f023 020c 	bic.w	r2, r3, #12
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	4978      	ldr	r1, [pc, #480]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b72:	4b73      	ldr	r3, [pc, #460]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	496f      	ldr	r1, [pc, #444]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b94:	4b6a      	ldr	r3, [pc, #424]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	4967      	ldr	r1, [pc, #412]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bb6:	4b62      	ldr	r3, [pc, #392]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	495e      	ldr	r1, [pc, #376]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bd8:	4b59      	ldr	r3, [pc, #356]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	4956      	ldr	r1, [pc, #344]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bfa:	4b51      	ldr	r3, [pc, #324]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	494d      	ldr	r1, [pc, #308]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d028      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c1c:	4b48      	ldr	r3, [pc, #288]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2a:	4945      	ldr	r1, [pc, #276]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3a:	d106      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c3c:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a3f      	ldr	r2, [pc, #252]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c46:	60d3      	str	r3, [r2, #12]
 8005c48:	e011      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c52:	d10c      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f882 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d028      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c7a:	4b31      	ldr	r3, [pc, #196]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c88:	492d      	ldr	r1, [pc, #180]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c98:	d106      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c9a:	4b29      	ldr	r3, [pc, #164]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	4a28      	ldr	r2, [pc, #160]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ca0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca4:	60d3      	str	r3, [r2, #12]
 8005ca6:	e011      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f853 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01c      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cd8:	4b19      	ldr	r3, [pc, #100]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce6:	4916      	ldr	r1, [pc, #88]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cf6:	d10c      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f830 	bl	8005d64 <RCCEx_PLLSAI1_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d1e:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d24:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d2c:	4904      	ldr	r1, [pc, #16]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d34:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000

08005d44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005d48:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a04      	ldr	r2, [pc, #16]	@ (8005d60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d4e:	f043 0304 	orr.w	r3, r3, #4
 8005d52:	6013      	str	r3, [r2, #0]
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000

08005d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d72:	4b74      	ldr	r3, [pc, #464]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d018      	beq.n	8005db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d7e:	4b71      	ldr	r3, [pc, #452]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0203 	and.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d10d      	bne.n	8005daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
       ||
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d96:	4b6b      	ldr	r3, [pc, #428]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
       ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d047      	beq.n	8005e3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	e044      	b.n	8005e3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d018      	beq.n	8005dea <RCCEx_PLLSAI1_Config+0x86>
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d825      	bhi.n	8005e08 <RCCEx_PLLSAI1_Config+0xa4>
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d002      	beq.n	8005dc6 <RCCEx_PLLSAI1_Config+0x62>
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d009      	beq.n	8005dd8 <RCCEx_PLLSAI1_Config+0x74>
 8005dc4:	e020      	b.n	8005e08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d11d      	bne.n	8005e0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dd6:	e01a      	b.n	8005e0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de8:	e013      	b.n	8005e12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dea:	4b56      	ldr	r3, [pc, #344]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10f      	bne.n	8005e16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005df6:	4b53      	ldr	r3, [pc, #332]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e06:	e006      	b.n	8005e16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e004      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e0e:	bf00      	nop
 8005e10:	e002      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e12:	bf00      	nop
 8005e14:	e000      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10d      	bne.n	8005e3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e1e:	4b49      	ldr	r3, [pc, #292]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	430b      	orrs	r3, r1
 8005e34:	4943      	ldr	r1, [pc, #268]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d17c      	bne.n	8005f3a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e40:	4b40      	ldr	r3, [pc, #256]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3f      	ldr	r2, [pc, #252]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fc fd00 	bl	8002850 <HAL_GetTick>
 8005e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e52:	e009      	b.n	8005e68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e54:	f7fc fcfc 	bl	8002850 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d902      	bls.n	8005e68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	73fb      	strb	r3, [r7, #15]
        break;
 8005e66:	e005      	b.n	8005e74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e68:	4b36      	ldr	r3, [pc, #216]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ef      	bne.n	8005e54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d15f      	bne.n	8005f3a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d110      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e80:	4b30      	ldr	r3, [pc, #192]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005e88:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6892      	ldr	r2, [r2, #8]
 8005e90:	0211      	lsls	r1, r2, #8
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68d2      	ldr	r2, [r2, #12]
 8005e96:	06d2      	lsls	r2, r2, #27
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	492a      	ldr	r1, [pc, #168]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]
 8005ea0:	e027      	b.n	8005ef2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d112      	bne.n	8005ece <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ea8:	4b26      	ldr	r3, [pc, #152]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005eb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6892      	ldr	r2, [r2, #8]
 8005eb8:	0211      	lsls	r1, r2, #8
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6912      	ldr	r2, [r2, #16]
 8005ebe:	0852      	lsrs	r2, r2, #1
 8005ec0:	3a01      	subs	r2, #1
 8005ec2:	0552      	lsls	r2, r2, #21
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	491f      	ldr	r1, [pc, #124]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	610b      	str	r3, [r1, #16]
 8005ecc:	e011      	b.n	8005ef2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ece:	4b1d      	ldr	r3, [pc, #116]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ed6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6892      	ldr	r2, [r2, #8]
 8005ede:	0211      	lsls	r1, r2, #8
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6952      	ldr	r2, [r2, #20]
 8005ee4:	0852      	lsrs	r2, r2, #1
 8005ee6:	3a01      	subs	r2, #1
 8005ee8:	0652      	lsls	r2, r2, #25
 8005eea:	430a      	orrs	r2, r1
 8005eec:	4915      	ldr	r1, [pc, #84]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ef2:	4b14      	ldr	r3, [pc, #80]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a13      	ldr	r2, [pc, #76]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005efc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efe:	f7fc fca7 	bl	8002850 <HAL_GetTick>
 8005f02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f04:	e009      	b.n	8005f1a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f06:	f7fc fca3 	bl	8002850 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d902      	bls.n	8005f1a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	73fb      	strb	r3, [r7, #15]
          break;
 8005f18:	e005      	b.n	8005f26 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0ef      	beq.n	8005f06 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f2c:	4b05      	ldr	r3, [pc, #20]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	4903      	ldr	r1, [pc, #12]	@ (8005f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40021000 	.word	0x40021000

08005f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e049      	b.n	8005fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fc f954 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f000 fb5e 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d001      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e03b      	b.n	8006088 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a19      	ldr	r2, [pc, #100]	@ (8006094 <HAL_TIM_Base_Start_IT+0x9c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x4e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603a:	d004      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x4e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a15      	ldr	r2, [pc, #84]	@ (8006098 <HAL_TIM_Base_Start_IT+0xa0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d115      	bne.n	8006072 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	4b13      	ldr	r3, [pc, #76]	@ (800609c <HAL_TIM_Base_Start_IT+0xa4>)
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b06      	cmp	r3, #6
 8006056:	d015      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x8c>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605e:	d011      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006070:	e008      	b.n	8006084 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e000      	b.n	8006086 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40014000 	.word	0x40014000
 800609c:	00010007 	.word	0x00010007

080060a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e049      	b.n	8006146 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f841 	bl	800614e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f000 fab2 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01b      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f06f 0202 	mvn.w	r2, #2
 8006196:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fa2c 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 80061b2:	e005      	b.n	80061c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fa1e 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa2f 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d020      	beq.n	8006212 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01b      	beq.n	8006212 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f06f 0204 	mvn.w	r2, #4
 80061e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa06 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 80061fe:	e005      	b.n	800620c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f9f8 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa09 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d020      	beq.n	800625e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01b      	beq.n	800625e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f06f 0208 	mvn.w	r2, #8
 800622e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2204      	movs	r2, #4
 8006234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f9e0 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 800624a:	e005      	b.n	8006258 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9d2 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f9e3 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d020      	beq.n	80062aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01b      	beq.n	80062aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f06f 0210 	mvn.w	r2, #16
 800627a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2208      	movs	r2, #8
 8006280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f9ba 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 8006296:	e005      	b.n	80062a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f9ac 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9bd 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00c      	beq.n	80062ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f06f 0201 	mvn.w	r2, #1
 80062c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fb ffff 	bl	80022cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fd9e 	bl	8006e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00c      	beq.n	8006320 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fd96 	bl	8006e4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f977 	bl	8006632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00c      	beq.n	8006368 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0220 	mvn.w	r2, #32
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fd5e 	bl	8006e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_TIM_OC_ConfigChannel+0x1e>
 800638a:	2302      	movs	r3, #2
 800638c:	e066      	b.n	800645c <HAL_TIM_OC_ConfigChannel+0xec>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b14      	cmp	r3, #20
 800639a:	d857      	bhi.n	800644c <HAL_TIM_OC_ConfigChannel+0xdc>
 800639c:	a201      	add	r2, pc, #4	@ (adr r2, 80063a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063f9 	.word	0x080063f9
 80063a8:	0800644d 	.word	0x0800644d
 80063ac:	0800644d 	.word	0x0800644d
 80063b0:	0800644d 	.word	0x0800644d
 80063b4:	08006407 	.word	0x08006407
 80063b8:	0800644d 	.word	0x0800644d
 80063bc:	0800644d 	.word	0x0800644d
 80063c0:	0800644d 	.word	0x0800644d
 80063c4:	08006415 	.word	0x08006415
 80063c8:	0800644d 	.word	0x0800644d
 80063cc:	0800644d 	.word	0x0800644d
 80063d0:	0800644d 	.word	0x0800644d
 80063d4:	08006423 	.word	0x08006423
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	0800644d 	.word	0x0800644d
 80063e0:	0800644d 	.word	0x0800644d
 80063e4:	08006431 	.word	0x08006431
 80063e8:	0800644d 	.word	0x0800644d
 80063ec:	0800644d 	.word	0x0800644d
 80063f0:	0800644d 	.word	0x0800644d
 80063f4:	0800643f 	.word	0x0800643f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f992 	bl	8006728 <TIM_OC1_SetConfig>
      break;
 8006404:	e025      	b.n	8006452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fa07 	bl	8006820 <TIM_OC2_SetConfig>
      break;
 8006412:	e01e      	b.n	8006452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fa7a 	bl	8006914 <TIM_OC3_SetConfig>
      break;
 8006420:	e017      	b.n	8006452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	4618      	mov	r0, r3
 800642a:	f000 faeb 	bl	8006a04 <TIM_OC4_SetConfig>
      break;
 800642e:	e010      	b.n	8006452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fb42 	bl	8006ac0 <TIM_OC5_SetConfig>
      break;
 800643c:	e009      	b.n	8006452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fb93 	bl	8006b70 <TIM_OC6_SetConfig>
      break;
 800644a:	e002      	b.n	8006452 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
      break;
 8006450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIM_ConfigClockSource+0x1c>
 800647c:	2302      	movs	r3, #2
 800647e:	e0b6      	b.n	80065ee <HAL_TIM_ConfigClockSource+0x18a>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800649e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064bc:	d03e      	beq.n	800653c <HAL_TIM_ConfigClockSource+0xd8>
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c2:	f200 8087 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ca:	f000 8086 	beq.w	80065da <HAL_TIM_ConfigClockSource+0x176>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d2:	d87f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 80064d4:	2b70      	cmp	r3, #112	@ 0x70
 80064d6:	d01a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xaa>
 80064d8:	2b70      	cmp	r3, #112	@ 0x70
 80064da:	d87b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 80064dc:	2b60      	cmp	r3, #96	@ 0x60
 80064de:	d050      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x11e>
 80064e0:	2b60      	cmp	r3, #96	@ 0x60
 80064e2:	d877      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 80064e4:	2b50      	cmp	r3, #80	@ 0x50
 80064e6:	d03c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0xfe>
 80064e8:	2b50      	cmp	r3, #80	@ 0x50
 80064ea:	d873      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d058      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x13e>
 80064f0:	2b40      	cmp	r3, #64	@ 0x40
 80064f2:	d86f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 80064f4:	2b30      	cmp	r3, #48	@ 0x30
 80064f6:	d064      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15e>
 80064f8:	2b30      	cmp	r3, #48	@ 0x30
 80064fa:	d86b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d060      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15e>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d867      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15e>
 8006508:	2b10      	cmp	r3, #16
 800650a:	d05a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15e>
 800650c:	e062      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800651e:	f000 fbfb 	bl	8006d18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	609a      	str	r2, [r3, #8]
      break;
 800653a:	e04f      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800654c:	f000 fbe4 	bl	8006d18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800655e:	609a      	str	r2, [r3, #8]
      break;
 8006560:	e03c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fb58 	bl	8006c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2150      	movs	r1, #80	@ 0x50
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fbb1 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 8006580:	e02c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fb77 	bl	8006c82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2160      	movs	r1, #96	@ 0x60
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fba1 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 80065a0:	e01c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 fb38 	bl	8006c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2140      	movs	r1, #64	@ 0x40
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fb91 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e00c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 fb88 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 80065d2:	e003      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e000      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80065da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a30      	ldr	r2, [pc, #192]	@ (800671c <TIM_Base_SetConfig+0xd4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_Base_SetConfig+0x20>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006666:	d108      	bne.n	800667a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a27      	ldr	r2, [pc, #156]	@ (800671c <TIM_Base_SetConfig+0xd4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00b      	beq.n	800669a <TIM_Base_SetConfig+0x52>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006688:	d007      	beq.n	800669a <TIM_Base_SetConfig+0x52>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a24      	ldr	r2, [pc, #144]	@ (8006720 <TIM_Base_SetConfig+0xd8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_Base_SetConfig+0x52>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a23      	ldr	r2, [pc, #140]	@ (8006724 <TIM_Base_SetConfig+0xdc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d108      	bne.n	80066ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a12      	ldr	r2, [pc, #72]	@ (800671c <TIM_Base_SetConfig+0xd4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_Base_SetConfig+0xa0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a11      	ldr	r2, [pc, #68]	@ (8006720 <TIM_Base_SetConfig+0xd8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0xa0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <TIM_Base_SetConfig+0xdc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d103      	bne.n	80066f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d105      	bne.n	800670e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	611a      	str	r2, [r3, #16]
  }
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400

08006728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	f023 0201 	bic.w	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0302 	bic.w	r3, r3, #2
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a24      	ldr	r2, [pc, #144]	@ (8006814 <TIM_OC1_SetConfig+0xec>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC1_SetConfig+0x70>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a23      	ldr	r2, [pc, #140]	@ (8006818 <TIM_OC1_SetConfig+0xf0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC1_SetConfig+0x70>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a22      	ldr	r2, [pc, #136]	@ (800681c <TIM_OC1_SetConfig+0xf4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10c      	bne.n	80067b2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0308 	bic.w	r3, r3, #8
 800679e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a17      	ldr	r2, [pc, #92]	@ (8006814 <TIM_OC1_SetConfig+0xec>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_OC1_SetConfig+0xa2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a16      	ldr	r2, [pc, #88]	@ (8006818 <TIM_OC1_SetConfig+0xf0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC1_SetConfig+0xa2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a15      	ldr	r2, [pc, #84]	@ (800681c <TIM_OC1_SetConfig+0xf4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d111      	bne.n	80067ee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	621a      	str	r2, [r3, #32]
}
 8006808:	bf00      	nop
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40014000 	.word	0x40014000
 800681c:	40014400 	.word	0x40014400

08006820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f023 0210 	bic.w	r2, r3, #16
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f023 0320 	bic.w	r3, r3, #32
 800686e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a22      	ldr	r2, [pc, #136]	@ (8006908 <TIM_OC2_SetConfig+0xe8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10d      	bne.n	80068a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800688a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800689e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a19      	ldr	r2, [pc, #100]	@ (8006908 <TIM_OC2_SetConfig+0xe8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC2_SetConfig+0x98>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a18      	ldr	r2, [pc, #96]	@ (800690c <TIM_OC2_SetConfig+0xec>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC2_SetConfig+0x98>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a17      	ldr	r2, [pc, #92]	@ (8006910 <TIM_OC2_SetConfig+0xf0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d113      	bne.n	80068e0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40014000 	.word	0x40014000
 8006910:	40014400 	.word	0x40014400

08006914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a21      	ldr	r2, [pc, #132]	@ (80069f8 <TIM_OC3_SetConfig+0xe4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10d      	bne.n	8006992 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800697c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a18      	ldr	r2, [pc, #96]	@ (80069f8 <TIM_OC3_SetConfig+0xe4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d007      	beq.n	80069aa <TIM_OC3_SetConfig+0x96>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <TIM_OC3_SetConfig+0xe8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_OC3_SetConfig+0x96>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a16      	ldr	r2, [pc, #88]	@ (8006a00 <TIM_OC3_SetConfig+0xec>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d113      	bne.n	80069d2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40014400 	.word	0x40014400

08006a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a14      	ldr	r2, [pc, #80]	@ (8006ab4 <TIM_OC4_SetConfig+0xb0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_OC4_SetConfig+0x74>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a13      	ldr	r2, [pc, #76]	@ (8006ab8 <TIM_OC4_SetConfig+0xb4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC4_SetConfig+0x74>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a12      	ldr	r2, [pc, #72]	@ (8006abc <TIM_OC4_SetConfig+0xb8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d109      	bne.n	8006a8c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	019b      	lsls	r3, r3, #6
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40014000 	.word	0x40014000
 8006abc:	40014400 	.word	0x40014400

08006ac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a13      	ldr	r2, [pc, #76]	@ (8006b64 <TIM_OC5_SetConfig+0xa4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_OC5_SetConfig+0x6a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a12      	ldr	r2, [pc, #72]	@ (8006b68 <TIM_OC5_SetConfig+0xa8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_OC5_SetConfig+0x6a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a11      	ldr	r2, [pc, #68]	@ (8006b6c <TIM_OC5_SetConfig+0xac>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d109      	bne.n	8006b3e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400

08006b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	051b      	lsls	r3, r3, #20
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a14      	ldr	r2, [pc, #80]	@ (8006c18 <TIM_OC6_SetConfig+0xa8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_OC6_SetConfig+0x6c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a13      	ldr	r2, [pc, #76]	@ (8006c1c <TIM_OC6_SetConfig+0xac>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC6_SetConfig+0x6c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a12      	ldr	r2, [pc, #72]	@ (8006c20 <TIM_OC6_SetConfig+0xb0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d109      	bne.n	8006bf0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400

08006c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f023 030a 	bic.w	r3, r3, #10
 8006c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f023 0210 	bic.w	r2, r3, #16
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	031b      	lsls	r3, r3, #12
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f043 0307 	orr.w	r3, r3, #7
 8006d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	609a      	str	r2, [r3, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	021a      	lsls	r2, r3, #8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	609a      	str	r2, [r3, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e04f      	b.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a21      	ldr	r2, [pc, #132]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d108      	bne.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006da0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a14      	ldr	r2, [pc, #80]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd8:	d004      	beq.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a10      	ldr	r2, [pc, #64]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10c      	bne.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40014000 	.word	0x40014000

08006e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e040      	b.n	8006ef4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fb faaa 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2224      	movs	r2, #36	@ 0x24
 8006e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fe9a 	bl	8007be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc6b 	bl	8007788 <UART_SetConfig>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e01b      	b.n	8006ef4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 ff19 	bl	8007d24 <UART_CheckIdleState>
 8006ef2:	4603      	mov	r3, r0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	@ 0x28
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d177      	bne.n	8007004 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_UART_Transmit+0x24>
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e070      	b.n	8007006 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2221      	movs	r2, #33	@ 0x21
 8006f30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f32:	f7fb fc8d 	bl	8002850 <HAL_GetTick>
 8006f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f50:	d108      	bne.n	8006f64 <HAL_UART_Transmit+0x68>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e003      	b.n	8006f6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f6c:	e02f      	b.n	8006fce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2180      	movs	r1, #128	@ 0x80
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 ff7b 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d004      	beq.n	8006f8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2220      	movs	r2, #32
 8006f88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e03b      	b.n	8007006 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10b      	bne.n	8006fac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	881a      	ldrh	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e007      	b.n	8006fbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1c9      	bne.n	8006f6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2140      	movs	r1, #64	@ 0x40
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 ff45 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e005      	b.n	8007006 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	e000      	b.n	8007006 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
  }
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007010:	b480      	push	{r7}
 8007012:	b08b      	sub	sp, #44	@ 0x2c
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007022:	2b20      	cmp	r3, #32
 8007024:	d147      	bne.n	80070b6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_UART_Transmit_IT+0x22>
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e040      	b.n	80070b8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2221      	movs	r2, #33	@ 0x21
 800705e:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007068:	d107      	bne.n	800707a <HAL_UART_Transmit_IT+0x6a>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4a13      	ldr	r2, [pc, #76]	@ (80070c4 <HAL_UART_Transmit_IT+0xb4>)
 8007076:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007078:	e002      	b.n	8007080 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4a12      	ldr	r2, [pc, #72]	@ (80070c8 <HAL_UART_Transmit_IT+0xb8>)
 800707e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	613b      	str	r3, [r7, #16]
   return(result);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007094:	627b      	str	r3, [r7, #36]	@ 0x24
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	623b      	str	r3, [r7, #32]
 80070a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	69f9      	ldr	r1, [r7, #28]
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e6      	bne.n	8007080 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	372c      	adds	r7, #44	@ 0x2c
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	08008287 	.word	0x08008287
 80070c8:	080081d1 	.word	0x080081d1

080070cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	@ 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d137      	bne.n	8007154 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_UART_Receive_IT+0x24>
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e030      	b.n	8007156 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a18      	ldr	r2, [pc, #96]	@ (8007160 <HAL_UART_Receive_IT+0x94>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d01f      	beq.n	8007144 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d018      	beq.n	8007144 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	613b      	str	r3, [r7, #16]
   return(result);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	69f9      	ldr	r1, [r7, #28]
 8007136:	6a3a      	ldr	r2, [r7, #32]
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	61bb      	str	r3, [r7, #24]
   return(result);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e6      	bne.n	8007112 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	461a      	mov	r2, r3
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 ff00 	bl	8007f50 <UART_Start_Receive_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	e000      	b.n	8007156 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3728      	adds	r7, #40	@ 0x28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40008000 	.word	0x40008000

08007164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b0ba      	sub	sp, #232	@ 0xe8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800718a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800718e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007192:	4013      	ands	r3, r2
 8007194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d115      	bne.n	80071cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00f      	beq.n	80071cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 82ca 	beq.w	8007756 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
      }
      return;
 80071ca:	e2c4      	b.n	8007756 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80071cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8117 	beq.w	8007404 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80071e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80071e6:	4b85      	ldr	r3, [pc, #532]	@ (80073fc <HAL_UART_IRQHandler+0x298>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 810a 	beq.w	8007404 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d011      	beq.n	8007220 <HAL_UART_IRQHandler+0xbc>
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2201      	movs	r2, #1
 800720e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007216:	f043 0201 	orr.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d011      	beq.n	8007250 <HAL_UART_IRQHandler+0xec>
 800722c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2202      	movs	r2, #2
 800723e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d011      	beq.n	8007280 <HAL_UART_IRQHandler+0x11c>
 800725c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2204      	movs	r2, #4
 800726e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007276:	f043 0202 	orr.w	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b00      	cmp	r3, #0
 800728a:	d017      	beq.n	80072bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2208      	movs	r2, #8
 80072aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072b2:	f043 0208 	orr.w	r2, r3, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <HAL_UART_IRQHandler+0x18a>
 80072c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00c      	beq.n	80072ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072e4:	f043 0220 	orr.w	r2, r3, #32
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 8230 	beq.w	800775a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007328:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007336:	2b40      	cmp	r3, #64	@ 0x40
 8007338:	d005      	beq.n	8007346 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800733a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800733e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007342:	2b00      	cmp	r3, #0
 8007344:	d04f      	beq.n	80073e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fec8 	bl	80080dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007356:	2b40      	cmp	r3, #64	@ 0x40
 8007358:	d141      	bne.n	80073de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3308      	adds	r3, #8
 8007382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007386:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800738a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800739e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1d9      	bne.n	800735a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d013      	beq.n	80073d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b2:	4a13      	ldr	r2, [pc, #76]	@ (8007400 <HAL_UART_IRQHandler+0x29c>)
 80073b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fc fc39 	bl	8003c32 <HAL_DMA_Abort_IT>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d017      	beq.n	80073f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	e00f      	b.n	80073f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fb f908 	bl	80025ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073dc:	e00b      	b.n	80073f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fb f904 	bl	80025ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e4:	e007      	b.n	80073f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fb f900 	bl	80025ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80073f4:	e1b1      	b.n	800775a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f6:	bf00      	nop
    return;
 80073f8:	e1af      	b.n	800775a <HAL_UART_IRQHandler+0x5f6>
 80073fa:	bf00      	nop
 80073fc:	04000120 	.word	0x04000120
 8007400:	080081a5 	.word	0x080081a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007408:	2b01      	cmp	r3, #1
 800740a:	f040 816a 	bne.w	80076e2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800740e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 8163 	beq.w	80076e2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800741c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 815c 	beq.w	80076e2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2210      	movs	r2, #16
 8007430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	f040 80d4 	bne.w	80075ea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800744e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 80ad 	beq.w	80075b2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800745e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007462:	429a      	cmp	r2, r3
 8007464:	f080 80a5 	bcs.w	80075b2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800746e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 8086 	bne.w	8007590 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800749c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1da      	bne.n	8007484 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3308      	adds	r3, #8
 80074d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e1      	bne.n	80074ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800751a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800751c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3308      	adds	r3, #8
 800752a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800752e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007530:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007534:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800753c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e3      	bne.n	800750a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800755e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007560:	f023 0310 	bic.w	r3, r3, #16
 8007564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007572:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007574:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e4      	bne.n	8007550 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800758a:	4618      	mov	r0, r3
 800758c:	f7fc fb13 	bl	8003bb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f8e0 	bl	8007770 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80075b0:	e0d5      	b.n	800775e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075bc:	429a      	cmp	r2, r3
 80075be:	f040 80ce 	bne.w	800775e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	f040 80c5 	bne.w	800775e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8c4 	bl	8007770 <HAL_UARTEx_RxEventCallback>
      return;
 80075e8:	e0b9      	b.n	800775e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 80ab 	beq.w	8007762 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800760c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80a6 	beq.w	8007762 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800762a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007638:	647b      	str	r3, [r7, #68]	@ 0x44
 800763a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800763e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e4      	bne.n	8007616 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	623b      	str	r3, [r7, #32]
   return(result);
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007670:	633a      	str	r2, [r7, #48]	@ 0x30
 8007672:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e3      	bne.n	800764c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	617b      	str	r3, [r7, #20]
   return(result);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f848 	bl	8007770 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076e0:	e03f      	b.n	8007762 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <HAL_UART_IRQHandler+0x5a8>
 80076ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 f805 	bl	8008714 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800770a:	e02d      	b.n	8007768 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00e      	beq.n	8007736 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800771c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01c      	beq.n	8007766 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
    }
    return;
 8007734:	e017      	b.n	8007766 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d012      	beq.n	8007768 <HAL_UART_IRQHandler+0x604>
 8007742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fdf9 	bl	8008346 <UART_EndTransmit_IT>
    return;
 8007754:	e008      	b.n	8007768 <HAL_UART_IRQHandler+0x604>
      return;
 8007756:	bf00      	nop
 8007758:	e006      	b.n	8007768 <HAL_UART_IRQHandler+0x604>
    return;
 800775a:	bf00      	nop
 800775c:	e004      	b.n	8007768 <HAL_UART_IRQHandler+0x604>
      return;
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <HAL_UART_IRQHandler+0x604>
      return;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <HAL_UART_IRQHandler+0x604>
    return;
 8007766:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007768:	37e8      	adds	r7, #232	@ 0xe8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop

08007770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800778c:	b08a      	sub	sp, #40	@ 0x28
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	431a      	orrs	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4bb4      	ldr	r3, [pc, #720]	@ (8007a88 <UART_SetConfig+0x300>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4aa9      	ldr	r2, [pc, #676]	@ (8007a8c <UART_SetConfig+0x304>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d004      	beq.n	80077f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f0:	4313      	orrs	r3, r2
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007804:	430a      	orrs	r2, r1
 8007806:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4aa0      	ldr	r2, [pc, #640]	@ (8007a90 <UART_SetConfig+0x308>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d126      	bne.n	8007860 <UART_SetConfig+0xd8>
 8007812:	4ba0      	ldr	r3, [pc, #640]	@ (8007a94 <UART_SetConfig+0x30c>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007818:	f003 0303 	and.w	r3, r3, #3
 800781c:	2b03      	cmp	r3, #3
 800781e:	d81b      	bhi.n	8007858 <UART_SetConfig+0xd0>
 8007820:	a201      	add	r2, pc, #4	@ (adr r2, 8007828 <UART_SetConfig+0xa0>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	08007839 	.word	0x08007839
 800782c:	08007849 	.word	0x08007849
 8007830:	08007841 	.word	0x08007841
 8007834:	08007851 	.word	0x08007851
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800783e:	e080      	b.n	8007942 <UART_SetConfig+0x1ba>
 8007840:	2302      	movs	r3, #2
 8007842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007846:	e07c      	b.n	8007942 <UART_SetConfig+0x1ba>
 8007848:	2304      	movs	r3, #4
 800784a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800784e:	e078      	b.n	8007942 <UART_SetConfig+0x1ba>
 8007850:	2308      	movs	r3, #8
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007856:	e074      	b.n	8007942 <UART_SetConfig+0x1ba>
 8007858:	2310      	movs	r3, #16
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785e:	e070      	b.n	8007942 <UART_SetConfig+0x1ba>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a8c      	ldr	r2, [pc, #560]	@ (8007a98 <UART_SetConfig+0x310>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d138      	bne.n	80078dc <UART_SetConfig+0x154>
 800786a:	4b8a      	ldr	r3, [pc, #552]	@ (8007a94 <UART_SetConfig+0x30c>)
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007870:	f003 030c 	and.w	r3, r3, #12
 8007874:	2b0c      	cmp	r3, #12
 8007876:	d82d      	bhi.n	80078d4 <UART_SetConfig+0x14c>
 8007878:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <UART_SetConfig+0xf8>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	080078b5 	.word	0x080078b5
 8007884:	080078d5 	.word	0x080078d5
 8007888:	080078d5 	.word	0x080078d5
 800788c:	080078d5 	.word	0x080078d5
 8007890:	080078c5 	.word	0x080078c5
 8007894:	080078d5 	.word	0x080078d5
 8007898:	080078d5 	.word	0x080078d5
 800789c:	080078d5 	.word	0x080078d5
 80078a0:	080078bd 	.word	0x080078bd
 80078a4:	080078d5 	.word	0x080078d5
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078cd 	.word	0x080078cd
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ba:	e042      	b.n	8007942 <UART_SetConfig+0x1ba>
 80078bc:	2302      	movs	r3, #2
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c2:	e03e      	b.n	8007942 <UART_SetConfig+0x1ba>
 80078c4:	2304      	movs	r3, #4
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ca:	e03a      	b.n	8007942 <UART_SetConfig+0x1ba>
 80078cc:	2308      	movs	r3, #8
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d2:	e036      	b.n	8007942 <UART_SetConfig+0x1ba>
 80078d4:	2310      	movs	r3, #16
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078da:	e032      	b.n	8007942 <UART_SetConfig+0x1ba>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a6a      	ldr	r2, [pc, #424]	@ (8007a8c <UART_SetConfig+0x304>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d12a      	bne.n	800793c <UART_SetConfig+0x1b4>
 80078e6:	4b6b      	ldr	r3, [pc, #428]	@ (8007a94 <UART_SetConfig+0x30c>)
 80078e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078f4:	d01a      	beq.n	800792c <UART_SetConfig+0x1a4>
 80078f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078fa:	d81b      	bhi.n	8007934 <UART_SetConfig+0x1ac>
 80078fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007900:	d00c      	beq.n	800791c <UART_SetConfig+0x194>
 8007902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007906:	d815      	bhi.n	8007934 <UART_SetConfig+0x1ac>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <UART_SetConfig+0x18c>
 800790c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007910:	d008      	beq.n	8007924 <UART_SetConfig+0x19c>
 8007912:	e00f      	b.n	8007934 <UART_SetConfig+0x1ac>
 8007914:	2300      	movs	r3, #0
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791a:	e012      	b.n	8007942 <UART_SetConfig+0x1ba>
 800791c:	2302      	movs	r3, #2
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007922:	e00e      	b.n	8007942 <UART_SetConfig+0x1ba>
 8007924:	2304      	movs	r3, #4
 8007926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792a:	e00a      	b.n	8007942 <UART_SetConfig+0x1ba>
 800792c:	2308      	movs	r3, #8
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007932:	e006      	b.n	8007942 <UART_SetConfig+0x1ba>
 8007934:	2310      	movs	r3, #16
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	e002      	b.n	8007942 <UART_SetConfig+0x1ba>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a51      	ldr	r2, [pc, #324]	@ (8007a8c <UART_SetConfig+0x304>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d17a      	bne.n	8007a42 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800794c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007950:	2b08      	cmp	r3, #8
 8007952:	d824      	bhi.n	800799e <UART_SetConfig+0x216>
 8007954:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <UART_SetConfig+0x1d4>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007981 	.word	0x08007981
 8007960:	0800799f 	.word	0x0800799f
 8007964:	08007989 	.word	0x08007989
 8007968:	0800799f 	.word	0x0800799f
 800796c:	0800798f 	.word	0x0800798f
 8007970:	0800799f 	.word	0x0800799f
 8007974:	0800799f 	.word	0x0800799f
 8007978:	0800799f 	.word	0x0800799f
 800797c:	08007997 	.word	0x08007997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007980:	f7fd ff5e 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8007984:	61f8      	str	r0, [r7, #28]
        break;
 8007986:	e010      	b.n	80079aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007988:	4b44      	ldr	r3, [pc, #272]	@ (8007a9c <UART_SetConfig+0x314>)
 800798a:	61fb      	str	r3, [r7, #28]
        break;
 800798c:	e00d      	b.n	80079aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800798e:	f7fd febf 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8007992:	61f8      	str	r0, [r7, #28]
        break;
 8007994:	e009      	b.n	80079aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800799a:	61fb      	str	r3, [r7, #28]
        break;
 800799c:	e005      	b.n	80079aa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8107 	beq.w	8007bc0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d305      	bcc.n	80079ce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d903      	bls.n	80079d6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079d4:	e0f4      	b.n	8007bc0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2200      	movs	r2, #0
 80079da:	461c      	mov	r4, r3
 80079dc:	4615      	mov	r5, r2
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	022b      	lsls	r3, r5, #8
 80079e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80079ec:	0222      	lsls	r2, r4, #8
 80079ee:	68f9      	ldr	r1, [r7, #12]
 80079f0:	6849      	ldr	r1, [r1, #4]
 80079f2:	0849      	lsrs	r1, r1, #1
 80079f4:	2000      	movs	r0, #0
 80079f6:	4688      	mov	r8, r1
 80079f8:	4681      	mov	r9, r0
 80079fa:	eb12 0a08 	adds.w	sl, r2, r8
 80079fe:	eb43 0b09 	adc.w	fp, r3, r9
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a10:	4650      	mov	r0, sl
 8007a12:	4659      	mov	r1, fp
 8007a14:	f7f9 f922 	bl	8000c5c <__aeabi_uldivmod>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a26:	d308      	bcc.n	8007a3a <UART_SetConfig+0x2b2>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a2e:	d204      	bcs.n	8007a3a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	60da      	str	r2, [r3, #12]
 8007a38:	e0c2      	b.n	8007bc0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a40:	e0be      	b.n	8007bc0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a4a:	d16a      	bne.n	8007b22 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d834      	bhi.n	8007abe <UART_SetConfig+0x336>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <UART_SetConfig+0x2d4>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007aa1 	.word	0x08007aa1
 8007a64:	08007aa9 	.word	0x08007aa9
 8007a68:	08007abf 	.word	0x08007abf
 8007a6c:	08007aaf 	.word	0x08007aaf
 8007a70:	08007abf 	.word	0x08007abf
 8007a74:	08007abf 	.word	0x08007abf
 8007a78:	08007abf 	.word	0x08007abf
 8007a7c:	08007ab7 	.word	0x08007ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a80:	f7fd fede 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8007a84:	61f8      	str	r0, [r7, #28]
        break;
 8007a86:	e020      	b.n	8007aca <UART_SetConfig+0x342>
 8007a88:	efff69f3 	.word	0xefff69f3
 8007a8c:	40008000 	.word	0x40008000
 8007a90:	40013800 	.word	0x40013800
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40004400 	.word	0x40004400
 8007a9c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa0:	f7fd fee4 	bl	800586c <HAL_RCC_GetPCLK2Freq>
 8007aa4:	61f8      	str	r0, [r7, #28]
        break;
 8007aa6:	e010      	b.n	8007aca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa8:	4b4c      	ldr	r3, [pc, #304]	@ (8007bdc <UART_SetConfig+0x454>)
 8007aaa:	61fb      	str	r3, [r7, #28]
        break;
 8007aac:	e00d      	b.n	8007aca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aae:	f7fd fe2f 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8007ab2:	61f8      	str	r0, [r7, #28]
        break;
 8007ab4:	e009      	b.n	8007aca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aba:	61fb      	str	r3, [r7, #28]
        break;
 8007abc:	e005      	b.n	8007aca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d077      	beq.n	8007bc0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	005a      	lsls	r2, r3, #1
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	441a      	add	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b0f      	cmp	r3, #15
 8007aea:	d916      	bls.n	8007b1a <UART_SetConfig+0x392>
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af2:	d212      	bcs.n	8007b1a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f023 030f 	bic.w	r3, r3, #15
 8007afc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	8afb      	ldrh	r3, [r7, #22]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	8afa      	ldrh	r2, [r7, #22]
 8007b16:	60da      	str	r2, [r3, #12]
 8007b18:	e052      	b.n	8007bc0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b20:	e04e      	b.n	8007bc0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d827      	bhi.n	8007b7a <UART_SetConfig+0x3f2>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <UART_SetConfig+0x3a8>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b55 	.word	0x08007b55
 8007b34:	08007b5d 	.word	0x08007b5d
 8007b38:	08007b65 	.word	0x08007b65
 8007b3c:	08007b7b 	.word	0x08007b7b
 8007b40:	08007b6b 	.word	0x08007b6b
 8007b44:	08007b7b 	.word	0x08007b7b
 8007b48:	08007b7b 	.word	0x08007b7b
 8007b4c:	08007b7b 	.word	0x08007b7b
 8007b50:	08007b73 	.word	0x08007b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b54:	f7fd fe74 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8007b58:	61f8      	str	r0, [r7, #28]
        break;
 8007b5a:	e014      	b.n	8007b86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b5c:	f7fd fe86 	bl	800586c <HAL_RCC_GetPCLK2Freq>
 8007b60:	61f8      	str	r0, [r7, #28]
        break;
 8007b62:	e010      	b.n	8007b86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b64:	4b1d      	ldr	r3, [pc, #116]	@ (8007bdc <UART_SetConfig+0x454>)
 8007b66:	61fb      	str	r3, [r7, #28]
        break;
 8007b68:	e00d      	b.n	8007b86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b6a:	f7fd fdd1 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 8007b6e:	61f8      	str	r0, [r7, #28]
        break;
 8007b70:	e009      	b.n	8007b86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b76:	61fb      	str	r3, [r7, #28]
        break;
 8007b78:	e005      	b.n	8007b86 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b84:	bf00      	nop
    }

    if (pclk != 0U)
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d019      	beq.n	8007bc0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	085a      	lsrs	r2, r3, #1
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	2b0f      	cmp	r3, #15
 8007ba4:	d909      	bls.n	8007bba <UART_SetConfig+0x432>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bac:	d205      	bcs.n	8007bba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60da      	str	r2, [r3, #12]
 8007bb8:	e002      	b.n	8007bc0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007bcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3728      	adds	r7, #40	@ 0x28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bda:	bf00      	nop
 8007bdc:	00f42400 	.word	0x00f42400

08007be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cde:	d10a      	bne.n	8007cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b098      	sub	sp, #96	@ 0x60
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d34:	f7fa fd8c 	bl	8002850 <HAL_GetTick>
 8007d38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d12e      	bne.n	8007da6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d50:	2200      	movs	r2, #0
 8007d52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f88c 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d021      	beq.n	8007da6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e6      	bne.n	8007d62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e062      	b.n	8007e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d149      	bne.n	8007e48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f856 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d03c      	beq.n	8007e48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	623b      	str	r3, [r7, #32]
   return(result);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e6      	bne.n	8007dce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3308      	adds	r3, #8
 8007e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e20:	61fa      	str	r2, [r7, #28]
 8007e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	69b9      	ldr	r1, [r7, #24]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e5      	bne.n	8007e00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e011      	b.n	8007e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3758      	adds	r7, #88	@ 0x58
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e84:	e04f      	b.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e8c:	d04b      	beq.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e8e:	f7fa fcdf 	bl	8002850 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d302      	bcc.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e04e      	b.n	8007f46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d037      	beq.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b80      	cmp	r3, #128	@ 0x80
 8007eba:	d034      	beq.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b40      	cmp	r3, #64	@ 0x40
 8007ec0:	d031      	beq.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d110      	bne.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f8ff 	bl	80080dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e029      	b.n	8007f46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f00:	d111      	bne.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f8e5 	bl	80080dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e00f      	b.n	8007f46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69da      	ldr	r2, [r3, #28]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	bf0c      	ite	eq
 8007f36:	2301      	moveq	r3, #1
 8007f38:	2300      	movne	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d0a0      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b097      	sub	sp, #92	@ 0x5c
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	88fa      	ldrh	r2, [r7, #6]
 8007f70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f82:	d10e      	bne.n	8007fa2 <UART_Start_Receive_IT+0x52>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <UART_Start_Receive_IT+0x48>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007f92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f96:	e02d      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	22ff      	movs	r2, #255	@ 0xff
 8007f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fa0:	e028      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10d      	bne.n	8007fc6 <UART_Start_Receive_IT+0x76>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <UART_Start_Receive_IT+0x6c>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	22ff      	movs	r2, #255	@ 0xff
 8007fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fba:	e01b      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	227f      	movs	r2, #127	@ 0x7f
 8007fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fc4:	e016      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fce:	d10d      	bne.n	8007fec <UART_Start_Receive_IT+0x9c>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <UART_Start_Receive_IT+0x92>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	227f      	movs	r2, #127	@ 0x7f
 8007fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fe0:	e008      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	223f      	movs	r2, #63	@ 0x3f
 8007fe6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fea:	e003      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2222      	movs	r2, #34	@ 0x22
 8008000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3308      	adds	r3, #8
 800800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	f043 0301 	orr.w	r3, r3, #1
 800801a:	657b      	str	r3, [r7, #84]	@ 0x54
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008024:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008026:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800802a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008040:	d107      	bne.n	8008052 <UART_Start_Receive_IT+0x102>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d103      	bne.n	8008052 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4a21      	ldr	r2, [pc, #132]	@ (80080d4 <UART_Start_Receive_IT+0x184>)
 800804e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008050:	e002      	b.n	8008058 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4a20      	ldr	r2, [pc, #128]	@ (80080d8 <UART_Start_Receive_IT+0x188>)
 8008056:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d019      	beq.n	8008094 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008080:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e6      	bne.n	8008060 <UART_Start_Receive_IT+0x110>
 8008092:	e018      	b.n	80080c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	613b      	str	r3, [r7, #16]
   return(result);
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f043 0320 	orr.w	r3, r3, #32
 80080a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080b2:	623b      	str	r3, [r7, #32]
 80080b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	69f9      	ldr	r1, [r7, #28]
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	61bb      	str	r3, [r7, #24]
   return(result);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e6      	bne.n	8008094 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	375c      	adds	r7, #92	@ 0x5c
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	08008559 	.word	0x08008559
 80080d8:	0800839d 	.word	0x0800839d

080080dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b095      	sub	sp, #84	@ 0x54
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008102:	643b      	str	r3, [r7, #64]	@ 0x40
 8008104:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e6      	bne.n	80080e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	61fb      	str	r3, [r7, #28]
   return(result);
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800813c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e5      	bne.n	8008116 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814e:	2b01      	cmp	r3, #1
 8008150:	d118      	bne.n	8008184 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f023 0310 	bic.w	r3, r3, #16
 8008166:	647b      	str	r3, [r7, #68]	@ 0x44
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6979      	ldr	r1, [r7, #20]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	613b      	str	r3, [r7, #16]
   return(result);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e6      	bne.n	8008152 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008198:	bf00      	nop
 800819a:	3754      	adds	r7, #84	@ 0x54
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7fa fa12 	bl	80025ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b08f      	sub	sp, #60	@ 0x3c
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081dc:	2b21      	cmp	r3, #33	@ 0x21
 80081de:	d14c      	bne.n	800827a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d132      	bne.n	8008252 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008200:	637b      	str	r3, [r7, #52]	@ 0x34
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800820c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	60bb      	str	r3, [r7, #8]
   return(result);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008232:	633b      	str	r3, [r7, #48]	@ 0x30
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	61bb      	str	r3, [r7, #24]
 800823e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6979      	ldr	r1, [r7, #20]
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	613b      	str	r3, [r7, #16]
   return(result);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e6      	bne.n	800821e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008250:	e013      	b.n	800827a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800827a:	bf00      	nop
 800827c:	373c      	adds	r7, #60	@ 0x3c
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008286:	b480      	push	{r7}
 8008288:	b091      	sub	sp, #68	@ 0x44
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008292:	2b21      	cmp	r3, #33	@ 0x21
 8008294:	d151      	bne.n	800833a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d132      	bne.n	8008308 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	623b      	str	r3, [r7, #32]
   return(result);
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80082c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e6      	bne.n	80082a2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f2:	61fb      	str	r3, [r7, #28]
 80082f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	69b9      	ldr	r1, [r7, #24]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e6      	bne.n	80082d4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008306:	e018      	b.n	800833a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800830e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008310:	881a      	ldrh	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800831a:	b292      	uxth	r2, r2
 800831c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008322:	1c9a      	adds	r2, r3, #2
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800832e:	b29b      	uxth	r3, r3
 8008330:	3b01      	subs	r3, #1
 8008332:	b29a      	uxth	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800833a:	bf00      	nop
 800833c:	3744      	adds	r7, #68	@ 0x44
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b088      	sub	sp, #32
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	60bb      	str	r3, [r7, #8]
   return(result);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008362:	61fb      	str	r3, [r7, #28]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	61bb      	str	r3, [r7, #24]
 800836e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6979      	ldr	r1, [r7, #20]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	613b      	str	r3, [r7, #16]
   return(result);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e6      	bne.n	800834e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7fa f8e1 	bl	8002554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008392:	bf00      	nop
 8008394:	3720      	adds	r7, #32
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b09c      	sub	sp, #112	@ 0x70
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083b4:	2b22      	cmp	r3, #34	@ 0x22
 80083b6:	f040 80be 	bne.w	8008536 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80083c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80083c8:	b2d9      	uxtb	r1, r3
 80083ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d4:	400a      	ands	r2, r1
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 80a3 	bne.w	800854a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008414:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008422:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008424:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008428:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e6      	bne.n	8008404 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3308      	adds	r3, #8
 800843c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	667b      	str	r3, [r7, #100]	@ 0x64
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008456:	647a      	str	r2, [r7, #68]	@ 0x44
 8008458:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800845c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e5      	bne.n	8008436 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a34      	ldr	r2, [pc, #208]	@ (8008554 <UART_RxISR_8BIT+0x1b8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d01f      	beq.n	80084c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d018      	beq.n	80084c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	e853 3f00 	ldrex	r3, [r3]
 80084a2:	623b      	str	r3, [r7, #32]
   return(result);
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80084b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e6      	bne.n	8008496 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d12e      	bne.n	800852e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084f4:	61fb      	str	r3, [r7, #28]
 80084f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	69b9      	ldr	r1, [r7, #24]
 80084fa:	69fa      	ldr	r2, [r7, #28]
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	617b      	str	r3, [r7, #20]
   return(result);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	f003 0310 	and.w	r3, r3, #16
 8008512:	2b10      	cmp	r3, #16
 8008514:	d103      	bne.n	800851e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2210      	movs	r2, #16
 800851c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff f922 	bl	8007770 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800852c:	e00d      	b.n	800854a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fa f82e 	bl	8002590 <HAL_UART_RxCpltCallback>
}
 8008534:	e009      	b.n	800854a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	8b1b      	ldrh	r3, [r3, #24]
 800853c:	b29a      	uxth	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0208 	orr.w	r2, r2, #8
 8008546:	b292      	uxth	r2, r2
 8008548:	831a      	strh	r2, [r3, #24]
}
 800854a:	bf00      	nop
 800854c:	3770      	adds	r7, #112	@ 0x70
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	40008000 	.word	0x40008000

08008558 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b09c      	sub	sp, #112	@ 0x70
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008566:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008570:	2b22      	cmp	r3, #34	@ 0x22
 8008572:	f040 80be 	bne.w	80086f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800857c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008584:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008586:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800858a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800858e:	4013      	ands	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008594:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800859a:	1c9a      	adds	r2, r3, #2
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f040 80a3 	bne.w	8008706 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80085ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085de:	657b      	str	r3, [r7, #84]	@ 0x54
 80085e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e6      	bne.n	80085c0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	663b      	str	r3, [r7, #96]	@ 0x60
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008612:	643a      	str	r2, [r7, #64]	@ 0x40
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e5      	bne.n	80085f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a34      	ldr	r2, [pc, #208]	@ (8008710 <UART_RxISR_16BIT+0x1b8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d01f      	beq.n	8008684 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d018      	beq.n	8008684 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008666:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008672:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e6      	bne.n	8008652 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008688:	2b01      	cmp	r3, #1
 800868a:	d12e      	bne.n	80086ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f023 0310 	bic.w	r3, r3, #16
 80086a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6979      	ldr	r1, [r7, #20]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	613b      	str	r3, [r7, #16]
   return(result);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	f003 0310 	and.w	r3, r3, #16
 80086ce:	2b10      	cmp	r3, #16
 80086d0:	d103      	bne.n	80086da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2210      	movs	r2, #16
 80086d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff f844 	bl	8007770 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086e8:	e00d      	b.n	8008706 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 ff50 	bl	8002590 <HAL_UART_RxCpltCallback>
}
 80086f0:	e009      	b.n	8008706 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	8b1b      	ldrh	r3, [r3, #24]
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0208 	orr.w	r2, r2, #8
 8008702:	b292      	uxth	r2, r2
 8008704:	831a      	strh	r2, [r3, #24]
}
 8008706:	bf00      	nop
 8008708:	3770      	adds	r7, #112	@ 0x70
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40008000 	.word	0x40008000

08008714 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <__assert_func>:
 8008728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800872a:	4614      	mov	r4, r2
 800872c:	461a      	mov	r2, r3
 800872e:	4b09      	ldr	r3, [pc, #36]	@ (8008754 <__assert_func+0x2c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4605      	mov	r5, r0
 8008734:	68d8      	ldr	r0, [r3, #12]
 8008736:	b954      	cbnz	r4, 800874e <__assert_func+0x26>
 8008738:	4b07      	ldr	r3, [pc, #28]	@ (8008758 <__assert_func+0x30>)
 800873a:	461c      	mov	r4, r3
 800873c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008740:	9100      	str	r1, [sp, #0]
 8008742:	462b      	mov	r3, r5
 8008744:	4905      	ldr	r1, [pc, #20]	@ (800875c <__assert_func+0x34>)
 8008746:	f000 fd3d 	bl	80091c4 <fiprintf>
 800874a:	f000 fdd4 	bl	80092f6 <abort>
 800874e:	4b04      	ldr	r3, [pc, #16]	@ (8008760 <__assert_func+0x38>)
 8008750:	e7f4      	b.n	800873c <__assert_func+0x14>
 8008752:	bf00      	nop
 8008754:	20000024 	.word	0x20000024
 8008758:	0800c54f 	.word	0x0800c54f
 800875c:	0800c521 	.word	0x0800c521
 8008760:	0800c514 	.word	0x0800c514

08008764 <__cvt>:
 8008764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	ec57 6b10 	vmov	r6, r7, d0
 800876c:	2f00      	cmp	r7, #0
 800876e:	460c      	mov	r4, r1
 8008770:	4619      	mov	r1, r3
 8008772:	463b      	mov	r3, r7
 8008774:	bfbb      	ittet	lt
 8008776:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800877a:	461f      	movlt	r7, r3
 800877c:	2300      	movge	r3, #0
 800877e:	232d      	movlt	r3, #45	@ 0x2d
 8008780:	700b      	strb	r3, [r1, #0]
 8008782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008784:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008788:	4691      	mov	r9, r2
 800878a:	f023 0820 	bic.w	r8, r3, #32
 800878e:	bfbc      	itt	lt
 8008790:	4632      	movlt	r2, r6
 8008792:	4616      	movlt	r6, r2
 8008794:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008798:	d005      	beq.n	80087a6 <__cvt+0x42>
 800879a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800879e:	d100      	bne.n	80087a2 <__cvt+0x3e>
 80087a0:	3401      	adds	r4, #1
 80087a2:	2102      	movs	r1, #2
 80087a4:	e000      	b.n	80087a8 <__cvt+0x44>
 80087a6:	2103      	movs	r1, #3
 80087a8:	ab03      	add	r3, sp, #12
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	ab02      	add	r3, sp, #8
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	ec47 6b10 	vmov	d0, r6, r7
 80087b4:	4653      	mov	r3, sl
 80087b6:	4622      	mov	r2, r4
 80087b8:	f000 fe2e 	bl	8009418 <_dtoa_r>
 80087bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087c0:	4605      	mov	r5, r0
 80087c2:	d119      	bne.n	80087f8 <__cvt+0x94>
 80087c4:	f019 0f01 	tst.w	r9, #1
 80087c8:	d00e      	beq.n	80087e8 <__cvt+0x84>
 80087ca:	eb00 0904 	add.w	r9, r0, r4
 80087ce:	2200      	movs	r2, #0
 80087d0:	2300      	movs	r3, #0
 80087d2:	4630      	mov	r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	f7f8 f981 	bl	8000adc <__aeabi_dcmpeq>
 80087da:	b108      	cbz	r0, 80087e0 <__cvt+0x7c>
 80087dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80087e0:	2230      	movs	r2, #48	@ 0x30
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	454b      	cmp	r3, r9
 80087e6:	d31e      	bcc.n	8008826 <__cvt+0xc2>
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ec:	1b5b      	subs	r3, r3, r5
 80087ee:	4628      	mov	r0, r5
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	b004      	add	sp, #16
 80087f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087fc:	eb00 0904 	add.w	r9, r0, r4
 8008800:	d1e5      	bne.n	80087ce <__cvt+0x6a>
 8008802:	7803      	ldrb	r3, [r0, #0]
 8008804:	2b30      	cmp	r3, #48	@ 0x30
 8008806:	d10a      	bne.n	800881e <__cvt+0xba>
 8008808:	2200      	movs	r2, #0
 800880a:	2300      	movs	r3, #0
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	f7f8 f964 	bl	8000adc <__aeabi_dcmpeq>
 8008814:	b918      	cbnz	r0, 800881e <__cvt+0xba>
 8008816:	f1c4 0401 	rsb	r4, r4, #1
 800881a:	f8ca 4000 	str.w	r4, [sl]
 800881e:	f8da 3000 	ldr.w	r3, [sl]
 8008822:	4499      	add	r9, r3
 8008824:	e7d3      	b.n	80087ce <__cvt+0x6a>
 8008826:	1c59      	adds	r1, r3, #1
 8008828:	9103      	str	r1, [sp, #12]
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	e7d9      	b.n	80087e2 <__cvt+0x7e>

0800882e <__exponent>:
 800882e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008830:	2900      	cmp	r1, #0
 8008832:	bfba      	itte	lt
 8008834:	4249      	neglt	r1, r1
 8008836:	232d      	movlt	r3, #45	@ 0x2d
 8008838:	232b      	movge	r3, #43	@ 0x2b
 800883a:	2909      	cmp	r1, #9
 800883c:	7002      	strb	r2, [r0, #0]
 800883e:	7043      	strb	r3, [r0, #1]
 8008840:	dd29      	ble.n	8008896 <__exponent+0x68>
 8008842:	f10d 0307 	add.w	r3, sp, #7
 8008846:	461d      	mov	r5, r3
 8008848:	270a      	movs	r7, #10
 800884a:	461a      	mov	r2, r3
 800884c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008850:	fb07 1416 	mls	r4, r7, r6, r1
 8008854:	3430      	adds	r4, #48	@ 0x30
 8008856:	f802 4c01 	strb.w	r4, [r2, #-1]
 800885a:	460c      	mov	r4, r1
 800885c:	2c63      	cmp	r4, #99	@ 0x63
 800885e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008862:	4631      	mov	r1, r6
 8008864:	dcf1      	bgt.n	800884a <__exponent+0x1c>
 8008866:	3130      	adds	r1, #48	@ 0x30
 8008868:	1e94      	subs	r4, r2, #2
 800886a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800886e:	1c41      	adds	r1, r0, #1
 8008870:	4623      	mov	r3, r4
 8008872:	42ab      	cmp	r3, r5
 8008874:	d30a      	bcc.n	800888c <__exponent+0x5e>
 8008876:	f10d 0309 	add.w	r3, sp, #9
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	42ac      	cmp	r4, r5
 800887e:	bf88      	it	hi
 8008880:	2300      	movhi	r3, #0
 8008882:	3302      	adds	r3, #2
 8008884:	4403      	add	r3, r0
 8008886:	1a18      	subs	r0, r3, r0
 8008888:	b003      	add	sp, #12
 800888a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800888c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008890:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008894:	e7ed      	b.n	8008872 <__exponent+0x44>
 8008896:	2330      	movs	r3, #48	@ 0x30
 8008898:	3130      	adds	r1, #48	@ 0x30
 800889a:	7083      	strb	r3, [r0, #2]
 800889c:	70c1      	strb	r1, [r0, #3]
 800889e:	1d03      	adds	r3, r0, #4
 80088a0:	e7f1      	b.n	8008886 <__exponent+0x58>
	...

080088a4 <_printf_float>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	b08d      	sub	sp, #52	@ 0x34
 80088aa:	460c      	mov	r4, r1
 80088ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088b0:	4616      	mov	r6, r2
 80088b2:	461f      	mov	r7, r3
 80088b4:	4605      	mov	r5, r0
 80088b6:	f000 fcd7 	bl	8009268 <_localeconv_r>
 80088ba:	6803      	ldr	r3, [r0, #0]
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f7 fcd6 	bl	8000270 <strlen>
 80088c4:	2300      	movs	r3, #0
 80088c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088c8:	f8d8 3000 	ldr.w	r3, [r8]
 80088cc:	9005      	str	r0, [sp, #20]
 80088ce:	3307      	adds	r3, #7
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	f103 0208 	add.w	r2, r3, #8
 80088d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088dc:	f8d4 b000 	ldr.w	fp, [r4]
 80088e0:	f8c8 2000 	str.w	r2, [r8]
 80088e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088ec:	9307      	str	r3, [sp, #28]
 80088ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80088f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80088f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088fa:	4b9c      	ldr	r3, [pc, #624]	@ (8008b6c <_printf_float+0x2c8>)
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008900:	f7f8 f91e 	bl	8000b40 <__aeabi_dcmpun>
 8008904:	bb70      	cbnz	r0, 8008964 <_printf_float+0xc0>
 8008906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800890a:	4b98      	ldr	r3, [pc, #608]	@ (8008b6c <_printf_float+0x2c8>)
 800890c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008910:	f7f8 f8f8 	bl	8000b04 <__aeabi_dcmple>
 8008914:	bb30      	cbnz	r0, 8008964 <_printf_float+0xc0>
 8008916:	2200      	movs	r2, #0
 8008918:	2300      	movs	r3, #0
 800891a:	4640      	mov	r0, r8
 800891c:	4649      	mov	r1, r9
 800891e:	f7f8 f8e7 	bl	8000af0 <__aeabi_dcmplt>
 8008922:	b110      	cbz	r0, 800892a <_printf_float+0x86>
 8008924:	232d      	movs	r3, #45	@ 0x2d
 8008926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800892a:	4a91      	ldr	r2, [pc, #580]	@ (8008b70 <_printf_float+0x2cc>)
 800892c:	4b91      	ldr	r3, [pc, #580]	@ (8008b74 <_printf_float+0x2d0>)
 800892e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008932:	bf94      	ite	ls
 8008934:	4690      	movls	r8, r2
 8008936:	4698      	movhi	r8, r3
 8008938:	2303      	movs	r3, #3
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	f02b 0304 	bic.w	r3, fp, #4
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	9700      	str	r7, [sp, #0]
 8008948:	4633      	mov	r3, r6
 800894a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800894c:	4621      	mov	r1, r4
 800894e:	4628      	mov	r0, r5
 8008950:	f000 f9d2 	bl	8008cf8 <_printf_common>
 8008954:	3001      	adds	r0, #1
 8008956:	f040 808d 	bne.w	8008a74 <_printf_float+0x1d0>
 800895a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800895e:	b00d      	add	sp, #52	@ 0x34
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	f7f8 f8e8 	bl	8000b40 <__aeabi_dcmpun>
 8008970:	b140      	cbz	r0, 8008984 <_printf_float+0xe0>
 8008972:	464b      	mov	r3, r9
 8008974:	2b00      	cmp	r3, #0
 8008976:	bfbc      	itt	lt
 8008978:	232d      	movlt	r3, #45	@ 0x2d
 800897a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800897e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b78 <_printf_float+0x2d4>)
 8008980:	4b7e      	ldr	r3, [pc, #504]	@ (8008b7c <_printf_float+0x2d8>)
 8008982:	e7d4      	b.n	800892e <_printf_float+0x8a>
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800898a:	9206      	str	r2, [sp, #24]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	d13b      	bne.n	8008a08 <_printf_float+0x164>
 8008990:	2306      	movs	r3, #6
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008998:	2300      	movs	r3, #0
 800899a:	6022      	str	r2, [r4, #0]
 800899c:	9303      	str	r3, [sp, #12]
 800899e:	ab0a      	add	r3, sp, #40	@ 0x28
 80089a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089a4:	ab09      	add	r3, sp, #36	@ 0x24
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	6861      	ldr	r1, [r4, #4]
 80089aa:	ec49 8b10 	vmov	d0, r8, r9
 80089ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7ff fed6 	bl	8008764 <__cvt>
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089bc:	2b47      	cmp	r3, #71	@ 0x47
 80089be:	4680      	mov	r8, r0
 80089c0:	d129      	bne.n	8008a16 <_printf_float+0x172>
 80089c2:	1cc8      	adds	r0, r1, #3
 80089c4:	db02      	blt.n	80089cc <_printf_float+0x128>
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	4299      	cmp	r1, r3
 80089ca:	dd41      	ble.n	8008a50 <_printf_float+0x1ac>
 80089cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80089d0:	fa5f fa8a 	uxtb.w	sl, sl
 80089d4:	3901      	subs	r1, #1
 80089d6:	4652      	mov	r2, sl
 80089d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80089de:	f7ff ff26 	bl	800882e <__exponent>
 80089e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089e4:	1813      	adds	r3, r2, r0
 80089e6:	2a01      	cmp	r2, #1
 80089e8:	4681      	mov	r9, r0
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	dc02      	bgt.n	80089f4 <_printf_float+0x150>
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	07d2      	lsls	r2, r2, #31
 80089f2:	d501      	bpl.n	80089f8 <_printf_float+0x154>
 80089f4:	3301      	adds	r3, #1
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0a2      	beq.n	8008946 <_printf_float+0xa2>
 8008a00:	232d      	movs	r3, #45	@ 0x2d
 8008a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a06:	e79e      	b.n	8008946 <_printf_float+0xa2>
 8008a08:	9a06      	ldr	r2, [sp, #24]
 8008a0a:	2a47      	cmp	r2, #71	@ 0x47
 8008a0c:	d1c2      	bne.n	8008994 <_printf_float+0xf0>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1c0      	bne.n	8008994 <_printf_float+0xf0>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7bd      	b.n	8008992 <_printf_float+0xee>
 8008a16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a1a:	d9db      	bls.n	80089d4 <_printf_float+0x130>
 8008a1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a20:	d118      	bne.n	8008a54 <_printf_float+0x1b0>
 8008a22:	2900      	cmp	r1, #0
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	dd0b      	ble.n	8008a40 <_printf_float+0x19c>
 8008a28:	6121      	str	r1, [r4, #16]
 8008a2a:	b913      	cbnz	r3, 8008a32 <_printf_float+0x18e>
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	07d0      	lsls	r0, r2, #31
 8008a30:	d502      	bpl.n	8008a38 <_printf_float+0x194>
 8008a32:	3301      	adds	r3, #1
 8008a34:	440b      	add	r3, r1
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a3a:	f04f 0900 	mov.w	r9, #0
 8008a3e:	e7db      	b.n	80089f8 <_printf_float+0x154>
 8008a40:	b913      	cbnz	r3, 8008a48 <_printf_float+0x1a4>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	07d2      	lsls	r2, r2, #31
 8008a46:	d501      	bpl.n	8008a4c <_printf_float+0x1a8>
 8008a48:	3302      	adds	r3, #2
 8008a4a:	e7f4      	b.n	8008a36 <_printf_float+0x192>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e7f2      	b.n	8008a36 <_printf_float+0x192>
 8008a50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a56:	4299      	cmp	r1, r3
 8008a58:	db05      	blt.n	8008a66 <_printf_float+0x1c2>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	6121      	str	r1, [r4, #16]
 8008a5e:	07d8      	lsls	r0, r3, #31
 8008a60:	d5ea      	bpl.n	8008a38 <_printf_float+0x194>
 8008a62:	1c4b      	adds	r3, r1, #1
 8008a64:	e7e7      	b.n	8008a36 <_printf_float+0x192>
 8008a66:	2900      	cmp	r1, #0
 8008a68:	bfd4      	ite	le
 8008a6a:	f1c1 0202 	rsble	r2, r1, #2
 8008a6e:	2201      	movgt	r2, #1
 8008a70:	4413      	add	r3, r2
 8008a72:	e7e0      	b.n	8008a36 <_printf_float+0x192>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	055a      	lsls	r2, r3, #21
 8008a78:	d407      	bmi.n	8008a8a <_printf_float+0x1e6>
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	4642      	mov	r2, r8
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	d12b      	bne.n	8008ae0 <_printf_float+0x23c>
 8008a88:	e767      	b.n	800895a <_printf_float+0xb6>
 8008a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a8e:	f240 80dd 	bls.w	8008c4c <_printf_float+0x3a8>
 8008a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f7f8 f81f 	bl	8000adc <__aeabi_dcmpeq>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d033      	beq.n	8008b0a <_printf_float+0x266>
 8008aa2:	4a37      	ldr	r2, [pc, #220]	@ (8008b80 <_printf_float+0x2dc>)
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f af54 	beq.w	800895a <_printf_float+0xb6>
 8008ab2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ab6:	4543      	cmp	r3, r8
 8008ab8:	db02      	blt.n	8008ac0 <_printf_float+0x21c>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	07d8      	lsls	r0, r3, #31
 8008abe:	d50f      	bpl.n	8008ae0 <_printf_float+0x23c>
 8008ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f af45 	beq.w	800895a <_printf_float+0xb6>
 8008ad0:	f04f 0900 	mov.w	r9, #0
 8008ad4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008ad8:	f104 0a1a 	add.w	sl, r4, #26
 8008adc:	45c8      	cmp	r8, r9
 8008ade:	dc09      	bgt.n	8008af4 <_printf_float+0x250>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	079b      	lsls	r3, r3, #30
 8008ae4:	f100 8103 	bmi.w	8008cee <_printf_float+0x44a>
 8008ae8:	68e0      	ldr	r0, [r4, #12]
 8008aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aec:	4298      	cmp	r0, r3
 8008aee:	bfb8      	it	lt
 8008af0:	4618      	movlt	r0, r3
 8008af2:	e734      	b.n	800895e <_printf_float+0xba>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4652      	mov	r2, sl
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f af2b 	beq.w	800895a <_printf_float+0xb6>
 8008b04:	f109 0901 	add.w	r9, r9, #1
 8008b08:	e7e8      	b.n	8008adc <_printf_float+0x238>
 8008b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dc39      	bgt.n	8008b84 <_printf_float+0x2e0>
 8008b10:	4a1b      	ldr	r2, [pc, #108]	@ (8008b80 <_printf_float+0x2dc>)
 8008b12:	2301      	movs	r3, #1
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f43f af1d 	beq.w	800895a <_printf_float+0xb6>
 8008b20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b24:	ea59 0303 	orrs.w	r3, r9, r3
 8008b28:	d102      	bne.n	8008b30 <_printf_float+0x28c>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	07d9      	lsls	r1, r3, #31
 8008b2e:	d5d7      	bpl.n	8008ae0 <_printf_float+0x23c>
 8008b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	f43f af0d 	beq.w	800895a <_printf_float+0xb6>
 8008b40:	f04f 0a00 	mov.w	sl, #0
 8008b44:	f104 0b1a 	add.w	fp, r4, #26
 8008b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	4553      	cmp	r3, sl
 8008b4e:	dc01      	bgt.n	8008b54 <_printf_float+0x2b0>
 8008b50:	464b      	mov	r3, r9
 8008b52:	e793      	b.n	8008a7c <_printf_float+0x1d8>
 8008b54:	2301      	movs	r3, #1
 8008b56:	465a      	mov	r2, fp
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f aefb 	beq.w	800895a <_printf_float+0xb6>
 8008b64:	f10a 0a01 	add.w	sl, sl, #1
 8008b68:	e7ee      	b.n	8008b48 <_printf_float+0x2a4>
 8008b6a:	bf00      	nop
 8008b6c:	7fefffff 	.word	0x7fefffff
 8008b70:	0800c550 	.word	0x0800c550
 8008b74:	0800c554 	.word	0x0800c554
 8008b78:	0800c558 	.word	0x0800c558
 8008b7c:	0800c55c 	.word	0x0800c55c
 8008b80:	0800c560 	.word	0x0800c560
 8008b84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b8a:	4553      	cmp	r3, sl
 8008b8c:	bfa8      	it	ge
 8008b8e:	4653      	movge	r3, sl
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	4699      	mov	r9, r3
 8008b94:	dc36      	bgt.n	8008c04 <_printf_float+0x360>
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b9e:	f104 021a 	add.w	r2, r4, #26
 8008ba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ba4:	9306      	str	r3, [sp, #24]
 8008ba6:	eba3 0309 	sub.w	r3, r3, r9
 8008baa:	455b      	cmp	r3, fp
 8008bac:	dc31      	bgt.n	8008c12 <_printf_float+0x36e>
 8008bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb0:	459a      	cmp	sl, r3
 8008bb2:	dc3a      	bgt.n	8008c2a <_printf_float+0x386>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	07da      	lsls	r2, r3, #31
 8008bb8:	d437      	bmi.n	8008c2a <_printf_float+0x386>
 8008bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bbc:	ebaa 0903 	sub.w	r9, sl, r3
 8008bc0:	9b06      	ldr	r3, [sp, #24]
 8008bc2:	ebaa 0303 	sub.w	r3, sl, r3
 8008bc6:	4599      	cmp	r9, r3
 8008bc8:	bfa8      	it	ge
 8008bca:	4699      	movge	r9, r3
 8008bcc:	f1b9 0f00 	cmp.w	r9, #0
 8008bd0:	dc33      	bgt.n	8008c3a <_printf_float+0x396>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bda:	f104 0b1a 	add.w	fp, r4, #26
 8008bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be0:	ebaa 0303 	sub.w	r3, sl, r3
 8008be4:	eba3 0309 	sub.w	r3, r3, r9
 8008be8:	4543      	cmp	r3, r8
 8008bea:	f77f af79 	ble.w	8008ae0 <_printf_float+0x23c>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	465a      	mov	r2, fp
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b8      	blx	r7
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f43f aeae 	beq.w	800895a <_printf_float+0xb6>
 8008bfe:	f108 0801 	add.w	r8, r8, #1
 8008c02:	e7ec      	b.n	8008bde <_printf_float+0x33a>
 8008c04:	4642      	mov	r2, r8
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d1c2      	bne.n	8008b96 <_printf_float+0x2f2>
 8008c10:	e6a3      	b.n	800895a <_printf_float+0xb6>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	9206      	str	r2, [sp, #24]
 8008c1a:	47b8      	blx	r7
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f43f ae9c 	beq.w	800895a <_printf_float+0xb6>
 8008c22:	9a06      	ldr	r2, [sp, #24]
 8008c24:	f10b 0b01 	add.w	fp, fp, #1
 8008c28:	e7bb      	b.n	8008ba2 <_printf_float+0x2fe>
 8008c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	d1c0      	bne.n	8008bba <_printf_float+0x316>
 8008c38:	e68f      	b.n	800895a <_printf_float+0xb6>
 8008c3a:	9a06      	ldr	r2, [sp, #24]
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	4442      	add	r2, r8
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	d1c3      	bne.n	8008bd2 <_printf_float+0x32e>
 8008c4a:	e686      	b.n	800895a <_printf_float+0xb6>
 8008c4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c50:	f1ba 0f01 	cmp.w	sl, #1
 8008c54:	dc01      	bgt.n	8008c5a <_printf_float+0x3b6>
 8008c56:	07db      	lsls	r3, r3, #31
 8008c58:	d536      	bpl.n	8008cc8 <_printf_float+0x424>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f ae78 	beq.w	800895a <_printf_float+0xb6>
 8008c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f ae70 	beq.w	800895a <_printf_float+0xb6>
 8008c7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2300      	movs	r3, #0
 8008c82:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c86:	f7f7 ff29 	bl	8000adc <__aeabi_dcmpeq>
 8008c8a:	b9c0      	cbnz	r0, 8008cbe <_printf_float+0x41a>
 8008c8c:	4653      	mov	r3, sl
 8008c8e:	f108 0201 	add.w	r2, r8, #1
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d10c      	bne.n	8008cb6 <_printf_float+0x412>
 8008c9c:	e65d      	b.n	800895a <_printf_float+0xb6>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	465a      	mov	r2, fp
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f43f ae56 	beq.w	800895a <_printf_float+0xb6>
 8008cae:	f108 0801 	add.w	r8, r8, #1
 8008cb2:	45d0      	cmp	r8, sl
 8008cb4:	dbf3      	blt.n	8008c9e <_printf_float+0x3fa>
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cbc:	e6df      	b.n	8008a7e <_printf_float+0x1da>
 8008cbe:	f04f 0800 	mov.w	r8, #0
 8008cc2:	f104 0b1a 	add.w	fp, r4, #26
 8008cc6:	e7f4      	b.n	8008cb2 <_printf_float+0x40e>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	4642      	mov	r2, r8
 8008ccc:	e7e1      	b.n	8008c92 <_printf_float+0x3ee>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	464a      	mov	r2, r9
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f ae3e 	beq.w	800895a <_printf_float+0xb6>
 8008cde:	f108 0801 	add.w	r8, r8, #1
 8008ce2:	68e3      	ldr	r3, [r4, #12]
 8008ce4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ce6:	1a5b      	subs	r3, r3, r1
 8008ce8:	4543      	cmp	r3, r8
 8008cea:	dcf0      	bgt.n	8008cce <_printf_float+0x42a>
 8008cec:	e6fc      	b.n	8008ae8 <_printf_float+0x244>
 8008cee:	f04f 0800 	mov.w	r8, #0
 8008cf2:	f104 0919 	add.w	r9, r4, #25
 8008cf6:	e7f4      	b.n	8008ce2 <_printf_float+0x43e>

08008cf8 <_printf_common>:
 8008cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	4698      	mov	r8, r3
 8008d00:	688a      	ldr	r2, [r1, #8]
 8008d02:	690b      	ldr	r3, [r1, #16]
 8008d04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bfb8      	it	lt
 8008d0c:	4613      	movlt	r3, r2
 8008d0e:	6033      	str	r3, [r6, #0]
 8008d10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d14:	4607      	mov	r7, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	b10a      	cbz	r2, 8008d1e <_printf_common+0x26>
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	6033      	str	r3, [r6, #0]
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	0699      	lsls	r1, r3, #26
 8008d22:	bf42      	ittt	mi
 8008d24:	6833      	ldrmi	r3, [r6, #0]
 8008d26:	3302      	addmi	r3, #2
 8008d28:	6033      	strmi	r3, [r6, #0]
 8008d2a:	6825      	ldr	r5, [r4, #0]
 8008d2c:	f015 0506 	ands.w	r5, r5, #6
 8008d30:	d106      	bne.n	8008d40 <_printf_common+0x48>
 8008d32:	f104 0a19 	add.w	sl, r4, #25
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	6832      	ldr	r2, [r6, #0]
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	dc26      	bgt.n	8008d8e <_printf_common+0x96>
 8008d40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d44:	6822      	ldr	r2, [r4, #0]
 8008d46:	3b00      	subs	r3, #0
 8008d48:	bf18      	it	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	0692      	lsls	r2, r2, #26
 8008d4e:	d42b      	bmi.n	8008da8 <_printf_common+0xb0>
 8008d50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d54:	4641      	mov	r1, r8
 8008d56:	4638      	mov	r0, r7
 8008d58:	47c8      	blx	r9
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d01e      	beq.n	8008d9c <_printf_common+0xa4>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	6922      	ldr	r2, [r4, #16]
 8008d62:	f003 0306 	and.w	r3, r3, #6
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	bf02      	ittt	eq
 8008d6a:	68e5      	ldreq	r5, [r4, #12]
 8008d6c:	6833      	ldreq	r3, [r6, #0]
 8008d6e:	1aed      	subeq	r5, r5, r3
 8008d70:	68a3      	ldr	r3, [r4, #8]
 8008d72:	bf0c      	ite	eq
 8008d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d78:	2500      	movne	r5, #0
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	bfc4      	itt	gt
 8008d7e:	1a9b      	subgt	r3, r3, r2
 8008d80:	18ed      	addgt	r5, r5, r3
 8008d82:	2600      	movs	r6, #0
 8008d84:	341a      	adds	r4, #26
 8008d86:	42b5      	cmp	r5, r6
 8008d88:	d11a      	bne.n	8008dc0 <_printf_common+0xc8>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e008      	b.n	8008da0 <_printf_common+0xa8>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4652      	mov	r2, sl
 8008d92:	4641      	mov	r1, r8
 8008d94:	4638      	mov	r0, r7
 8008d96:	47c8      	blx	r9
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d103      	bne.n	8008da4 <_printf_common+0xac>
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da4:	3501      	adds	r5, #1
 8008da6:	e7c6      	b.n	8008d36 <_printf_common+0x3e>
 8008da8:	18e1      	adds	r1, r4, r3
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	2030      	movs	r0, #48	@ 0x30
 8008dae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008db2:	4422      	add	r2, r4
 8008db4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008db8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	e7c7      	b.n	8008d50 <_printf_common+0x58>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	4641      	mov	r1, r8
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	47c8      	blx	r9
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d0e6      	beq.n	8008d9c <_printf_common+0xa4>
 8008dce:	3601      	adds	r6, #1
 8008dd0:	e7d9      	b.n	8008d86 <_printf_common+0x8e>
	...

08008dd4 <_printf_i>:
 8008dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	7e0f      	ldrb	r7, [r1, #24]
 8008dda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ddc:	2f78      	cmp	r7, #120	@ 0x78
 8008dde:	4691      	mov	r9, r2
 8008de0:	4680      	mov	r8, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	469a      	mov	sl, r3
 8008de6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dea:	d807      	bhi.n	8008dfc <_printf_i+0x28>
 8008dec:	2f62      	cmp	r7, #98	@ 0x62
 8008dee:	d80a      	bhi.n	8008e06 <_printf_i+0x32>
 8008df0:	2f00      	cmp	r7, #0
 8008df2:	f000 80d2 	beq.w	8008f9a <_printf_i+0x1c6>
 8008df6:	2f58      	cmp	r7, #88	@ 0x58
 8008df8:	f000 80b9 	beq.w	8008f6e <_printf_i+0x19a>
 8008dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e04:	e03a      	b.n	8008e7c <_printf_i+0xa8>
 8008e06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e0a:	2b15      	cmp	r3, #21
 8008e0c:	d8f6      	bhi.n	8008dfc <_printf_i+0x28>
 8008e0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e14 <_printf_i+0x40>)
 8008e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008dfd 	.word	0x08008dfd
 8008e20:	08008dfd 	.word	0x08008dfd
 8008e24:	08008dfd 	.word	0x08008dfd
 8008e28:	08008dfd 	.word	0x08008dfd
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008dfd 	.word	0x08008dfd
 8008e34:	08008dfd 	.word	0x08008dfd
 8008e38:	08008dfd 	.word	0x08008dfd
 8008e3c:	08008dfd 	.word	0x08008dfd
 8008e40:	08008f81 	.word	0x08008f81
 8008e44:	08008eab 	.word	0x08008eab
 8008e48:	08008f3b 	.word	0x08008f3b
 8008e4c:	08008dfd 	.word	0x08008dfd
 8008e50:	08008dfd 	.word	0x08008dfd
 8008e54:	08008fa3 	.word	0x08008fa3
 8008e58:	08008dfd 	.word	0x08008dfd
 8008e5c:	08008eab 	.word	0x08008eab
 8008e60:	08008dfd 	.word	0x08008dfd
 8008e64:	08008dfd 	.word	0x08008dfd
 8008e68:	08008f43 	.word	0x08008f43
 8008e6c:	6833      	ldr	r3, [r6, #0]
 8008e6e:	1d1a      	adds	r2, r3, #4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6032      	str	r2, [r6, #0]
 8008e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e09d      	b.n	8008fbc <_printf_i+0x1e8>
 8008e80:	6833      	ldr	r3, [r6, #0]
 8008e82:	6820      	ldr	r0, [r4, #0]
 8008e84:	1d19      	adds	r1, r3, #4
 8008e86:	6031      	str	r1, [r6, #0]
 8008e88:	0606      	lsls	r6, r0, #24
 8008e8a:	d501      	bpl.n	8008e90 <_printf_i+0xbc>
 8008e8c:	681d      	ldr	r5, [r3, #0]
 8008e8e:	e003      	b.n	8008e98 <_printf_i+0xc4>
 8008e90:	0645      	lsls	r5, r0, #25
 8008e92:	d5fb      	bpl.n	8008e8c <_printf_i+0xb8>
 8008e94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	da03      	bge.n	8008ea4 <_printf_i+0xd0>
 8008e9c:	232d      	movs	r3, #45	@ 0x2d
 8008e9e:	426d      	negs	r5, r5
 8008ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ea4:	4859      	ldr	r0, [pc, #356]	@ (800900c <_printf_i+0x238>)
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	e011      	b.n	8008ece <_printf_i+0xfa>
 8008eaa:	6821      	ldr	r1, [r4, #0]
 8008eac:	6833      	ldr	r3, [r6, #0]
 8008eae:	0608      	lsls	r0, r1, #24
 8008eb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008eb4:	d402      	bmi.n	8008ebc <_printf_i+0xe8>
 8008eb6:	0649      	lsls	r1, r1, #25
 8008eb8:	bf48      	it	mi
 8008eba:	b2ad      	uxthmi	r5, r5
 8008ebc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ebe:	4853      	ldr	r0, [pc, #332]	@ (800900c <_printf_i+0x238>)
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	bf14      	ite	ne
 8008ec4:	230a      	movne	r3, #10
 8008ec6:	2308      	moveq	r3, #8
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ece:	6866      	ldr	r6, [r4, #4]
 8008ed0:	60a6      	str	r6, [r4, #8]
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	bfa2      	ittt	ge
 8008ed6:	6821      	ldrge	r1, [r4, #0]
 8008ed8:	f021 0104 	bicge.w	r1, r1, #4
 8008edc:	6021      	strge	r1, [r4, #0]
 8008ede:	b90d      	cbnz	r5, 8008ee4 <_printf_i+0x110>
 8008ee0:	2e00      	cmp	r6, #0
 8008ee2:	d04b      	beq.n	8008f7c <_printf_i+0x1a8>
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eea:	fb03 5711 	mls	r7, r3, r1, r5
 8008eee:	5dc7      	ldrb	r7, [r0, r7]
 8008ef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ef4:	462f      	mov	r7, r5
 8008ef6:	42bb      	cmp	r3, r7
 8008ef8:	460d      	mov	r5, r1
 8008efa:	d9f4      	bls.n	8008ee6 <_printf_i+0x112>
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d10b      	bne.n	8008f18 <_printf_i+0x144>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	07df      	lsls	r7, r3, #31
 8008f04:	d508      	bpl.n	8008f18 <_printf_i+0x144>
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	4299      	cmp	r1, r3
 8008f0c:	bfde      	ittt	le
 8008f0e:	2330      	movle	r3, #48	@ 0x30
 8008f10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f18:	1b92      	subs	r2, r2, r6
 8008f1a:	6122      	str	r2, [r4, #16]
 8008f1c:	f8cd a000 	str.w	sl, [sp]
 8008f20:	464b      	mov	r3, r9
 8008f22:	aa03      	add	r2, sp, #12
 8008f24:	4621      	mov	r1, r4
 8008f26:	4640      	mov	r0, r8
 8008f28:	f7ff fee6 	bl	8008cf8 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d14a      	bne.n	8008fc6 <_printf_i+0x1f2>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f34:	b004      	add	sp, #16
 8008f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	f043 0320 	orr.w	r3, r3, #32
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	4833      	ldr	r0, [pc, #204]	@ (8009010 <_printf_i+0x23c>)
 8008f44:	2778      	movs	r7, #120	@ 0x78
 8008f46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	6831      	ldr	r1, [r6, #0]
 8008f4e:	061f      	lsls	r7, r3, #24
 8008f50:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f54:	d402      	bmi.n	8008f5c <_printf_i+0x188>
 8008f56:	065f      	lsls	r7, r3, #25
 8008f58:	bf48      	it	mi
 8008f5a:	b2ad      	uxthmi	r5, r5
 8008f5c:	6031      	str	r1, [r6, #0]
 8008f5e:	07d9      	lsls	r1, r3, #31
 8008f60:	bf44      	itt	mi
 8008f62:	f043 0320 	orrmi.w	r3, r3, #32
 8008f66:	6023      	strmi	r3, [r4, #0]
 8008f68:	b11d      	cbz	r5, 8008f72 <_printf_i+0x19e>
 8008f6a:	2310      	movs	r3, #16
 8008f6c:	e7ac      	b.n	8008ec8 <_printf_i+0xf4>
 8008f6e:	4827      	ldr	r0, [pc, #156]	@ (800900c <_printf_i+0x238>)
 8008f70:	e7e9      	b.n	8008f46 <_printf_i+0x172>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f023 0320 	bic.w	r3, r3, #32
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	e7f6      	b.n	8008f6a <_printf_i+0x196>
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	e7bd      	b.n	8008efc <_printf_i+0x128>
 8008f80:	6833      	ldr	r3, [r6, #0]
 8008f82:	6825      	ldr	r5, [r4, #0]
 8008f84:	6961      	ldr	r1, [r4, #20]
 8008f86:	1d18      	adds	r0, r3, #4
 8008f88:	6030      	str	r0, [r6, #0]
 8008f8a:	062e      	lsls	r6, r5, #24
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	d501      	bpl.n	8008f94 <_printf_i+0x1c0>
 8008f90:	6019      	str	r1, [r3, #0]
 8008f92:	e002      	b.n	8008f9a <_printf_i+0x1c6>
 8008f94:	0668      	lsls	r0, r5, #25
 8008f96:	d5fb      	bpl.n	8008f90 <_printf_i+0x1bc>
 8008f98:	8019      	strh	r1, [r3, #0]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	4616      	mov	r6, r2
 8008fa0:	e7bc      	b.n	8008f1c <_printf_i+0x148>
 8008fa2:	6833      	ldr	r3, [r6, #0]
 8008fa4:	1d1a      	adds	r2, r3, #4
 8008fa6:	6032      	str	r2, [r6, #0]
 8008fa8:	681e      	ldr	r6, [r3, #0]
 8008faa:	6862      	ldr	r2, [r4, #4]
 8008fac:	2100      	movs	r1, #0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f7f7 f90e 	bl	80001d0 <memchr>
 8008fb4:	b108      	cbz	r0, 8008fba <_printf_i+0x1e6>
 8008fb6:	1b80      	subs	r0, r0, r6
 8008fb8:	6060      	str	r0, [r4, #4]
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	6123      	str	r3, [r4, #16]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc4:	e7aa      	b.n	8008f1c <_printf_i+0x148>
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	4632      	mov	r2, r6
 8008fca:	4649      	mov	r1, r9
 8008fcc:	4640      	mov	r0, r8
 8008fce:	47d0      	blx	sl
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d0ad      	beq.n	8008f30 <_printf_i+0x15c>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	079b      	lsls	r3, r3, #30
 8008fd8:	d413      	bmi.n	8009002 <_printf_i+0x22e>
 8008fda:	68e0      	ldr	r0, [r4, #12]
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	4298      	cmp	r0, r3
 8008fe0:	bfb8      	it	lt
 8008fe2:	4618      	movlt	r0, r3
 8008fe4:	e7a6      	b.n	8008f34 <_printf_i+0x160>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	4632      	mov	r2, r6
 8008fea:	4649      	mov	r1, r9
 8008fec:	4640      	mov	r0, r8
 8008fee:	47d0      	blx	sl
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d09d      	beq.n	8008f30 <_printf_i+0x15c>
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	68e3      	ldr	r3, [r4, #12]
 8008ff8:	9903      	ldr	r1, [sp, #12]
 8008ffa:	1a5b      	subs	r3, r3, r1
 8008ffc:	42ab      	cmp	r3, r5
 8008ffe:	dcf2      	bgt.n	8008fe6 <_printf_i+0x212>
 8009000:	e7eb      	b.n	8008fda <_printf_i+0x206>
 8009002:	2500      	movs	r5, #0
 8009004:	f104 0619 	add.w	r6, r4, #25
 8009008:	e7f5      	b.n	8008ff6 <_printf_i+0x222>
 800900a:	bf00      	nop
 800900c:	0800c562 	.word	0x0800c562
 8009010:	0800c573 	.word	0x0800c573

08009014 <sniprintf>:
 8009014:	b40c      	push	{r2, r3}
 8009016:	b530      	push	{r4, r5, lr}
 8009018:	4b17      	ldr	r3, [pc, #92]	@ (8009078 <sniprintf+0x64>)
 800901a:	1e0c      	subs	r4, r1, #0
 800901c:	681d      	ldr	r5, [r3, #0]
 800901e:	b09d      	sub	sp, #116	@ 0x74
 8009020:	da08      	bge.n	8009034 <sniprintf+0x20>
 8009022:	238b      	movs	r3, #139	@ 0x8b
 8009024:	602b      	str	r3, [r5, #0]
 8009026:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800902a:	b01d      	add	sp, #116	@ 0x74
 800902c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009030:	b002      	add	sp, #8
 8009032:	4770      	bx	lr
 8009034:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009038:	f8ad 3014 	strh.w	r3, [sp, #20]
 800903c:	bf14      	ite	ne
 800903e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009042:	4623      	moveq	r3, r4
 8009044:	9304      	str	r3, [sp, #16]
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800904c:	9002      	str	r0, [sp, #8]
 800904e:	9006      	str	r0, [sp, #24]
 8009050:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009054:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009056:	ab21      	add	r3, sp, #132	@ 0x84
 8009058:	a902      	add	r1, sp, #8
 800905a:	4628      	mov	r0, r5
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	f000 fffb 	bl	800a058 <_svfiprintf_r>
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	bfbc      	itt	lt
 8009066:	238b      	movlt	r3, #139	@ 0x8b
 8009068:	602b      	strlt	r3, [r5, #0]
 800906a:	2c00      	cmp	r4, #0
 800906c:	d0dd      	beq.n	800902a <sniprintf+0x16>
 800906e:	9b02      	ldr	r3, [sp, #8]
 8009070:	2200      	movs	r2, #0
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	e7d9      	b.n	800902a <sniprintf+0x16>
 8009076:	bf00      	nop
 8009078:	20000024 	.word	0x20000024

0800907c <std>:
 800907c:	2300      	movs	r3, #0
 800907e:	b510      	push	{r4, lr}
 8009080:	4604      	mov	r4, r0
 8009082:	e9c0 3300 	strd	r3, r3, [r0]
 8009086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800908a:	6083      	str	r3, [r0, #8]
 800908c:	8181      	strh	r1, [r0, #12]
 800908e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009090:	81c2      	strh	r2, [r0, #14]
 8009092:	6183      	str	r3, [r0, #24]
 8009094:	4619      	mov	r1, r3
 8009096:	2208      	movs	r2, #8
 8009098:	305c      	adds	r0, #92	@ 0x5c
 800909a:	f000 f8dd 	bl	8009258 <memset>
 800909e:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <std+0x58>)
 80090a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80090a2:	4b0d      	ldr	r3, [pc, #52]	@ (80090d8 <std+0x5c>)
 80090a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090a6:	4b0d      	ldr	r3, [pc, #52]	@ (80090dc <std+0x60>)
 80090a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090aa:	4b0d      	ldr	r3, [pc, #52]	@ (80090e0 <std+0x64>)
 80090ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80090ae:	4b0d      	ldr	r3, [pc, #52]	@ (80090e4 <std+0x68>)
 80090b0:	6224      	str	r4, [r4, #32]
 80090b2:	429c      	cmp	r4, r3
 80090b4:	d006      	beq.n	80090c4 <std+0x48>
 80090b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090ba:	4294      	cmp	r4, r2
 80090bc:	d002      	beq.n	80090c4 <std+0x48>
 80090be:	33d0      	adds	r3, #208	@ 0xd0
 80090c0:	429c      	cmp	r4, r3
 80090c2:	d105      	bne.n	80090d0 <std+0x54>
 80090c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090cc:	f000 b8fa 	b.w	80092c4 <__retarget_lock_init_recursive>
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	bf00      	nop
 80090d4:	0800ae9d 	.word	0x0800ae9d
 80090d8:	0800aebf 	.word	0x0800aebf
 80090dc:	0800aef7 	.word	0x0800aef7
 80090e0:	0800af1b 	.word	0x0800af1b
 80090e4:	200009b4 	.word	0x200009b4

080090e8 <stdio_exit_handler>:
 80090e8:	4a02      	ldr	r2, [pc, #8]	@ (80090f4 <stdio_exit_handler+0xc>)
 80090ea:	4903      	ldr	r1, [pc, #12]	@ (80090f8 <stdio_exit_handler+0x10>)
 80090ec:	4803      	ldr	r0, [pc, #12]	@ (80090fc <stdio_exit_handler+0x14>)
 80090ee:	f000 b87b 	b.w	80091e8 <_fwalk_sglue>
 80090f2:	bf00      	nop
 80090f4:	20000018 	.word	0x20000018
 80090f8:	0800a731 	.word	0x0800a731
 80090fc:	20000028 	.word	0x20000028

08009100 <cleanup_stdio>:
 8009100:	6841      	ldr	r1, [r0, #4]
 8009102:	4b0c      	ldr	r3, [pc, #48]	@ (8009134 <cleanup_stdio+0x34>)
 8009104:	4299      	cmp	r1, r3
 8009106:	b510      	push	{r4, lr}
 8009108:	4604      	mov	r4, r0
 800910a:	d001      	beq.n	8009110 <cleanup_stdio+0x10>
 800910c:	f001 fb10 	bl	800a730 <_fflush_r>
 8009110:	68a1      	ldr	r1, [r4, #8]
 8009112:	4b09      	ldr	r3, [pc, #36]	@ (8009138 <cleanup_stdio+0x38>)
 8009114:	4299      	cmp	r1, r3
 8009116:	d002      	beq.n	800911e <cleanup_stdio+0x1e>
 8009118:	4620      	mov	r0, r4
 800911a:	f001 fb09 	bl	800a730 <_fflush_r>
 800911e:	68e1      	ldr	r1, [r4, #12]
 8009120:	4b06      	ldr	r3, [pc, #24]	@ (800913c <cleanup_stdio+0x3c>)
 8009122:	4299      	cmp	r1, r3
 8009124:	d004      	beq.n	8009130 <cleanup_stdio+0x30>
 8009126:	4620      	mov	r0, r4
 8009128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912c:	f001 bb00 	b.w	800a730 <_fflush_r>
 8009130:	bd10      	pop	{r4, pc}
 8009132:	bf00      	nop
 8009134:	200009b4 	.word	0x200009b4
 8009138:	20000a1c 	.word	0x20000a1c
 800913c:	20000a84 	.word	0x20000a84

08009140 <global_stdio_init.part.0>:
 8009140:	b510      	push	{r4, lr}
 8009142:	4b0b      	ldr	r3, [pc, #44]	@ (8009170 <global_stdio_init.part.0+0x30>)
 8009144:	4c0b      	ldr	r4, [pc, #44]	@ (8009174 <global_stdio_init.part.0+0x34>)
 8009146:	4a0c      	ldr	r2, [pc, #48]	@ (8009178 <global_stdio_init.part.0+0x38>)
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	4620      	mov	r0, r4
 800914c:	2200      	movs	r2, #0
 800914e:	2104      	movs	r1, #4
 8009150:	f7ff ff94 	bl	800907c <std>
 8009154:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009158:	2201      	movs	r2, #1
 800915a:	2109      	movs	r1, #9
 800915c:	f7ff ff8e 	bl	800907c <std>
 8009160:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009164:	2202      	movs	r2, #2
 8009166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800916a:	2112      	movs	r1, #18
 800916c:	f7ff bf86 	b.w	800907c <std>
 8009170:	20000aec 	.word	0x20000aec
 8009174:	200009b4 	.word	0x200009b4
 8009178:	080090e9 	.word	0x080090e9

0800917c <__sfp_lock_acquire>:
 800917c:	4801      	ldr	r0, [pc, #4]	@ (8009184 <__sfp_lock_acquire+0x8>)
 800917e:	f000 b8a2 	b.w	80092c6 <__retarget_lock_acquire_recursive>
 8009182:	bf00      	nop
 8009184:	20000af1 	.word	0x20000af1

08009188 <__sfp_lock_release>:
 8009188:	4801      	ldr	r0, [pc, #4]	@ (8009190 <__sfp_lock_release+0x8>)
 800918a:	f000 b89d 	b.w	80092c8 <__retarget_lock_release_recursive>
 800918e:	bf00      	nop
 8009190:	20000af1 	.word	0x20000af1

08009194 <__sinit>:
 8009194:	b510      	push	{r4, lr}
 8009196:	4604      	mov	r4, r0
 8009198:	f7ff fff0 	bl	800917c <__sfp_lock_acquire>
 800919c:	6a23      	ldr	r3, [r4, #32]
 800919e:	b11b      	cbz	r3, 80091a8 <__sinit+0x14>
 80091a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a4:	f7ff bff0 	b.w	8009188 <__sfp_lock_release>
 80091a8:	4b04      	ldr	r3, [pc, #16]	@ (80091bc <__sinit+0x28>)
 80091aa:	6223      	str	r3, [r4, #32]
 80091ac:	4b04      	ldr	r3, [pc, #16]	@ (80091c0 <__sinit+0x2c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1f5      	bne.n	80091a0 <__sinit+0xc>
 80091b4:	f7ff ffc4 	bl	8009140 <global_stdio_init.part.0>
 80091b8:	e7f2      	b.n	80091a0 <__sinit+0xc>
 80091ba:	bf00      	nop
 80091bc:	08009101 	.word	0x08009101
 80091c0:	20000aec 	.word	0x20000aec

080091c4 <fiprintf>:
 80091c4:	b40e      	push	{r1, r2, r3}
 80091c6:	b503      	push	{r0, r1, lr}
 80091c8:	4601      	mov	r1, r0
 80091ca:	ab03      	add	r3, sp, #12
 80091cc:	4805      	ldr	r0, [pc, #20]	@ (80091e4 <fiprintf+0x20>)
 80091ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d2:	6800      	ldr	r0, [r0, #0]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	f001 f865 	bl	800a2a4 <_vfiprintf_r>
 80091da:	b002      	add	sp, #8
 80091dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e0:	b003      	add	sp, #12
 80091e2:	4770      	bx	lr
 80091e4:	20000024 	.word	0x20000024

080091e8 <_fwalk_sglue>:
 80091e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ec:	4607      	mov	r7, r0
 80091ee:	4688      	mov	r8, r1
 80091f0:	4614      	mov	r4, r2
 80091f2:	2600      	movs	r6, #0
 80091f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091f8:	f1b9 0901 	subs.w	r9, r9, #1
 80091fc:	d505      	bpl.n	800920a <_fwalk_sglue+0x22>
 80091fe:	6824      	ldr	r4, [r4, #0]
 8009200:	2c00      	cmp	r4, #0
 8009202:	d1f7      	bne.n	80091f4 <_fwalk_sglue+0xc>
 8009204:	4630      	mov	r0, r6
 8009206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920a:	89ab      	ldrh	r3, [r5, #12]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d907      	bls.n	8009220 <_fwalk_sglue+0x38>
 8009210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009214:	3301      	adds	r3, #1
 8009216:	d003      	beq.n	8009220 <_fwalk_sglue+0x38>
 8009218:	4629      	mov	r1, r5
 800921a:	4638      	mov	r0, r7
 800921c:	47c0      	blx	r8
 800921e:	4306      	orrs	r6, r0
 8009220:	3568      	adds	r5, #104	@ 0x68
 8009222:	e7e9      	b.n	80091f8 <_fwalk_sglue+0x10>

08009224 <memmove>:
 8009224:	4288      	cmp	r0, r1
 8009226:	b510      	push	{r4, lr}
 8009228:	eb01 0402 	add.w	r4, r1, r2
 800922c:	d902      	bls.n	8009234 <memmove+0x10>
 800922e:	4284      	cmp	r4, r0
 8009230:	4623      	mov	r3, r4
 8009232:	d807      	bhi.n	8009244 <memmove+0x20>
 8009234:	1e43      	subs	r3, r0, #1
 8009236:	42a1      	cmp	r1, r4
 8009238:	d008      	beq.n	800924c <memmove+0x28>
 800923a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800923e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009242:	e7f8      	b.n	8009236 <memmove+0x12>
 8009244:	4402      	add	r2, r0
 8009246:	4601      	mov	r1, r0
 8009248:	428a      	cmp	r2, r1
 800924a:	d100      	bne.n	800924e <memmove+0x2a>
 800924c:	bd10      	pop	{r4, pc}
 800924e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009256:	e7f7      	b.n	8009248 <memmove+0x24>

08009258 <memset>:
 8009258:	4402      	add	r2, r0
 800925a:	4603      	mov	r3, r0
 800925c:	4293      	cmp	r3, r2
 800925e:	d100      	bne.n	8009262 <memset+0xa>
 8009260:	4770      	bx	lr
 8009262:	f803 1b01 	strb.w	r1, [r3], #1
 8009266:	e7f9      	b.n	800925c <memset+0x4>

08009268 <_localeconv_r>:
 8009268:	4800      	ldr	r0, [pc, #0]	@ (800926c <_localeconv_r+0x4>)
 800926a:	4770      	bx	lr
 800926c:	20000164 	.word	0x20000164

08009270 <__errno>:
 8009270:	4b01      	ldr	r3, [pc, #4]	@ (8009278 <__errno+0x8>)
 8009272:	6818      	ldr	r0, [r3, #0]
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	20000024 	.word	0x20000024

0800927c <__libc_init_array>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4d0d      	ldr	r5, [pc, #52]	@ (80092b4 <__libc_init_array+0x38>)
 8009280:	4c0d      	ldr	r4, [pc, #52]	@ (80092b8 <__libc_init_array+0x3c>)
 8009282:	1b64      	subs	r4, r4, r5
 8009284:	10a4      	asrs	r4, r4, #2
 8009286:	2600      	movs	r6, #0
 8009288:	42a6      	cmp	r6, r4
 800928a:	d109      	bne.n	80092a0 <__libc_init_array+0x24>
 800928c:	4d0b      	ldr	r5, [pc, #44]	@ (80092bc <__libc_init_array+0x40>)
 800928e:	4c0c      	ldr	r4, [pc, #48]	@ (80092c0 <__libc_init_array+0x44>)
 8009290:	f002 f8ae 	bl	800b3f0 <_init>
 8009294:	1b64      	subs	r4, r4, r5
 8009296:	10a4      	asrs	r4, r4, #2
 8009298:	2600      	movs	r6, #0
 800929a:	42a6      	cmp	r6, r4
 800929c:	d105      	bne.n	80092aa <__libc_init_array+0x2e>
 800929e:	bd70      	pop	{r4, r5, r6, pc}
 80092a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a4:	4798      	blx	r3
 80092a6:	3601      	adds	r6, #1
 80092a8:	e7ee      	b.n	8009288 <__libc_init_array+0xc>
 80092aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ae:	4798      	blx	r3
 80092b0:	3601      	adds	r6, #1
 80092b2:	e7f2      	b.n	800929a <__libc_init_array+0x1e>
 80092b4:	0800c88c 	.word	0x0800c88c
 80092b8:	0800c88c 	.word	0x0800c88c
 80092bc:	0800c88c 	.word	0x0800c88c
 80092c0:	0800c890 	.word	0x0800c890

080092c4 <__retarget_lock_init_recursive>:
 80092c4:	4770      	bx	lr

080092c6 <__retarget_lock_acquire_recursive>:
 80092c6:	4770      	bx	lr

080092c8 <__retarget_lock_release_recursive>:
 80092c8:	4770      	bx	lr

080092ca <memcpy>:
 80092ca:	440a      	add	r2, r1
 80092cc:	4291      	cmp	r1, r2
 80092ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092d2:	d100      	bne.n	80092d6 <memcpy+0xc>
 80092d4:	4770      	bx	lr
 80092d6:	b510      	push	{r4, lr}
 80092d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092e0:	4291      	cmp	r1, r2
 80092e2:	d1f9      	bne.n	80092d8 <memcpy+0xe>
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <strcpy>:
 80092e6:	4603      	mov	r3, r0
 80092e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ec:	f803 2b01 	strb.w	r2, [r3], #1
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	d1f9      	bne.n	80092e8 <strcpy+0x2>
 80092f4:	4770      	bx	lr

080092f6 <abort>:
 80092f6:	b508      	push	{r3, lr}
 80092f8:	2006      	movs	r0, #6
 80092fa:	f001 ffa3 	bl	800b244 <raise>
 80092fe:	2001      	movs	r0, #1
 8009300:	f7f8 fe54 	bl	8001fac <_exit>

08009304 <quorem>:
 8009304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	6903      	ldr	r3, [r0, #16]
 800930a:	690c      	ldr	r4, [r1, #16]
 800930c:	42a3      	cmp	r3, r4
 800930e:	4607      	mov	r7, r0
 8009310:	db7e      	blt.n	8009410 <quorem+0x10c>
 8009312:	3c01      	subs	r4, #1
 8009314:	f101 0814 	add.w	r8, r1, #20
 8009318:	00a3      	lsls	r3, r4, #2
 800931a:	f100 0514 	add.w	r5, r0, #20
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800932a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800932e:	3301      	adds	r3, #1
 8009330:	429a      	cmp	r2, r3
 8009332:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009336:	fbb2 f6f3 	udiv	r6, r2, r3
 800933a:	d32e      	bcc.n	800939a <quorem+0x96>
 800933c:	f04f 0a00 	mov.w	sl, #0
 8009340:	46c4      	mov	ip, r8
 8009342:	46ae      	mov	lr, r5
 8009344:	46d3      	mov	fp, sl
 8009346:	f85c 3b04 	ldr.w	r3, [ip], #4
 800934a:	b298      	uxth	r0, r3
 800934c:	fb06 a000 	mla	r0, r6, r0, sl
 8009350:	0c02      	lsrs	r2, r0, #16
 8009352:	0c1b      	lsrs	r3, r3, #16
 8009354:	fb06 2303 	mla	r3, r6, r3, r2
 8009358:	f8de 2000 	ldr.w	r2, [lr]
 800935c:	b280      	uxth	r0, r0
 800935e:	b292      	uxth	r2, r2
 8009360:	1a12      	subs	r2, r2, r0
 8009362:	445a      	add	r2, fp
 8009364:	f8de 0000 	ldr.w	r0, [lr]
 8009368:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800936c:	b29b      	uxth	r3, r3
 800936e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009372:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009376:	b292      	uxth	r2, r2
 8009378:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800937c:	45e1      	cmp	r9, ip
 800937e:	f84e 2b04 	str.w	r2, [lr], #4
 8009382:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009386:	d2de      	bcs.n	8009346 <quorem+0x42>
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	58eb      	ldr	r3, [r5, r3]
 800938c:	b92b      	cbnz	r3, 800939a <quorem+0x96>
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	3b04      	subs	r3, #4
 8009392:	429d      	cmp	r5, r3
 8009394:	461a      	mov	r2, r3
 8009396:	d32f      	bcc.n	80093f8 <quorem+0xf4>
 8009398:	613c      	str	r4, [r7, #16]
 800939a:	4638      	mov	r0, r7
 800939c:	f001 fc76 	bl	800ac8c <__mcmp>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	db25      	blt.n	80093f0 <quorem+0xec>
 80093a4:	4629      	mov	r1, r5
 80093a6:	2000      	movs	r0, #0
 80093a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80093ac:	f8d1 c000 	ldr.w	ip, [r1]
 80093b0:	fa1f fe82 	uxth.w	lr, r2
 80093b4:	fa1f f38c 	uxth.w	r3, ip
 80093b8:	eba3 030e 	sub.w	r3, r3, lr
 80093bc:	4403      	add	r3, r0
 80093be:	0c12      	lsrs	r2, r2, #16
 80093c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ce:	45c1      	cmp	r9, r8
 80093d0:	f841 3b04 	str.w	r3, [r1], #4
 80093d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093d8:	d2e6      	bcs.n	80093a8 <quorem+0xa4>
 80093da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093e2:	b922      	cbnz	r2, 80093ee <quorem+0xea>
 80093e4:	3b04      	subs	r3, #4
 80093e6:	429d      	cmp	r5, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	d30b      	bcc.n	8009404 <quorem+0x100>
 80093ec:	613c      	str	r4, [r7, #16]
 80093ee:	3601      	adds	r6, #1
 80093f0:	4630      	mov	r0, r6
 80093f2:	b003      	add	sp, #12
 80093f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f8:	6812      	ldr	r2, [r2, #0]
 80093fa:	3b04      	subs	r3, #4
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	d1cb      	bne.n	8009398 <quorem+0x94>
 8009400:	3c01      	subs	r4, #1
 8009402:	e7c6      	b.n	8009392 <quorem+0x8e>
 8009404:	6812      	ldr	r2, [r2, #0]
 8009406:	3b04      	subs	r3, #4
 8009408:	2a00      	cmp	r2, #0
 800940a:	d1ef      	bne.n	80093ec <quorem+0xe8>
 800940c:	3c01      	subs	r4, #1
 800940e:	e7ea      	b.n	80093e6 <quorem+0xe2>
 8009410:	2000      	movs	r0, #0
 8009412:	e7ee      	b.n	80093f2 <quorem+0xee>
 8009414:	0000      	movs	r0, r0
	...

08009418 <_dtoa_r>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	69c7      	ldr	r7, [r0, #28]
 800941e:	b099      	sub	sp, #100	@ 0x64
 8009420:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009424:	ec55 4b10 	vmov	r4, r5, d0
 8009428:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800942a:	9109      	str	r1, [sp, #36]	@ 0x24
 800942c:	4683      	mov	fp, r0
 800942e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009430:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009432:	b97f      	cbnz	r7, 8009454 <_dtoa_r+0x3c>
 8009434:	2010      	movs	r0, #16
 8009436:	f001 f84d 	bl	800a4d4 <malloc>
 800943a:	4602      	mov	r2, r0
 800943c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009440:	b920      	cbnz	r0, 800944c <_dtoa_r+0x34>
 8009442:	4ba7      	ldr	r3, [pc, #668]	@ (80096e0 <_dtoa_r+0x2c8>)
 8009444:	21ef      	movs	r1, #239	@ 0xef
 8009446:	48a7      	ldr	r0, [pc, #668]	@ (80096e4 <_dtoa_r+0x2cc>)
 8009448:	f7ff f96e 	bl	8008728 <__assert_func>
 800944c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009450:	6007      	str	r7, [r0, #0]
 8009452:	60c7      	str	r7, [r0, #12]
 8009454:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009458:	6819      	ldr	r1, [r3, #0]
 800945a:	b159      	cbz	r1, 8009474 <_dtoa_r+0x5c>
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	604a      	str	r2, [r1, #4]
 8009460:	2301      	movs	r3, #1
 8009462:	4093      	lsls	r3, r2
 8009464:	608b      	str	r3, [r1, #8]
 8009466:	4658      	mov	r0, fp
 8009468:	f001 f9d6 	bl	800a818 <_Bfree>
 800946c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	1e2b      	subs	r3, r5, #0
 8009476:	bfb9      	ittee	lt
 8009478:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800947c:	9303      	strlt	r3, [sp, #12]
 800947e:	2300      	movge	r3, #0
 8009480:	6033      	strge	r3, [r6, #0]
 8009482:	9f03      	ldr	r7, [sp, #12]
 8009484:	4b98      	ldr	r3, [pc, #608]	@ (80096e8 <_dtoa_r+0x2d0>)
 8009486:	bfbc      	itt	lt
 8009488:	2201      	movlt	r2, #1
 800948a:	6032      	strlt	r2, [r6, #0]
 800948c:	43bb      	bics	r3, r7
 800948e:	d112      	bne.n	80094b6 <_dtoa_r+0x9e>
 8009490:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009492:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800949c:	4323      	orrs	r3, r4
 800949e:	f000 854d 	beq.w	8009f3c <_dtoa_r+0xb24>
 80094a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80096fc <_dtoa_r+0x2e4>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 854f 	beq.w	8009f4c <_dtoa_r+0xb34>
 80094ae:	f10a 0303 	add.w	r3, sl, #3
 80094b2:	f000 bd49 	b.w	8009f48 <_dtoa_r+0xb30>
 80094b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094ba:	2200      	movs	r2, #0
 80094bc:	ec51 0b17 	vmov	r0, r1, d7
 80094c0:	2300      	movs	r3, #0
 80094c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80094c6:	f7f7 fb09 	bl	8000adc <__aeabi_dcmpeq>
 80094ca:	4680      	mov	r8, r0
 80094cc:	b158      	cbz	r0, 80094e6 <_dtoa_r+0xce>
 80094ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094d0:	2301      	movs	r3, #1
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094d6:	b113      	cbz	r3, 80094de <_dtoa_r+0xc6>
 80094d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094da:	4b84      	ldr	r3, [pc, #528]	@ (80096ec <_dtoa_r+0x2d4>)
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009700 <_dtoa_r+0x2e8>
 80094e2:	f000 bd33 	b.w	8009f4c <_dtoa_r+0xb34>
 80094e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094ea:	aa16      	add	r2, sp, #88	@ 0x58
 80094ec:	a917      	add	r1, sp, #92	@ 0x5c
 80094ee:	4658      	mov	r0, fp
 80094f0:	f001 fc7c 	bl	800adec <__d2b>
 80094f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80094f8:	4681      	mov	r9, r0
 80094fa:	2e00      	cmp	r6, #0
 80094fc:	d077      	beq.n	80095ee <_dtoa_r+0x1d6>
 80094fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009500:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800950c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009510:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009514:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009518:	4619      	mov	r1, r3
 800951a:	2200      	movs	r2, #0
 800951c:	4b74      	ldr	r3, [pc, #464]	@ (80096f0 <_dtoa_r+0x2d8>)
 800951e:	f7f6 febd 	bl	800029c <__aeabi_dsub>
 8009522:	a369      	add	r3, pc, #420	@ (adr r3, 80096c8 <_dtoa_r+0x2b0>)
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f7f7 f870 	bl	800060c <__aeabi_dmul>
 800952c:	a368      	add	r3, pc, #416	@ (adr r3, 80096d0 <_dtoa_r+0x2b8>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f6 feb5 	bl	80002a0 <__adddf3>
 8009536:	4604      	mov	r4, r0
 8009538:	4630      	mov	r0, r6
 800953a:	460d      	mov	r5, r1
 800953c:	f7f6 fffc 	bl	8000538 <__aeabi_i2d>
 8009540:	a365      	add	r3, pc, #404	@ (adr r3, 80096d8 <_dtoa_r+0x2c0>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f7f7 f861 	bl	800060c <__aeabi_dmul>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f6 fea5 	bl	80002a0 <__adddf3>
 8009556:	4604      	mov	r4, r0
 8009558:	460d      	mov	r5, r1
 800955a:	f7f7 fb07 	bl	8000b6c <__aeabi_d2iz>
 800955e:	2200      	movs	r2, #0
 8009560:	4607      	mov	r7, r0
 8009562:	2300      	movs	r3, #0
 8009564:	4620      	mov	r0, r4
 8009566:	4629      	mov	r1, r5
 8009568:	f7f7 fac2 	bl	8000af0 <__aeabi_dcmplt>
 800956c:	b140      	cbz	r0, 8009580 <_dtoa_r+0x168>
 800956e:	4638      	mov	r0, r7
 8009570:	f7f6 ffe2 	bl	8000538 <__aeabi_i2d>
 8009574:	4622      	mov	r2, r4
 8009576:	462b      	mov	r3, r5
 8009578:	f7f7 fab0 	bl	8000adc <__aeabi_dcmpeq>
 800957c:	b900      	cbnz	r0, 8009580 <_dtoa_r+0x168>
 800957e:	3f01      	subs	r7, #1
 8009580:	2f16      	cmp	r7, #22
 8009582:	d851      	bhi.n	8009628 <_dtoa_r+0x210>
 8009584:	4b5b      	ldr	r3, [pc, #364]	@ (80096f4 <_dtoa_r+0x2dc>)
 8009586:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009592:	f7f7 faad 	bl	8000af0 <__aeabi_dcmplt>
 8009596:	2800      	cmp	r0, #0
 8009598:	d048      	beq.n	800962c <_dtoa_r+0x214>
 800959a:	3f01      	subs	r7, #1
 800959c:	2300      	movs	r3, #0
 800959e:	9312      	str	r3, [sp, #72]	@ 0x48
 80095a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095a2:	1b9b      	subs	r3, r3, r6
 80095a4:	1e5a      	subs	r2, r3, #1
 80095a6:	bf44      	itt	mi
 80095a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80095ac:	2300      	movmi	r3, #0
 80095ae:	9208      	str	r2, [sp, #32]
 80095b0:	bf54      	ite	pl
 80095b2:	f04f 0800 	movpl.w	r8, #0
 80095b6:	9308      	strmi	r3, [sp, #32]
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	db39      	blt.n	8009630 <_dtoa_r+0x218>
 80095bc:	9b08      	ldr	r3, [sp, #32]
 80095be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80095c0:	443b      	add	r3, r7
 80095c2:	9308      	str	r3, [sp, #32]
 80095c4:	2300      	movs	r3, #0
 80095c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	d864      	bhi.n	8009698 <_dtoa_r+0x280>
 80095ce:	2b05      	cmp	r3, #5
 80095d0:	bfc4      	itt	gt
 80095d2:	3b04      	subgt	r3, #4
 80095d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80095d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d8:	f1a3 0302 	sub.w	r3, r3, #2
 80095dc:	bfcc      	ite	gt
 80095de:	2400      	movgt	r4, #0
 80095e0:	2401      	movle	r4, #1
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d863      	bhi.n	80096ae <_dtoa_r+0x296>
 80095e6:	e8df f003 	tbb	[pc, r3]
 80095ea:	372a      	.short	0x372a
 80095ec:	5535      	.short	0x5535
 80095ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80095f2:	441e      	add	r6, r3
 80095f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	bfc1      	itttt	gt
 80095fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009600:	409f      	lslgt	r7, r3
 8009602:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009606:	fa24 f303 	lsrgt.w	r3, r4, r3
 800960a:	bfd6      	itet	le
 800960c:	f1c3 0320 	rsble	r3, r3, #32
 8009610:	ea47 0003 	orrgt.w	r0, r7, r3
 8009614:	fa04 f003 	lslle.w	r0, r4, r3
 8009618:	f7f6 ff7e 	bl	8000518 <__aeabi_ui2d>
 800961c:	2201      	movs	r2, #1
 800961e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009622:	3e01      	subs	r6, #1
 8009624:	9214      	str	r2, [sp, #80]	@ 0x50
 8009626:	e777      	b.n	8009518 <_dtoa_r+0x100>
 8009628:	2301      	movs	r3, #1
 800962a:	e7b8      	b.n	800959e <_dtoa_r+0x186>
 800962c:	9012      	str	r0, [sp, #72]	@ 0x48
 800962e:	e7b7      	b.n	80095a0 <_dtoa_r+0x188>
 8009630:	427b      	negs	r3, r7
 8009632:	930a      	str	r3, [sp, #40]	@ 0x28
 8009634:	2300      	movs	r3, #0
 8009636:	eba8 0807 	sub.w	r8, r8, r7
 800963a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800963c:	e7c4      	b.n	80095c8 <_dtoa_r+0x1b0>
 800963e:	2300      	movs	r3, #0
 8009640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009644:	2b00      	cmp	r3, #0
 8009646:	dc35      	bgt.n	80096b4 <_dtoa_r+0x29c>
 8009648:	2301      	movs	r3, #1
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	9307      	str	r3, [sp, #28]
 800964e:	461a      	mov	r2, r3
 8009650:	920e      	str	r2, [sp, #56]	@ 0x38
 8009652:	e00b      	b.n	800966c <_dtoa_r+0x254>
 8009654:	2301      	movs	r3, #1
 8009656:	e7f3      	b.n	8009640 <_dtoa_r+0x228>
 8009658:	2300      	movs	r3, #0
 800965a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800965c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	3301      	adds	r3, #1
 8009664:	2b01      	cmp	r3, #1
 8009666:	9307      	str	r3, [sp, #28]
 8009668:	bfb8      	it	lt
 800966a:	2301      	movlt	r3, #1
 800966c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009670:	2100      	movs	r1, #0
 8009672:	2204      	movs	r2, #4
 8009674:	f102 0514 	add.w	r5, r2, #20
 8009678:	429d      	cmp	r5, r3
 800967a:	d91f      	bls.n	80096bc <_dtoa_r+0x2a4>
 800967c:	6041      	str	r1, [r0, #4]
 800967e:	4658      	mov	r0, fp
 8009680:	f001 f88a 	bl	800a798 <_Balloc>
 8009684:	4682      	mov	sl, r0
 8009686:	2800      	cmp	r0, #0
 8009688:	d13c      	bne.n	8009704 <_dtoa_r+0x2ec>
 800968a:	4b1b      	ldr	r3, [pc, #108]	@ (80096f8 <_dtoa_r+0x2e0>)
 800968c:	4602      	mov	r2, r0
 800968e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009692:	e6d8      	b.n	8009446 <_dtoa_r+0x2e>
 8009694:	2301      	movs	r3, #1
 8009696:	e7e0      	b.n	800965a <_dtoa_r+0x242>
 8009698:	2401      	movs	r4, #1
 800969a:	2300      	movs	r3, #0
 800969c:	9309      	str	r3, [sp, #36]	@ 0x24
 800969e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	9307      	str	r3, [sp, #28]
 80096a8:	2200      	movs	r2, #0
 80096aa:	2312      	movs	r3, #18
 80096ac:	e7d0      	b.n	8009650 <_dtoa_r+0x238>
 80096ae:	2301      	movs	r3, #1
 80096b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096b2:	e7f5      	b.n	80096a0 <_dtoa_r+0x288>
 80096b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	9307      	str	r3, [sp, #28]
 80096ba:	e7d7      	b.n	800966c <_dtoa_r+0x254>
 80096bc:	3101      	adds	r1, #1
 80096be:	0052      	lsls	r2, r2, #1
 80096c0:	e7d8      	b.n	8009674 <_dtoa_r+0x25c>
 80096c2:	bf00      	nop
 80096c4:	f3af 8000 	nop.w
 80096c8:	636f4361 	.word	0x636f4361
 80096cc:	3fd287a7 	.word	0x3fd287a7
 80096d0:	8b60c8b3 	.word	0x8b60c8b3
 80096d4:	3fc68a28 	.word	0x3fc68a28
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	0800c591 	.word	0x0800c591
 80096e4:	0800c5a8 	.word	0x0800c5a8
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	0800c561 	.word	0x0800c561
 80096f0:	3ff80000 	.word	0x3ff80000
 80096f4:	0800c6b0 	.word	0x0800c6b0
 80096f8:	0800c600 	.word	0x0800c600
 80096fc:	0800c58d 	.word	0x0800c58d
 8009700:	0800c560 	.word	0x0800c560
 8009704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009708:	6018      	str	r0, [r3, #0]
 800970a:	9b07      	ldr	r3, [sp, #28]
 800970c:	2b0e      	cmp	r3, #14
 800970e:	f200 80a4 	bhi.w	800985a <_dtoa_r+0x442>
 8009712:	2c00      	cmp	r4, #0
 8009714:	f000 80a1 	beq.w	800985a <_dtoa_r+0x442>
 8009718:	2f00      	cmp	r7, #0
 800971a:	dd33      	ble.n	8009784 <_dtoa_r+0x36c>
 800971c:	4bad      	ldr	r3, [pc, #692]	@ (80099d4 <_dtoa_r+0x5bc>)
 800971e:	f007 020f 	and.w	r2, r7, #15
 8009722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009726:	ed93 7b00 	vldr	d7, [r3]
 800972a:	05f8      	lsls	r0, r7, #23
 800972c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009730:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009734:	d516      	bpl.n	8009764 <_dtoa_r+0x34c>
 8009736:	4ba8      	ldr	r3, [pc, #672]	@ (80099d8 <_dtoa_r+0x5c0>)
 8009738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800973c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009740:	f7f7 f88e 	bl	8000860 <__aeabi_ddiv>
 8009744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009748:	f004 040f 	and.w	r4, r4, #15
 800974c:	2603      	movs	r6, #3
 800974e:	4da2      	ldr	r5, [pc, #648]	@ (80099d8 <_dtoa_r+0x5c0>)
 8009750:	b954      	cbnz	r4, 8009768 <_dtoa_r+0x350>
 8009752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975a:	f7f7 f881 	bl	8000860 <__aeabi_ddiv>
 800975e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009762:	e028      	b.n	80097b6 <_dtoa_r+0x39e>
 8009764:	2602      	movs	r6, #2
 8009766:	e7f2      	b.n	800974e <_dtoa_r+0x336>
 8009768:	07e1      	lsls	r1, r4, #31
 800976a:	d508      	bpl.n	800977e <_dtoa_r+0x366>
 800976c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009774:	f7f6 ff4a 	bl	800060c <__aeabi_dmul>
 8009778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800977c:	3601      	adds	r6, #1
 800977e:	1064      	asrs	r4, r4, #1
 8009780:	3508      	adds	r5, #8
 8009782:	e7e5      	b.n	8009750 <_dtoa_r+0x338>
 8009784:	f000 80d2 	beq.w	800992c <_dtoa_r+0x514>
 8009788:	427c      	negs	r4, r7
 800978a:	4b92      	ldr	r3, [pc, #584]	@ (80099d4 <_dtoa_r+0x5bc>)
 800978c:	4d92      	ldr	r5, [pc, #584]	@ (80099d8 <_dtoa_r+0x5c0>)
 800978e:	f004 020f 	and.w	r2, r4, #15
 8009792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800979e:	f7f6 ff35 	bl	800060c <__aeabi_dmul>
 80097a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a6:	1124      	asrs	r4, r4, #4
 80097a8:	2300      	movs	r3, #0
 80097aa:	2602      	movs	r6, #2
 80097ac:	2c00      	cmp	r4, #0
 80097ae:	f040 80b2 	bne.w	8009916 <_dtoa_r+0x4fe>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1d3      	bne.n	800975e <_dtoa_r+0x346>
 80097b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 80b7 	beq.w	8009930 <_dtoa_r+0x518>
 80097c2:	4b86      	ldr	r3, [pc, #536]	@ (80099dc <_dtoa_r+0x5c4>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	4620      	mov	r0, r4
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f7 f991 	bl	8000af0 <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f000 80ae 	beq.w	8009930 <_dtoa_r+0x518>
 80097d4:	9b07      	ldr	r3, [sp, #28]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80aa 	beq.w	8009930 <_dtoa_r+0x518>
 80097dc:	9b00      	ldr	r3, [sp, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	dd37      	ble.n	8009852 <_dtoa_r+0x43a>
 80097e2:	1e7b      	subs	r3, r7, #1
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	4620      	mov	r0, r4
 80097e8:	4b7d      	ldr	r3, [pc, #500]	@ (80099e0 <_dtoa_r+0x5c8>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 ff0d 	bl	800060c <__aeabi_dmul>
 80097f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f6:	9c00      	ldr	r4, [sp, #0]
 80097f8:	3601      	adds	r6, #1
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7f6 fe9c 	bl	8000538 <__aeabi_i2d>
 8009800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009804:	f7f6 ff02 	bl	800060c <__aeabi_dmul>
 8009808:	4b76      	ldr	r3, [pc, #472]	@ (80099e4 <_dtoa_r+0x5cc>)
 800980a:	2200      	movs	r2, #0
 800980c:	f7f6 fd48 	bl	80002a0 <__adddf3>
 8009810:	4605      	mov	r5, r0
 8009812:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009816:	2c00      	cmp	r4, #0
 8009818:	f040 808d 	bne.w	8009936 <_dtoa_r+0x51e>
 800981c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009820:	4b71      	ldr	r3, [pc, #452]	@ (80099e8 <_dtoa_r+0x5d0>)
 8009822:	2200      	movs	r2, #0
 8009824:	f7f6 fd3a 	bl	800029c <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009830:	462a      	mov	r2, r5
 8009832:	4633      	mov	r3, r6
 8009834:	f7f7 f97a 	bl	8000b2c <__aeabi_dcmpgt>
 8009838:	2800      	cmp	r0, #0
 800983a:	f040 828b 	bne.w	8009d54 <_dtoa_r+0x93c>
 800983e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009842:	462a      	mov	r2, r5
 8009844:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009848:	f7f7 f952 	bl	8000af0 <__aeabi_dcmplt>
 800984c:	2800      	cmp	r0, #0
 800984e:	f040 8128 	bne.w	8009aa2 <_dtoa_r+0x68a>
 8009852:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009856:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800985a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800985c:	2b00      	cmp	r3, #0
 800985e:	f2c0 815a 	blt.w	8009b16 <_dtoa_r+0x6fe>
 8009862:	2f0e      	cmp	r7, #14
 8009864:	f300 8157 	bgt.w	8009b16 <_dtoa_r+0x6fe>
 8009868:	4b5a      	ldr	r3, [pc, #360]	@ (80099d4 <_dtoa_r+0x5bc>)
 800986a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800986e:	ed93 7b00 	vldr	d7, [r3]
 8009872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009874:	2b00      	cmp	r3, #0
 8009876:	ed8d 7b00 	vstr	d7, [sp]
 800987a:	da03      	bge.n	8009884 <_dtoa_r+0x46c>
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f340 8101 	ble.w	8009a86 <_dtoa_r+0x66e>
 8009884:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009888:	4656      	mov	r6, sl
 800988a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800988e:	4620      	mov	r0, r4
 8009890:	4629      	mov	r1, r5
 8009892:	f7f6 ffe5 	bl	8000860 <__aeabi_ddiv>
 8009896:	f7f7 f969 	bl	8000b6c <__aeabi_d2iz>
 800989a:	4680      	mov	r8, r0
 800989c:	f7f6 fe4c 	bl	8000538 <__aeabi_i2d>
 80098a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098a4:	f7f6 feb2 	bl	800060c <__aeabi_dmul>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4620      	mov	r0, r4
 80098ae:	4629      	mov	r1, r5
 80098b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098b4:	f7f6 fcf2 	bl	800029c <__aeabi_dsub>
 80098b8:	f806 4b01 	strb.w	r4, [r6], #1
 80098bc:	9d07      	ldr	r5, [sp, #28]
 80098be:	eba6 040a 	sub.w	r4, r6, sl
 80098c2:	42a5      	cmp	r5, r4
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	f040 8117 	bne.w	8009afa <_dtoa_r+0x6e2>
 80098cc:	f7f6 fce8 	bl	80002a0 <__adddf3>
 80098d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098d4:	4604      	mov	r4, r0
 80098d6:	460d      	mov	r5, r1
 80098d8:	f7f7 f928 	bl	8000b2c <__aeabi_dcmpgt>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f040 80f9 	bne.w	8009ad4 <_dtoa_r+0x6bc>
 80098e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f7 f8f7 	bl	8000adc <__aeabi_dcmpeq>
 80098ee:	b118      	cbz	r0, 80098f8 <_dtoa_r+0x4e0>
 80098f0:	f018 0f01 	tst.w	r8, #1
 80098f4:	f040 80ee 	bne.w	8009ad4 <_dtoa_r+0x6bc>
 80098f8:	4649      	mov	r1, r9
 80098fa:	4658      	mov	r0, fp
 80098fc:	f000 ff8c 	bl	800a818 <_Bfree>
 8009900:	2300      	movs	r3, #0
 8009902:	7033      	strb	r3, [r6, #0]
 8009904:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009906:	3701      	adds	r7, #1
 8009908:	601f      	str	r7, [r3, #0]
 800990a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 831d 	beq.w	8009f4c <_dtoa_r+0xb34>
 8009912:	601e      	str	r6, [r3, #0]
 8009914:	e31a      	b.n	8009f4c <_dtoa_r+0xb34>
 8009916:	07e2      	lsls	r2, r4, #31
 8009918:	d505      	bpl.n	8009926 <_dtoa_r+0x50e>
 800991a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800991e:	f7f6 fe75 	bl	800060c <__aeabi_dmul>
 8009922:	3601      	adds	r6, #1
 8009924:	2301      	movs	r3, #1
 8009926:	1064      	asrs	r4, r4, #1
 8009928:	3508      	adds	r5, #8
 800992a:	e73f      	b.n	80097ac <_dtoa_r+0x394>
 800992c:	2602      	movs	r6, #2
 800992e:	e742      	b.n	80097b6 <_dtoa_r+0x39e>
 8009930:	9c07      	ldr	r4, [sp, #28]
 8009932:	9704      	str	r7, [sp, #16]
 8009934:	e761      	b.n	80097fa <_dtoa_r+0x3e2>
 8009936:	4b27      	ldr	r3, [pc, #156]	@ (80099d4 <_dtoa_r+0x5bc>)
 8009938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800993a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800993e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009942:	4454      	add	r4, sl
 8009944:	2900      	cmp	r1, #0
 8009946:	d053      	beq.n	80099f0 <_dtoa_r+0x5d8>
 8009948:	4928      	ldr	r1, [pc, #160]	@ (80099ec <_dtoa_r+0x5d4>)
 800994a:	2000      	movs	r0, #0
 800994c:	f7f6 ff88 	bl	8000860 <__aeabi_ddiv>
 8009950:	4633      	mov	r3, r6
 8009952:	462a      	mov	r2, r5
 8009954:	f7f6 fca2 	bl	800029c <__aeabi_dsub>
 8009958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800995c:	4656      	mov	r6, sl
 800995e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009962:	f7f7 f903 	bl	8000b6c <__aeabi_d2iz>
 8009966:	4605      	mov	r5, r0
 8009968:	f7f6 fde6 	bl	8000538 <__aeabi_i2d>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009974:	f7f6 fc92 	bl	800029c <__aeabi_dsub>
 8009978:	3530      	adds	r5, #48	@ 0x30
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009982:	f806 5b01 	strb.w	r5, [r6], #1
 8009986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800998a:	f7f7 f8b1 	bl	8000af0 <__aeabi_dcmplt>
 800998e:	2800      	cmp	r0, #0
 8009990:	d171      	bne.n	8009a76 <_dtoa_r+0x65e>
 8009992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009996:	4911      	ldr	r1, [pc, #68]	@ (80099dc <_dtoa_r+0x5c4>)
 8009998:	2000      	movs	r0, #0
 800999a:	f7f6 fc7f 	bl	800029c <__aeabi_dsub>
 800999e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099a2:	f7f7 f8a5 	bl	8000af0 <__aeabi_dcmplt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f040 8095 	bne.w	8009ad6 <_dtoa_r+0x6be>
 80099ac:	42a6      	cmp	r6, r4
 80099ae:	f43f af50 	beq.w	8009852 <_dtoa_r+0x43a>
 80099b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099b6:	4b0a      	ldr	r3, [pc, #40]	@ (80099e0 <_dtoa_r+0x5c8>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	f7f6 fe27 	bl	800060c <__aeabi_dmul>
 80099be:	4b08      	ldr	r3, [pc, #32]	@ (80099e0 <_dtoa_r+0x5c8>)
 80099c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099c4:	2200      	movs	r2, #0
 80099c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ca:	f7f6 fe1f 	bl	800060c <__aeabi_dmul>
 80099ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d2:	e7c4      	b.n	800995e <_dtoa_r+0x546>
 80099d4:	0800c6b0 	.word	0x0800c6b0
 80099d8:	0800c688 	.word	0x0800c688
 80099dc:	3ff00000 	.word	0x3ff00000
 80099e0:	40240000 	.word	0x40240000
 80099e4:	401c0000 	.word	0x401c0000
 80099e8:	40140000 	.word	0x40140000
 80099ec:	3fe00000 	.word	0x3fe00000
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	f7f6 fe0a 	bl	800060c <__aeabi_dmul>
 80099f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80099fe:	4656      	mov	r6, sl
 8009a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a04:	f7f7 f8b2 	bl	8000b6c <__aeabi_d2iz>
 8009a08:	4605      	mov	r5, r0
 8009a0a:	f7f6 fd95 	bl	8000538 <__aeabi_i2d>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a16:	f7f6 fc41 	bl	800029c <__aeabi_dsub>
 8009a1a:	3530      	adds	r5, #48	@ 0x30
 8009a1c:	f806 5b01 	strb.w	r5, [r6], #1
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	42a6      	cmp	r6, r4
 8009a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a2a:	f04f 0200 	mov.w	r2, #0
 8009a2e:	d124      	bne.n	8009a7a <_dtoa_r+0x662>
 8009a30:	4bac      	ldr	r3, [pc, #688]	@ (8009ce4 <_dtoa_r+0x8cc>)
 8009a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a36:	f7f6 fc33 	bl	80002a0 <__adddf3>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a42:	f7f7 f873 	bl	8000b2c <__aeabi_dcmpgt>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d145      	bne.n	8009ad6 <_dtoa_r+0x6be>
 8009a4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a4e:	49a5      	ldr	r1, [pc, #660]	@ (8009ce4 <_dtoa_r+0x8cc>)
 8009a50:	2000      	movs	r0, #0
 8009a52:	f7f6 fc23 	bl	800029c <__aeabi_dsub>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a5e:	f7f7 f847 	bl	8000af0 <__aeabi_dcmplt>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	f43f aef5 	beq.w	8009852 <_dtoa_r+0x43a>
 8009a68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a6a:	1e73      	subs	r3, r6, #1
 8009a6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a72:	2b30      	cmp	r3, #48	@ 0x30
 8009a74:	d0f8      	beq.n	8009a68 <_dtoa_r+0x650>
 8009a76:	9f04      	ldr	r7, [sp, #16]
 8009a78:	e73e      	b.n	80098f8 <_dtoa_r+0x4e0>
 8009a7a:	4b9b      	ldr	r3, [pc, #620]	@ (8009ce8 <_dtoa_r+0x8d0>)
 8009a7c:	f7f6 fdc6 	bl	800060c <__aeabi_dmul>
 8009a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a84:	e7bc      	b.n	8009a00 <_dtoa_r+0x5e8>
 8009a86:	d10c      	bne.n	8009aa2 <_dtoa_r+0x68a>
 8009a88:	4b98      	ldr	r3, [pc, #608]	@ (8009cec <_dtoa_r+0x8d4>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a90:	f7f6 fdbc 	bl	800060c <__aeabi_dmul>
 8009a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a98:	f7f7 f83e 	bl	8000b18 <__aeabi_dcmpge>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f000 8157 	beq.w	8009d50 <_dtoa_r+0x938>
 8009aa2:	2400      	movs	r4, #0
 8009aa4:	4625      	mov	r5, r4
 8009aa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aa8:	43db      	mvns	r3, r3
 8009aaa:	9304      	str	r3, [sp, #16]
 8009aac:	4656      	mov	r6, sl
 8009aae:	2700      	movs	r7, #0
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4658      	mov	r0, fp
 8009ab4:	f000 feb0 	bl	800a818 <_Bfree>
 8009ab8:	2d00      	cmp	r5, #0
 8009aba:	d0dc      	beq.n	8009a76 <_dtoa_r+0x65e>
 8009abc:	b12f      	cbz	r7, 8009aca <_dtoa_r+0x6b2>
 8009abe:	42af      	cmp	r7, r5
 8009ac0:	d003      	beq.n	8009aca <_dtoa_r+0x6b2>
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fea7 	bl	800a818 <_Bfree>
 8009aca:	4629      	mov	r1, r5
 8009acc:	4658      	mov	r0, fp
 8009ace:	f000 fea3 	bl	800a818 <_Bfree>
 8009ad2:	e7d0      	b.n	8009a76 <_dtoa_r+0x65e>
 8009ad4:	9704      	str	r7, [sp, #16]
 8009ad6:	4633      	mov	r3, r6
 8009ad8:	461e      	mov	r6, r3
 8009ada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ade:	2a39      	cmp	r2, #57	@ 0x39
 8009ae0:	d107      	bne.n	8009af2 <_dtoa_r+0x6da>
 8009ae2:	459a      	cmp	sl, r3
 8009ae4:	d1f8      	bne.n	8009ad8 <_dtoa_r+0x6c0>
 8009ae6:	9a04      	ldr	r2, [sp, #16]
 8009ae8:	3201      	adds	r2, #1
 8009aea:	9204      	str	r2, [sp, #16]
 8009aec:	2230      	movs	r2, #48	@ 0x30
 8009aee:	f88a 2000 	strb.w	r2, [sl]
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	3201      	adds	r2, #1
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	e7bd      	b.n	8009a76 <_dtoa_r+0x65e>
 8009afa:	4b7b      	ldr	r3, [pc, #492]	@ (8009ce8 <_dtoa_r+0x8d0>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	f7f6 fd85 	bl	800060c <__aeabi_dmul>
 8009b02:	2200      	movs	r2, #0
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	460d      	mov	r5, r1
 8009b0a:	f7f6 ffe7 	bl	8000adc <__aeabi_dcmpeq>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f43f aebb 	beq.w	800988a <_dtoa_r+0x472>
 8009b14:	e6f0      	b.n	80098f8 <_dtoa_r+0x4e0>
 8009b16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	f000 80db 	beq.w	8009cd4 <_dtoa_r+0x8bc>
 8009b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b20:	2a01      	cmp	r2, #1
 8009b22:	f300 80bf 	bgt.w	8009ca4 <_dtoa_r+0x88c>
 8009b26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	f000 80b7 	beq.w	8009c9c <_dtoa_r+0x884>
 8009b2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b34:	4646      	mov	r6, r8
 8009b36:	9a08      	ldr	r2, [sp, #32]
 8009b38:	2101      	movs	r1, #1
 8009b3a:	441a      	add	r2, r3
 8009b3c:	4658      	mov	r0, fp
 8009b3e:	4498      	add	r8, r3
 8009b40:	9208      	str	r2, [sp, #32]
 8009b42:	f000 ff1d 	bl	800a980 <__i2b>
 8009b46:	4605      	mov	r5, r0
 8009b48:	b15e      	cbz	r6, 8009b62 <_dtoa_r+0x74a>
 8009b4a:	9b08      	ldr	r3, [sp, #32]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	dd08      	ble.n	8009b62 <_dtoa_r+0x74a>
 8009b50:	42b3      	cmp	r3, r6
 8009b52:	9a08      	ldr	r2, [sp, #32]
 8009b54:	bfa8      	it	ge
 8009b56:	4633      	movge	r3, r6
 8009b58:	eba8 0803 	sub.w	r8, r8, r3
 8009b5c:	1af6      	subs	r6, r6, r3
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	9308      	str	r3, [sp, #32]
 8009b62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b64:	b1f3      	cbz	r3, 8009ba4 <_dtoa_r+0x78c>
 8009b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 80b7 	beq.w	8009cdc <_dtoa_r+0x8c4>
 8009b6e:	b18c      	cbz	r4, 8009b94 <_dtoa_r+0x77c>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4622      	mov	r2, r4
 8009b74:	4658      	mov	r0, fp
 8009b76:	f000 ffc3 	bl	800ab00 <__pow5mult>
 8009b7a:	464a      	mov	r2, r9
 8009b7c:	4601      	mov	r1, r0
 8009b7e:	4605      	mov	r5, r0
 8009b80:	4658      	mov	r0, fp
 8009b82:	f000 ff13 	bl	800a9ac <__multiply>
 8009b86:	4649      	mov	r1, r9
 8009b88:	9004      	str	r0, [sp, #16]
 8009b8a:	4658      	mov	r0, fp
 8009b8c:	f000 fe44 	bl	800a818 <_Bfree>
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	4699      	mov	r9, r3
 8009b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b96:	1b1a      	subs	r2, r3, r4
 8009b98:	d004      	beq.n	8009ba4 <_dtoa_r+0x78c>
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4658      	mov	r0, fp
 8009b9e:	f000 ffaf 	bl	800ab00 <__pow5mult>
 8009ba2:	4681      	mov	r9, r0
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	4658      	mov	r0, fp
 8009ba8:	f000 feea 	bl	800a980 <__i2b>
 8009bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 81cf 	beq.w	8009f54 <_dtoa_r+0xb3c>
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	4601      	mov	r1, r0
 8009bba:	4658      	mov	r0, fp
 8009bbc:	f000 ffa0 	bl	800ab00 <__pow5mult>
 8009bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	f300 8095 	bgt.w	8009cf4 <_dtoa_r+0x8dc>
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f040 8087 	bne.w	8009ce0 <_dtoa_r+0x8c8>
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f040 8089 	bne.w	8009cf0 <_dtoa_r+0x8d8>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009be4:	0d1b      	lsrs	r3, r3, #20
 8009be6:	051b      	lsls	r3, r3, #20
 8009be8:	b12b      	cbz	r3, 8009bf6 <_dtoa_r+0x7de>
 8009bea:	9b08      	ldr	r3, [sp, #32]
 8009bec:	3301      	adds	r3, #1
 8009bee:	9308      	str	r3, [sp, #32]
 8009bf0:	f108 0801 	add.w	r8, r8, #1
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 81b0 	beq.w	8009f60 <_dtoa_r+0xb48>
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c06:	6918      	ldr	r0, [r3, #16]
 8009c08:	f000 fe6e 	bl	800a8e8 <__hi0bits>
 8009c0c:	f1c0 0020 	rsb	r0, r0, #32
 8009c10:	9b08      	ldr	r3, [sp, #32]
 8009c12:	4418      	add	r0, r3
 8009c14:	f010 001f 	ands.w	r0, r0, #31
 8009c18:	d077      	beq.n	8009d0a <_dtoa_r+0x8f2>
 8009c1a:	f1c0 0320 	rsb	r3, r0, #32
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	dd6b      	ble.n	8009cfa <_dtoa_r+0x8e2>
 8009c22:	9b08      	ldr	r3, [sp, #32]
 8009c24:	f1c0 001c 	rsb	r0, r0, #28
 8009c28:	4403      	add	r3, r0
 8009c2a:	4480      	add	r8, r0
 8009c2c:	4406      	add	r6, r0
 8009c2e:	9308      	str	r3, [sp, #32]
 8009c30:	f1b8 0f00 	cmp.w	r8, #0
 8009c34:	dd05      	ble.n	8009c42 <_dtoa_r+0x82a>
 8009c36:	4649      	mov	r1, r9
 8009c38:	4642      	mov	r2, r8
 8009c3a:	4658      	mov	r0, fp
 8009c3c:	f000 ffba 	bl	800abb4 <__lshift>
 8009c40:	4681      	mov	r9, r0
 8009c42:	9b08      	ldr	r3, [sp, #32]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dd05      	ble.n	8009c54 <_dtoa_r+0x83c>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	4658      	mov	r0, fp
 8009c4e:	f000 ffb1 	bl	800abb4 <__lshift>
 8009c52:	4604      	mov	r4, r0
 8009c54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d059      	beq.n	8009d0e <_dtoa_r+0x8f6>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4648      	mov	r0, r9
 8009c5e:	f001 f815 	bl	800ac8c <__mcmp>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	da53      	bge.n	8009d0e <_dtoa_r+0x8f6>
 8009c66:	1e7b      	subs	r3, r7, #1
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	220a      	movs	r2, #10
 8009c70:	4658      	mov	r0, fp
 8009c72:	f000 fdf3 	bl	800a85c <__multadd>
 8009c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c78:	4681      	mov	r9, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 8172 	beq.w	8009f64 <_dtoa_r+0xb4c>
 8009c80:	2300      	movs	r3, #0
 8009c82:	4629      	mov	r1, r5
 8009c84:	220a      	movs	r2, #10
 8009c86:	4658      	mov	r0, fp
 8009c88:	f000 fde8 	bl	800a85c <__multadd>
 8009c8c:	9b00      	ldr	r3, [sp, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	4605      	mov	r5, r0
 8009c92:	dc67      	bgt.n	8009d64 <_dtoa_r+0x94c>
 8009c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	dc41      	bgt.n	8009d1e <_dtoa_r+0x906>
 8009c9a:	e063      	b.n	8009d64 <_dtoa_r+0x94c>
 8009c9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ca2:	e746      	b.n	8009b32 <_dtoa_r+0x71a>
 8009ca4:	9b07      	ldr	r3, [sp, #28]
 8009ca6:	1e5c      	subs	r4, r3, #1
 8009ca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009caa:	42a3      	cmp	r3, r4
 8009cac:	bfbf      	itttt	lt
 8009cae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009cb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009cb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009cb4:	1ae3      	sublt	r3, r4, r3
 8009cb6:	bfb4      	ite	lt
 8009cb8:	18d2      	addlt	r2, r2, r3
 8009cba:	1b1c      	subge	r4, r3, r4
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	bfbc      	itt	lt
 8009cc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009cc2:	2400      	movlt	r4, #0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfb5      	itete	lt
 8009cc8:	eba8 0603 	sublt.w	r6, r8, r3
 8009ccc:	9b07      	ldrge	r3, [sp, #28]
 8009cce:	2300      	movlt	r3, #0
 8009cd0:	4646      	movge	r6, r8
 8009cd2:	e730      	b.n	8009b36 <_dtoa_r+0x71e>
 8009cd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009cd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009cd8:	4646      	mov	r6, r8
 8009cda:	e735      	b.n	8009b48 <_dtoa_r+0x730>
 8009cdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cde:	e75c      	b.n	8009b9a <_dtoa_r+0x782>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	e788      	b.n	8009bf6 <_dtoa_r+0x7de>
 8009ce4:	3fe00000 	.word	0x3fe00000
 8009ce8:	40240000 	.word	0x40240000
 8009cec:	40140000 	.word	0x40140000
 8009cf0:	9b02      	ldr	r3, [sp, #8]
 8009cf2:	e780      	b.n	8009bf6 <_dtoa_r+0x7de>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf8:	e782      	b.n	8009c00 <_dtoa_r+0x7e8>
 8009cfa:	d099      	beq.n	8009c30 <_dtoa_r+0x818>
 8009cfc:	9a08      	ldr	r2, [sp, #32]
 8009cfe:	331c      	adds	r3, #28
 8009d00:	441a      	add	r2, r3
 8009d02:	4498      	add	r8, r3
 8009d04:	441e      	add	r6, r3
 8009d06:	9208      	str	r2, [sp, #32]
 8009d08:	e792      	b.n	8009c30 <_dtoa_r+0x818>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	e7f6      	b.n	8009cfc <_dtoa_r+0x8e4>
 8009d0e:	9b07      	ldr	r3, [sp, #28]
 8009d10:	9704      	str	r7, [sp, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dc20      	bgt.n	8009d58 <_dtoa_r+0x940>
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	dd1e      	ble.n	8009d5c <_dtoa_r+0x944>
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f47f aec0 	bne.w	8009aa6 <_dtoa_r+0x68e>
 8009d26:	4621      	mov	r1, r4
 8009d28:	2205      	movs	r2, #5
 8009d2a:	4658      	mov	r0, fp
 8009d2c:	f000 fd96 	bl	800a85c <__multadd>
 8009d30:	4601      	mov	r1, r0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4648      	mov	r0, r9
 8009d36:	f000 ffa9 	bl	800ac8c <__mcmp>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	f77f aeb3 	ble.w	8009aa6 <_dtoa_r+0x68e>
 8009d40:	4656      	mov	r6, sl
 8009d42:	2331      	movs	r3, #49	@ 0x31
 8009d44:	f806 3b01 	strb.w	r3, [r6], #1
 8009d48:	9b04      	ldr	r3, [sp, #16]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	e6ae      	b.n	8009aae <_dtoa_r+0x696>
 8009d50:	9c07      	ldr	r4, [sp, #28]
 8009d52:	9704      	str	r7, [sp, #16]
 8009d54:	4625      	mov	r5, r4
 8009d56:	e7f3      	b.n	8009d40 <_dtoa_r+0x928>
 8009d58:	9b07      	ldr	r3, [sp, #28]
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8104 	beq.w	8009f6c <_dtoa_r+0xb54>
 8009d64:	2e00      	cmp	r6, #0
 8009d66:	dd05      	ble.n	8009d74 <_dtoa_r+0x95c>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4632      	mov	r2, r6
 8009d6c:	4658      	mov	r0, fp
 8009d6e:	f000 ff21 	bl	800abb4 <__lshift>
 8009d72:	4605      	mov	r5, r0
 8009d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d05a      	beq.n	8009e30 <_dtoa_r+0xa18>
 8009d7a:	6869      	ldr	r1, [r5, #4]
 8009d7c:	4658      	mov	r0, fp
 8009d7e:	f000 fd0b 	bl	800a798 <_Balloc>
 8009d82:	4606      	mov	r6, r0
 8009d84:	b928      	cbnz	r0, 8009d92 <_dtoa_r+0x97a>
 8009d86:	4b84      	ldr	r3, [pc, #528]	@ (8009f98 <_dtoa_r+0xb80>)
 8009d88:	4602      	mov	r2, r0
 8009d8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d8e:	f7ff bb5a 	b.w	8009446 <_dtoa_r+0x2e>
 8009d92:	692a      	ldr	r2, [r5, #16]
 8009d94:	3202      	adds	r2, #2
 8009d96:	0092      	lsls	r2, r2, #2
 8009d98:	f105 010c 	add.w	r1, r5, #12
 8009d9c:	300c      	adds	r0, #12
 8009d9e:	f7ff fa94 	bl	80092ca <memcpy>
 8009da2:	2201      	movs	r2, #1
 8009da4:	4631      	mov	r1, r6
 8009da6:	4658      	mov	r0, fp
 8009da8:	f000 ff04 	bl	800abb4 <__lshift>
 8009dac:	f10a 0301 	add.w	r3, sl, #1
 8009db0:	9307      	str	r3, [sp, #28]
 8009db2:	9b00      	ldr	r3, [sp, #0]
 8009db4:	4453      	add	r3, sl
 8009db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	462f      	mov	r7, r5
 8009dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	9b07      	ldr	r3, [sp, #28]
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	4648      	mov	r0, r9
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	f7ff fa99 	bl	8009304 <quorem>
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	9002      	str	r0, [sp, #8]
 8009dd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009dda:	4648      	mov	r0, r9
 8009ddc:	f000 ff56 	bl	800ac8c <__mcmp>
 8009de0:	462a      	mov	r2, r5
 8009de2:	9008      	str	r0, [sp, #32]
 8009de4:	4621      	mov	r1, r4
 8009de6:	4658      	mov	r0, fp
 8009de8:	f000 ff6c 	bl	800acc4 <__mdiff>
 8009dec:	68c2      	ldr	r2, [r0, #12]
 8009dee:	4606      	mov	r6, r0
 8009df0:	bb02      	cbnz	r2, 8009e34 <_dtoa_r+0xa1c>
 8009df2:	4601      	mov	r1, r0
 8009df4:	4648      	mov	r0, r9
 8009df6:	f000 ff49 	bl	800ac8c <__mcmp>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4658      	mov	r0, fp
 8009e00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e02:	f000 fd09 	bl	800a818 <_Bfree>
 8009e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e0a:	9e07      	ldr	r6, [sp, #28]
 8009e0c:	ea43 0102 	orr.w	r1, r3, r2
 8009e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e12:	4319      	orrs	r1, r3
 8009e14:	d110      	bne.n	8009e38 <_dtoa_r+0xa20>
 8009e16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e1a:	d029      	beq.n	8009e70 <_dtoa_r+0xa58>
 8009e1c:	9b08      	ldr	r3, [sp, #32]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dd02      	ble.n	8009e28 <_dtoa_r+0xa10>
 8009e22:	9b02      	ldr	r3, [sp, #8]
 8009e24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e28:	9b00      	ldr	r3, [sp, #0]
 8009e2a:	f883 8000 	strb.w	r8, [r3]
 8009e2e:	e63f      	b.n	8009ab0 <_dtoa_r+0x698>
 8009e30:	4628      	mov	r0, r5
 8009e32:	e7bb      	b.n	8009dac <_dtoa_r+0x994>
 8009e34:	2201      	movs	r2, #1
 8009e36:	e7e1      	b.n	8009dfc <_dtoa_r+0x9e4>
 8009e38:	9b08      	ldr	r3, [sp, #32]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	db04      	blt.n	8009e48 <_dtoa_r+0xa30>
 8009e3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e40:	430b      	orrs	r3, r1
 8009e42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e44:	430b      	orrs	r3, r1
 8009e46:	d120      	bne.n	8009e8a <_dtoa_r+0xa72>
 8009e48:	2a00      	cmp	r2, #0
 8009e4a:	dded      	ble.n	8009e28 <_dtoa_r+0xa10>
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4658      	mov	r0, fp
 8009e52:	f000 feaf 	bl	800abb4 <__lshift>
 8009e56:	4621      	mov	r1, r4
 8009e58:	4681      	mov	r9, r0
 8009e5a:	f000 ff17 	bl	800ac8c <__mcmp>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	dc03      	bgt.n	8009e6a <_dtoa_r+0xa52>
 8009e62:	d1e1      	bne.n	8009e28 <_dtoa_r+0xa10>
 8009e64:	f018 0f01 	tst.w	r8, #1
 8009e68:	d0de      	beq.n	8009e28 <_dtoa_r+0xa10>
 8009e6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e6e:	d1d8      	bne.n	8009e22 <_dtoa_r+0xa0a>
 8009e70:	9a00      	ldr	r2, [sp, #0]
 8009e72:	2339      	movs	r3, #57	@ 0x39
 8009e74:	7013      	strb	r3, [r2, #0]
 8009e76:	4633      	mov	r3, r6
 8009e78:	461e      	mov	r6, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e80:	2a39      	cmp	r2, #57	@ 0x39
 8009e82:	d052      	beq.n	8009f2a <_dtoa_r+0xb12>
 8009e84:	3201      	adds	r2, #1
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	e612      	b.n	8009ab0 <_dtoa_r+0x698>
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	dd07      	ble.n	8009e9e <_dtoa_r+0xa86>
 8009e8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e92:	d0ed      	beq.n	8009e70 <_dtoa_r+0xa58>
 8009e94:	9a00      	ldr	r2, [sp, #0]
 8009e96:	f108 0301 	add.w	r3, r8, #1
 8009e9a:	7013      	strb	r3, [r2, #0]
 8009e9c:	e608      	b.n	8009ab0 <_dtoa_r+0x698>
 8009e9e:	9b07      	ldr	r3, [sp, #28]
 8009ea0:	9a07      	ldr	r2, [sp, #28]
 8009ea2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d028      	beq.n	8009efe <_dtoa_r+0xae6>
 8009eac:	4649      	mov	r1, r9
 8009eae:	2300      	movs	r3, #0
 8009eb0:	220a      	movs	r2, #10
 8009eb2:	4658      	mov	r0, fp
 8009eb4:	f000 fcd2 	bl	800a85c <__multadd>
 8009eb8:	42af      	cmp	r7, r5
 8009eba:	4681      	mov	r9, r0
 8009ebc:	f04f 0300 	mov.w	r3, #0
 8009ec0:	f04f 020a 	mov.w	r2, #10
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	d107      	bne.n	8009eda <_dtoa_r+0xac2>
 8009eca:	f000 fcc7 	bl	800a85c <__multadd>
 8009ece:	4607      	mov	r7, r0
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	9b07      	ldr	r3, [sp, #28]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	9307      	str	r3, [sp, #28]
 8009ed8:	e774      	b.n	8009dc4 <_dtoa_r+0x9ac>
 8009eda:	f000 fcbf 	bl	800a85c <__multadd>
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	220a      	movs	r2, #10
 8009ee6:	4658      	mov	r0, fp
 8009ee8:	f000 fcb8 	bl	800a85c <__multadd>
 8009eec:	4605      	mov	r5, r0
 8009eee:	e7f0      	b.n	8009ed2 <_dtoa_r+0xaba>
 8009ef0:	9b00      	ldr	r3, [sp, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfcc      	ite	gt
 8009ef6:	461e      	movgt	r6, r3
 8009ef8:	2601      	movle	r6, #1
 8009efa:	4456      	add	r6, sl
 8009efc:	2700      	movs	r7, #0
 8009efe:	4649      	mov	r1, r9
 8009f00:	2201      	movs	r2, #1
 8009f02:	4658      	mov	r0, fp
 8009f04:	f000 fe56 	bl	800abb4 <__lshift>
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4681      	mov	r9, r0
 8009f0c:	f000 febe 	bl	800ac8c <__mcmp>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	dcb0      	bgt.n	8009e76 <_dtoa_r+0xa5e>
 8009f14:	d102      	bne.n	8009f1c <_dtoa_r+0xb04>
 8009f16:	f018 0f01 	tst.w	r8, #1
 8009f1a:	d1ac      	bne.n	8009e76 <_dtoa_r+0xa5e>
 8009f1c:	4633      	mov	r3, r6
 8009f1e:	461e      	mov	r6, r3
 8009f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f24:	2a30      	cmp	r2, #48	@ 0x30
 8009f26:	d0fa      	beq.n	8009f1e <_dtoa_r+0xb06>
 8009f28:	e5c2      	b.n	8009ab0 <_dtoa_r+0x698>
 8009f2a:	459a      	cmp	sl, r3
 8009f2c:	d1a4      	bne.n	8009e78 <_dtoa_r+0xa60>
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	3301      	adds	r3, #1
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	2331      	movs	r3, #49	@ 0x31
 8009f36:	f88a 3000 	strb.w	r3, [sl]
 8009f3a:	e5b9      	b.n	8009ab0 <_dtoa_r+0x698>
 8009f3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f9c <_dtoa_r+0xb84>
 8009f42:	b11b      	cbz	r3, 8009f4c <_dtoa_r+0xb34>
 8009f44:	f10a 0308 	add.w	r3, sl, #8
 8009f48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	4650      	mov	r0, sl
 8009f4e:	b019      	add	sp, #100	@ 0x64
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	f77f ae37 	ble.w	8009bca <_dtoa_r+0x7b2>
 8009f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f60:	2001      	movs	r0, #1
 8009f62:	e655      	b.n	8009c10 <_dtoa_r+0x7f8>
 8009f64:	9b00      	ldr	r3, [sp, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f77f aed6 	ble.w	8009d18 <_dtoa_r+0x900>
 8009f6c:	4656      	mov	r6, sl
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4648      	mov	r0, r9
 8009f72:	f7ff f9c7 	bl	8009304 <quorem>
 8009f76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f7a:	f806 8b01 	strb.w	r8, [r6], #1
 8009f7e:	9b00      	ldr	r3, [sp, #0]
 8009f80:	eba6 020a 	sub.w	r2, r6, sl
 8009f84:	4293      	cmp	r3, r2
 8009f86:	ddb3      	ble.n	8009ef0 <_dtoa_r+0xad8>
 8009f88:	4649      	mov	r1, r9
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	220a      	movs	r2, #10
 8009f8e:	4658      	mov	r0, fp
 8009f90:	f000 fc64 	bl	800a85c <__multadd>
 8009f94:	4681      	mov	r9, r0
 8009f96:	e7ea      	b.n	8009f6e <_dtoa_r+0xb56>
 8009f98:	0800c600 	.word	0x0800c600
 8009f9c:	0800c584 	.word	0x0800c584

08009fa0 <__ssputs_r>:
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	688e      	ldr	r6, [r1, #8]
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	42be      	cmp	r6, r7
 8009faa:	680b      	ldr	r3, [r1, #0]
 8009fac:	4682      	mov	sl, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4690      	mov	r8, r2
 8009fb2:	d82d      	bhi.n	800a010 <__ssputs_r+0x70>
 8009fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009fbc:	d026      	beq.n	800a00c <__ssputs_r+0x6c>
 8009fbe:	6965      	ldr	r5, [r4, #20]
 8009fc0:	6909      	ldr	r1, [r1, #16]
 8009fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fc6:	eba3 0901 	sub.w	r9, r3, r1
 8009fca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fce:	1c7b      	adds	r3, r7, #1
 8009fd0:	444b      	add	r3, r9
 8009fd2:	106d      	asrs	r5, r5, #1
 8009fd4:	429d      	cmp	r5, r3
 8009fd6:	bf38      	it	cc
 8009fd8:	461d      	movcc	r5, r3
 8009fda:	0553      	lsls	r3, r2, #21
 8009fdc:	d527      	bpl.n	800a02e <__ssputs_r+0x8e>
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f000 faa2 	bl	800a528 <_malloc_r>
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	b360      	cbz	r0, 800a042 <__ssputs_r+0xa2>
 8009fe8:	6921      	ldr	r1, [r4, #16]
 8009fea:	464a      	mov	r2, r9
 8009fec:	f7ff f96d 	bl	80092ca <memcpy>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	6126      	str	r6, [r4, #16]
 8009ffe:	6165      	str	r5, [r4, #20]
 800a000:	444e      	add	r6, r9
 800a002:	eba5 0509 	sub.w	r5, r5, r9
 800a006:	6026      	str	r6, [r4, #0]
 800a008:	60a5      	str	r5, [r4, #8]
 800a00a:	463e      	mov	r6, r7
 800a00c:	42be      	cmp	r6, r7
 800a00e:	d900      	bls.n	800a012 <__ssputs_r+0x72>
 800a010:	463e      	mov	r6, r7
 800a012:	6820      	ldr	r0, [r4, #0]
 800a014:	4632      	mov	r2, r6
 800a016:	4641      	mov	r1, r8
 800a018:	f7ff f904 	bl	8009224 <memmove>
 800a01c:	68a3      	ldr	r3, [r4, #8]
 800a01e:	1b9b      	subs	r3, r3, r6
 800a020:	60a3      	str	r3, [r4, #8]
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4433      	add	r3, r6
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	2000      	movs	r0, #0
 800a02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02e:	462a      	mov	r2, r5
 800a030:	f000 ff77 	bl	800af22 <_realloc_r>
 800a034:	4606      	mov	r6, r0
 800a036:	2800      	cmp	r0, #0
 800a038:	d1e0      	bne.n	8009ffc <__ssputs_r+0x5c>
 800a03a:	6921      	ldr	r1, [r4, #16]
 800a03c:	4650      	mov	r0, sl
 800a03e:	f001 f965 	bl	800b30c <_free_r>
 800a042:	230c      	movs	r3, #12
 800a044:	f8ca 3000 	str.w	r3, [sl]
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a04e:	81a3      	strh	r3, [r4, #12]
 800a050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a054:	e7e9      	b.n	800a02a <__ssputs_r+0x8a>
	...

0800a058 <_svfiprintf_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	4698      	mov	r8, r3
 800a05e:	898b      	ldrh	r3, [r1, #12]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	b09d      	sub	sp, #116	@ 0x74
 800a064:	4607      	mov	r7, r0
 800a066:	460d      	mov	r5, r1
 800a068:	4614      	mov	r4, r2
 800a06a:	d510      	bpl.n	800a08e <_svfiprintf_r+0x36>
 800a06c:	690b      	ldr	r3, [r1, #16]
 800a06e:	b973      	cbnz	r3, 800a08e <_svfiprintf_r+0x36>
 800a070:	2140      	movs	r1, #64	@ 0x40
 800a072:	f000 fa59 	bl	800a528 <_malloc_r>
 800a076:	6028      	str	r0, [r5, #0]
 800a078:	6128      	str	r0, [r5, #16]
 800a07a:	b930      	cbnz	r0, 800a08a <_svfiprintf_r+0x32>
 800a07c:	230c      	movs	r3, #12
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a084:	b01d      	add	sp, #116	@ 0x74
 800a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08a:	2340      	movs	r3, #64	@ 0x40
 800a08c:	616b      	str	r3, [r5, #20]
 800a08e:	2300      	movs	r3, #0
 800a090:	9309      	str	r3, [sp, #36]	@ 0x24
 800a092:	2320      	movs	r3, #32
 800a094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a098:	f8cd 800c 	str.w	r8, [sp, #12]
 800a09c:	2330      	movs	r3, #48	@ 0x30
 800a09e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a23c <_svfiprintf_r+0x1e4>
 800a0a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0a6:	f04f 0901 	mov.w	r9, #1
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	469a      	mov	sl, r3
 800a0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b2:	b10a      	cbz	r2, 800a0b8 <_svfiprintf_r+0x60>
 800a0b4:	2a25      	cmp	r2, #37	@ 0x25
 800a0b6:	d1f9      	bne.n	800a0ac <_svfiprintf_r+0x54>
 800a0b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0bc:	d00b      	beq.n	800a0d6 <_svfiprintf_r+0x7e>
 800a0be:	465b      	mov	r3, fp
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	f7ff ff6b 	bl	8009fa0 <__ssputs_r>
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	f000 80a7 	beq.w	800a21e <_svfiprintf_r+0x1c6>
 800a0d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d2:	445a      	add	r2, fp
 800a0d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 809f 	beq.w	800a21e <_svfiprintf_r+0x1c6>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ea:	f10a 0a01 	add.w	sl, sl, #1
 800a0ee:	9304      	str	r3, [sp, #16]
 800a0f0:	9307      	str	r3, [sp, #28]
 800a0f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0f8:	4654      	mov	r4, sl
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a100:	484e      	ldr	r0, [pc, #312]	@ (800a23c <_svfiprintf_r+0x1e4>)
 800a102:	f7f6 f865 	bl	80001d0 <memchr>
 800a106:	9a04      	ldr	r2, [sp, #16]
 800a108:	b9d8      	cbnz	r0, 800a142 <_svfiprintf_r+0xea>
 800a10a:	06d0      	lsls	r0, r2, #27
 800a10c:	bf44      	itt	mi
 800a10e:	2320      	movmi	r3, #32
 800a110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a114:	0711      	lsls	r1, r2, #28
 800a116:	bf44      	itt	mi
 800a118:	232b      	movmi	r3, #43	@ 0x2b
 800a11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a11e:	f89a 3000 	ldrb.w	r3, [sl]
 800a122:	2b2a      	cmp	r3, #42	@ 0x2a
 800a124:	d015      	beq.n	800a152 <_svfiprintf_r+0xfa>
 800a126:	9a07      	ldr	r2, [sp, #28]
 800a128:	4654      	mov	r4, sl
 800a12a:	2000      	movs	r0, #0
 800a12c:	f04f 0c0a 	mov.w	ip, #10
 800a130:	4621      	mov	r1, r4
 800a132:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a136:	3b30      	subs	r3, #48	@ 0x30
 800a138:	2b09      	cmp	r3, #9
 800a13a:	d94b      	bls.n	800a1d4 <_svfiprintf_r+0x17c>
 800a13c:	b1b0      	cbz	r0, 800a16c <_svfiprintf_r+0x114>
 800a13e:	9207      	str	r2, [sp, #28]
 800a140:	e014      	b.n	800a16c <_svfiprintf_r+0x114>
 800a142:	eba0 0308 	sub.w	r3, r0, r8
 800a146:	fa09 f303 	lsl.w	r3, r9, r3
 800a14a:	4313      	orrs	r3, r2
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	46a2      	mov	sl, r4
 800a150:	e7d2      	b.n	800a0f8 <_svfiprintf_r+0xa0>
 800a152:	9b03      	ldr	r3, [sp, #12]
 800a154:	1d19      	adds	r1, r3, #4
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	9103      	str	r1, [sp, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bfbb      	ittet	lt
 800a15e:	425b      	neglt	r3, r3
 800a160:	f042 0202 	orrlt.w	r2, r2, #2
 800a164:	9307      	strge	r3, [sp, #28]
 800a166:	9307      	strlt	r3, [sp, #28]
 800a168:	bfb8      	it	lt
 800a16a:	9204      	strlt	r2, [sp, #16]
 800a16c:	7823      	ldrb	r3, [r4, #0]
 800a16e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a170:	d10a      	bne.n	800a188 <_svfiprintf_r+0x130>
 800a172:	7863      	ldrb	r3, [r4, #1]
 800a174:	2b2a      	cmp	r3, #42	@ 0x2a
 800a176:	d132      	bne.n	800a1de <_svfiprintf_r+0x186>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	1d1a      	adds	r2, r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	9203      	str	r2, [sp, #12]
 800a180:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a184:	3402      	adds	r4, #2
 800a186:	9305      	str	r3, [sp, #20]
 800a188:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a24c <_svfiprintf_r+0x1f4>
 800a18c:	7821      	ldrb	r1, [r4, #0]
 800a18e:	2203      	movs	r2, #3
 800a190:	4650      	mov	r0, sl
 800a192:	f7f6 f81d 	bl	80001d0 <memchr>
 800a196:	b138      	cbz	r0, 800a1a8 <_svfiprintf_r+0x150>
 800a198:	9b04      	ldr	r3, [sp, #16]
 800a19a:	eba0 000a 	sub.w	r0, r0, sl
 800a19e:	2240      	movs	r2, #64	@ 0x40
 800a1a0:	4082      	lsls	r2, r0
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	3401      	adds	r4, #1
 800a1a6:	9304      	str	r3, [sp, #16]
 800a1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ac:	4824      	ldr	r0, [pc, #144]	@ (800a240 <_svfiprintf_r+0x1e8>)
 800a1ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1b2:	2206      	movs	r2, #6
 800a1b4:	f7f6 f80c 	bl	80001d0 <memchr>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d036      	beq.n	800a22a <_svfiprintf_r+0x1d2>
 800a1bc:	4b21      	ldr	r3, [pc, #132]	@ (800a244 <_svfiprintf_r+0x1ec>)
 800a1be:	bb1b      	cbnz	r3, 800a208 <_svfiprintf_r+0x1b0>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	3307      	adds	r3, #7
 800a1c4:	f023 0307 	bic.w	r3, r3, #7
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	9303      	str	r3, [sp, #12]
 800a1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ce:	4433      	add	r3, r6
 800a1d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d2:	e76a      	b.n	800a0aa <_svfiprintf_r+0x52>
 800a1d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1d8:	460c      	mov	r4, r1
 800a1da:	2001      	movs	r0, #1
 800a1dc:	e7a8      	b.n	800a130 <_svfiprintf_r+0xd8>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	3401      	adds	r4, #1
 800a1e2:	9305      	str	r3, [sp, #20]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f04f 0c0a 	mov.w	ip, #10
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f0:	3a30      	subs	r2, #48	@ 0x30
 800a1f2:	2a09      	cmp	r2, #9
 800a1f4:	d903      	bls.n	800a1fe <_svfiprintf_r+0x1a6>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0c6      	beq.n	800a188 <_svfiprintf_r+0x130>
 800a1fa:	9105      	str	r1, [sp, #20]
 800a1fc:	e7c4      	b.n	800a188 <_svfiprintf_r+0x130>
 800a1fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a202:	4604      	mov	r4, r0
 800a204:	2301      	movs	r3, #1
 800a206:	e7f0      	b.n	800a1ea <_svfiprintf_r+0x192>
 800a208:	ab03      	add	r3, sp, #12
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	462a      	mov	r2, r5
 800a20e:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <_svfiprintf_r+0x1f0>)
 800a210:	a904      	add	r1, sp, #16
 800a212:	4638      	mov	r0, r7
 800a214:	f7fe fb46 	bl	80088a4 <_printf_float>
 800a218:	1c42      	adds	r2, r0, #1
 800a21a:	4606      	mov	r6, r0
 800a21c:	d1d6      	bne.n	800a1cc <_svfiprintf_r+0x174>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	065b      	lsls	r3, r3, #25
 800a222:	f53f af2d 	bmi.w	800a080 <_svfiprintf_r+0x28>
 800a226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a228:	e72c      	b.n	800a084 <_svfiprintf_r+0x2c>
 800a22a:	ab03      	add	r3, sp, #12
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	462a      	mov	r2, r5
 800a230:	4b05      	ldr	r3, [pc, #20]	@ (800a248 <_svfiprintf_r+0x1f0>)
 800a232:	a904      	add	r1, sp, #16
 800a234:	4638      	mov	r0, r7
 800a236:	f7fe fdcd 	bl	8008dd4 <_printf_i>
 800a23a:	e7ed      	b.n	800a218 <_svfiprintf_r+0x1c0>
 800a23c:	0800c611 	.word	0x0800c611
 800a240:	0800c61b 	.word	0x0800c61b
 800a244:	080088a5 	.word	0x080088a5
 800a248:	08009fa1 	.word	0x08009fa1
 800a24c:	0800c617 	.word	0x0800c617

0800a250 <__sfputc_r>:
 800a250:	6893      	ldr	r3, [r2, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	2b00      	cmp	r3, #0
 800a256:	b410      	push	{r4}
 800a258:	6093      	str	r3, [r2, #8]
 800a25a:	da08      	bge.n	800a26e <__sfputc_r+0x1e>
 800a25c:	6994      	ldr	r4, [r2, #24]
 800a25e:	42a3      	cmp	r3, r4
 800a260:	db01      	blt.n	800a266 <__sfputc_r+0x16>
 800a262:	290a      	cmp	r1, #10
 800a264:	d103      	bne.n	800a26e <__sfputc_r+0x1e>
 800a266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a26a:	f000 be88 	b.w	800af7e <__swbuf_r>
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	1c58      	adds	r0, r3, #1
 800a272:	6010      	str	r0, [r2, #0]
 800a274:	7019      	strb	r1, [r3, #0]
 800a276:	4608      	mov	r0, r1
 800a278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <__sfputs_r>:
 800a27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a280:	4606      	mov	r6, r0
 800a282:	460f      	mov	r7, r1
 800a284:	4614      	mov	r4, r2
 800a286:	18d5      	adds	r5, r2, r3
 800a288:	42ac      	cmp	r4, r5
 800a28a:	d101      	bne.n	800a290 <__sfputs_r+0x12>
 800a28c:	2000      	movs	r0, #0
 800a28e:	e007      	b.n	800a2a0 <__sfputs_r+0x22>
 800a290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a294:	463a      	mov	r2, r7
 800a296:	4630      	mov	r0, r6
 800a298:	f7ff ffda 	bl	800a250 <__sfputc_r>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d1f3      	bne.n	800a288 <__sfputs_r+0xa>
 800a2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2a4 <_vfiprintf_r>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	460d      	mov	r5, r1
 800a2aa:	b09d      	sub	sp, #116	@ 0x74
 800a2ac:	4614      	mov	r4, r2
 800a2ae:	4698      	mov	r8, r3
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	b118      	cbz	r0, 800a2bc <_vfiprintf_r+0x18>
 800a2b4:	6a03      	ldr	r3, [r0, #32]
 800a2b6:	b90b      	cbnz	r3, 800a2bc <_vfiprintf_r+0x18>
 800a2b8:	f7fe ff6c 	bl	8009194 <__sinit>
 800a2bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2be:	07d9      	lsls	r1, r3, #31
 800a2c0:	d405      	bmi.n	800a2ce <_vfiprintf_r+0x2a>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	059a      	lsls	r2, r3, #22
 800a2c6:	d402      	bmi.n	800a2ce <_vfiprintf_r+0x2a>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ca:	f7fe fffc 	bl	80092c6 <__retarget_lock_acquire_recursive>
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	071b      	lsls	r3, r3, #28
 800a2d2:	d501      	bpl.n	800a2d8 <_vfiprintf_r+0x34>
 800a2d4:	692b      	ldr	r3, [r5, #16]
 800a2d6:	b99b      	cbnz	r3, 800a300 <_vfiprintf_r+0x5c>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f000 fe8e 	bl	800affc <__swsetup_r>
 800a2e0:	b170      	cbz	r0, 800a300 <_vfiprintf_r+0x5c>
 800a2e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2e4:	07dc      	lsls	r4, r3, #31
 800a2e6:	d504      	bpl.n	800a2f2 <_vfiprintf_r+0x4e>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2ec:	b01d      	add	sp, #116	@ 0x74
 800a2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	0598      	lsls	r0, r3, #22
 800a2f6:	d4f7      	bmi.n	800a2e8 <_vfiprintf_r+0x44>
 800a2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2fa:	f7fe ffe5 	bl	80092c8 <__retarget_lock_release_recursive>
 800a2fe:	e7f3      	b.n	800a2e8 <_vfiprintf_r+0x44>
 800a300:	2300      	movs	r3, #0
 800a302:	9309      	str	r3, [sp, #36]	@ 0x24
 800a304:	2320      	movs	r3, #32
 800a306:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a30e:	2330      	movs	r3, #48	@ 0x30
 800a310:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4c0 <_vfiprintf_r+0x21c>
 800a314:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a318:	f04f 0901 	mov.w	r9, #1
 800a31c:	4623      	mov	r3, r4
 800a31e:	469a      	mov	sl, r3
 800a320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a324:	b10a      	cbz	r2, 800a32a <_vfiprintf_r+0x86>
 800a326:	2a25      	cmp	r2, #37	@ 0x25
 800a328:	d1f9      	bne.n	800a31e <_vfiprintf_r+0x7a>
 800a32a:	ebba 0b04 	subs.w	fp, sl, r4
 800a32e:	d00b      	beq.n	800a348 <_vfiprintf_r+0xa4>
 800a330:	465b      	mov	r3, fp
 800a332:	4622      	mov	r2, r4
 800a334:	4629      	mov	r1, r5
 800a336:	4630      	mov	r0, r6
 800a338:	f7ff ffa1 	bl	800a27e <__sfputs_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	f000 80a7 	beq.w	800a490 <_vfiprintf_r+0x1ec>
 800a342:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a344:	445a      	add	r2, fp
 800a346:	9209      	str	r2, [sp, #36]	@ 0x24
 800a348:	f89a 3000 	ldrb.w	r3, [sl]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 809f 	beq.w	800a490 <_vfiprintf_r+0x1ec>
 800a352:	2300      	movs	r3, #0
 800a354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35c:	f10a 0a01 	add.w	sl, sl, #1
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a368:	931a      	str	r3, [sp, #104]	@ 0x68
 800a36a:	4654      	mov	r4, sl
 800a36c:	2205      	movs	r2, #5
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	4853      	ldr	r0, [pc, #332]	@ (800a4c0 <_vfiprintf_r+0x21c>)
 800a374:	f7f5 ff2c 	bl	80001d0 <memchr>
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	b9d8      	cbnz	r0, 800a3b4 <_vfiprintf_r+0x110>
 800a37c:	06d1      	lsls	r1, r2, #27
 800a37e:	bf44      	itt	mi
 800a380:	2320      	movmi	r3, #32
 800a382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a386:	0713      	lsls	r3, r2, #28
 800a388:	bf44      	itt	mi
 800a38a:	232b      	movmi	r3, #43	@ 0x2b
 800a38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a390:	f89a 3000 	ldrb.w	r3, [sl]
 800a394:	2b2a      	cmp	r3, #42	@ 0x2a
 800a396:	d015      	beq.n	800a3c4 <_vfiprintf_r+0x120>
 800a398:	9a07      	ldr	r2, [sp, #28]
 800a39a:	4654      	mov	r4, sl
 800a39c:	2000      	movs	r0, #0
 800a39e:	f04f 0c0a 	mov.w	ip, #10
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a8:	3b30      	subs	r3, #48	@ 0x30
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	d94b      	bls.n	800a446 <_vfiprintf_r+0x1a2>
 800a3ae:	b1b0      	cbz	r0, 800a3de <_vfiprintf_r+0x13a>
 800a3b0:	9207      	str	r2, [sp, #28]
 800a3b2:	e014      	b.n	800a3de <_vfiprintf_r+0x13a>
 800a3b4:	eba0 0308 	sub.w	r3, r0, r8
 800a3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	46a2      	mov	sl, r4
 800a3c2:	e7d2      	b.n	800a36a <_vfiprintf_r+0xc6>
 800a3c4:	9b03      	ldr	r3, [sp, #12]
 800a3c6:	1d19      	adds	r1, r3, #4
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	9103      	str	r1, [sp, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bfbb      	ittet	lt
 800a3d0:	425b      	neglt	r3, r3
 800a3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d6:	9307      	strge	r3, [sp, #28]
 800a3d8:	9307      	strlt	r3, [sp, #28]
 800a3da:	bfb8      	it	lt
 800a3dc:	9204      	strlt	r2, [sp, #16]
 800a3de:	7823      	ldrb	r3, [r4, #0]
 800a3e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3e2:	d10a      	bne.n	800a3fa <_vfiprintf_r+0x156>
 800a3e4:	7863      	ldrb	r3, [r4, #1]
 800a3e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3e8:	d132      	bne.n	800a450 <_vfiprintf_r+0x1ac>
 800a3ea:	9b03      	ldr	r3, [sp, #12]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9203      	str	r2, [sp, #12]
 800a3f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3f6:	3402      	adds	r4, #2
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4d0 <_vfiprintf_r+0x22c>
 800a3fe:	7821      	ldrb	r1, [r4, #0]
 800a400:	2203      	movs	r2, #3
 800a402:	4650      	mov	r0, sl
 800a404:	f7f5 fee4 	bl	80001d0 <memchr>
 800a408:	b138      	cbz	r0, 800a41a <_vfiprintf_r+0x176>
 800a40a:	9b04      	ldr	r3, [sp, #16]
 800a40c:	eba0 000a 	sub.w	r0, r0, sl
 800a410:	2240      	movs	r2, #64	@ 0x40
 800a412:	4082      	lsls	r2, r0
 800a414:	4313      	orrs	r3, r2
 800a416:	3401      	adds	r4, #1
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41e:	4829      	ldr	r0, [pc, #164]	@ (800a4c4 <_vfiprintf_r+0x220>)
 800a420:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a424:	2206      	movs	r2, #6
 800a426:	f7f5 fed3 	bl	80001d0 <memchr>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d03f      	beq.n	800a4ae <_vfiprintf_r+0x20a>
 800a42e:	4b26      	ldr	r3, [pc, #152]	@ (800a4c8 <_vfiprintf_r+0x224>)
 800a430:	bb1b      	cbnz	r3, 800a47a <_vfiprintf_r+0x1d6>
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	3307      	adds	r3, #7
 800a436:	f023 0307 	bic.w	r3, r3, #7
 800a43a:	3308      	adds	r3, #8
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a440:	443b      	add	r3, r7
 800a442:	9309      	str	r3, [sp, #36]	@ 0x24
 800a444:	e76a      	b.n	800a31c <_vfiprintf_r+0x78>
 800a446:	fb0c 3202 	mla	r2, ip, r2, r3
 800a44a:	460c      	mov	r4, r1
 800a44c:	2001      	movs	r0, #1
 800a44e:	e7a8      	b.n	800a3a2 <_vfiprintf_r+0xfe>
 800a450:	2300      	movs	r3, #0
 800a452:	3401      	adds	r4, #1
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	4619      	mov	r1, r3
 800a458:	f04f 0c0a 	mov.w	ip, #10
 800a45c:	4620      	mov	r0, r4
 800a45e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a462:	3a30      	subs	r2, #48	@ 0x30
 800a464:	2a09      	cmp	r2, #9
 800a466:	d903      	bls.n	800a470 <_vfiprintf_r+0x1cc>
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d0c6      	beq.n	800a3fa <_vfiprintf_r+0x156>
 800a46c:	9105      	str	r1, [sp, #20]
 800a46e:	e7c4      	b.n	800a3fa <_vfiprintf_r+0x156>
 800a470:	fb0c 2101 	mla	r1, ip, r1, r2
 800a474:	4604      	mov	r4, r0
 800a476:	2301      	movs	r3, #1
 800a478:	e7f0      	b.n	800a45c <_vfiprintf_r+0x1b8>
 800a47a:	ab03      	add	r3, sp, #12
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	462a      	mov	r2, r5
 800a480:	4b12      	ldr	r3, [pc, #72]	@ (800a4cc <_vfiprintf_r+0x228>)
 800a482:	a904      	add	r1, sp, #16
 800a484:	4630      	mov	r0, r6
 800a486:	f7fe fa0d 	bl	80088a4 <_printf_float>
 800a48a:	4607      	mov	r7, r0
 800a48c:	1c78      	adds	r0, r7, #1
 800a48e:	d1d6      	bne.n	800a43e <_vfiprintf_r+0x19a>
 800a490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a492:	07d9      	lsls	r1, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_vfiprintf_r+0x1fe>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	059a      	lsls	r2, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_vfiprintf_r+0x1fe>
 800a49c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a49e:	f7fe ff13 	bl	80092c8 <__retarget_lock_release_recursive>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	065b      	lsls	r3, r3, #25
 800a4a6:	f53f af1f 	bmi.w	800a2e8 <_vfiprintf_r+0x44>
 800a4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4ac:	e71e      	b.n	800a2ec <_vfiprintf_r+0x48>
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <_vfiprintf_r+0x228>)
 800a4b6:	a904      	add	r1, sp, #16
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7fe fc8b 	bl	8008dd4 <_printf_i>
 800a4be:	e7e4      	b.n	800a48a <_vfiprintf_r+0x1e6>
 800a4c0:	0800c611 	.word	0x0800c611
 800a4c4:	0800c61b 	.word	0x0800c61b
 800a4c8:	080088a5 	.word	0x080088a5
 800a4cc:	0800a27f 	.word	0x0800a27f
 800a4d0:	0800c617 	.word	0x0800c617

0800a4d4 <malloc>:
 800a4d4:	4b02      	ldr	r3, [pc, #8]	@ (800a4e0 <malloc+0xc>)
 800a4d6:	4601      	mov	r1, r0
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	f000 b825 	b.w	800a528 <_malloc_r>
 800a4de:	bf00      	nop
 800a4e0:	20000024 	.word	0x20000024

0800a4e4 <sbrk_aligned>:
 800a4e4:	b570      	push	{r4, r5, r6, lr}
 800a4e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a524 <sbrk_aligned+0x40>)
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	6831      	ldr	r1, [r6, #0]
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	b911      	cbnz	r1, 800a4f6 <sbrk_aligned+0x12>
 800a4f0:	f000 fed6 	bl	800b2a0 <_sbrk_r>
 800a4f4:	6030      	str	r0, [r6, #0]
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f000 fed1 	bl	800b2a0 <_sbrk_r>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	d103      	bne.n	800a50a <sbrk_aligned+0x26>
 800a502:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a506:	4620      	mov	r0, r4
 800a508:	bd70      	pop	{r4, r5, r6, pc}
 800a50a:	1cc4      	adds	r4, r0, #3
 800a50c:	f024 0403 	bic.w	r4, r4, #3
 800a510:	42a0      	cmp	r0, r4
 800a512:	d0f8      	beq.n	800a506 <sbrk_aligned+0x22>
 800a514:	1a21      	subs	r1, r4, r0
 800a516:	4628      	mov	r0, r5
 800a518:	f000 fec2 	bl	800b2a0 <_sbrk_r>
 800a51c:	3001      	adds	r0, #1
 800a51e:	d1f2      	bne.n	800a506 <sbrk_aligned+0x22>
 800a520:	e7ef      	b.n	800a502 <sbrk_aligned+0x1e>
 800a522:	bf00      	nop
 800a524:	20000af4 	.word	0x20000af4

0800a528 <_malloc_r>:
 800a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a52c:	1ccd      	adds	r5, r1, #3
 800a52e:	f025 0503 	bic.w	r5, r5, #3
 800a532:	3508      	adds	r5, #8
 800a534:	2d0c      	cmp	r5, #12
 800a536:	bf38      	it	cc
 800a538:	250c      	movcc	r5, #12
 800a53a:	2d00      	cmp	r5, #0
 800a53c:	4606      	mov	r6, r0
 800a53e:	db01      	blt.n	800a544 <_malloc_r+0x1c>
 800a540:	42a9      	cmp	r1, r5
 800a542:	d904      	bls.n	800a54e <_malloc_r+0x26>
 800a544:	230c      	movs	r3, #12
 800a546:	6033      	str	r3, [r6, #0]
 800a548:	2000      	movs	r0, #0
 800a54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a54e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a624 <_malloc_r+0xfc>
 800a552:	f000 f915 	bl	800a780 <__malloc_lock>
 800a556:	f8d8 3000 	ldr.w	r3, [r8]
 800a55a:	461c      	mov	r4, r3
 800a55c:	bb44      	cbnz	r4, 800a5b0 <_malloc_r+0x88>
 800a55e:	4629      	mov	r1, r5
 800a560:	4630      	mov	r0, r6
 800a562:	f7ff ffbf 	bl	800a4e4 <sbrk_aligned>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	4604      	mov	r4, r0
 800a56a:	d158      	bne.n	800a61e <_malloc_r+0xf6>
 800a56c:	f8d8 4000 	ldr.w	r4, [r8]
 800a570:	4627      	mov	r7, r4
 800a572:	2f00      	cmp	r7, #0
 800a574:	d143      	bne.n	800a5fe <_malloc_r+0xd6>
 800a576:	2c00      	cmp	r4, #0
 800a578:	d04b      	beq.n	800a612 <_malloc_r+0xea>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	4639      	mov	r1, r7
 800a57e:	4630      	mov	r0, r6
 800a580:	eb04 0903 	add.w	r9, r4, r3
 800a584:	f000 fe8c 	bl	800b2a0 <_sbrk_r>
 800a588:	4581      	cmp	r9, r0
 800a58a:	d142      	bne.n	800a612 <_malloc_r+0xea>
 800a58c:	6821      	ldr	r1, [r4, #0]
 800a58e:	1a6d      	subs	r5, r5, r1
 800a590:	4629      	mov	r1, r5
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ffa6 	bl	800a4e4 <sbrk_aligned>
 800a598:	3001      	adds	r0, #1
 800a59a:	d03a      	beq.n	800a612 <_malloc_r+0xea>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	442b      	add	r3, r5
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	bb62      	cbnz	r2, 800a604 <_malloc_r+0xdc>
 800a5aa:	f8c8 7000 	str.w	r7, [r8]
 800a5ae:	e00f      	b.n	800a5d0 <_malloc_r+0xa8>
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	1b52      	subs	r2, r2, r5
 800a5b4:	d420      	bmi.n	800a5f8 <_malloc_r+0xd0>
 800a5b6:	2a0b      	cmp	r2, #11
 800a5b8:	d917      	bls.n	800a5ea <_malloc_r+0xc2>
 800a5ba:	1961      	adds	r1, r4, r5
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	6025      	str	r5, [r4, #0]
 800a5c0:	bf18      	it	ne
 800a5c2:	6059      	strne	r1, [r3, #4]
 800a5c4:	6863      	ldr	r3, [r4, #4]
 800a5c6:	bf08      	it	eq
 800a5c8:	f8c8 1000 	streq.w	r1, [r8]
 800a5cc:	5162      	str	r2, [r4, r5]
 800a5ce:	604b      	str	r3, [r1, #4]
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f000 f8db 	bl	800a78c <__malloc_unlock>
 800a5d6:	f104 000b 	add.w	r0, r4, #11
 800a5da:	1d23      	adds	r3, r4, #4
 800a5dc:	f020 0007 	bic.w	r0, r0, #7
 800a5e0:	1ac2      	subs	r2, r0, r3
 800a5e2:	bf1c      	itt	ne
 800a5e4:	1a1b      	subne	r3, r3, r0
 800a5e6:	50a3      	strne	r3, [r4, r2]
 800a5e8:	e7af      	b.n	800a54a <_malloc_r+0x22>
 800a5ea:	6862      	ldr	r2, [r4, #4]
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	bf0c      	ite	eq
 800a5f0:	f8c8 2000 	streq.w	r2, [r8]
 800a5f4:	605a      	strne	r2, [r3, #4]
 800a5f6:	e7eb      	b.n	800a5d0 <_malloc_r+0xa8>
 800a5f8:	4623      	mov	r3, r4
 800a5fa:	6864      	ldr	r4, [r4, #4]
 800a5fc:	e7ae      	b.n	800a55c <_malloc_r+0x34>
 800a5fe:	463c      	mov	r4, r7
 800a600:	687f      	ldr	r7, [r7, #4]
 800a602:	e7b6      	b.n	800a572 <_malloc_r+0x4a>
 800a604:	461a      	mov	r2, r3
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	42a3      	cmp	r3, r4
 800a60a:	d1fb      	bne.n	800a604 <_malloc_r+0xdc>
 800a60c:	2300      	movs	r3, #0
 800a60e:	6053      	str	r3, [r2, #4]
 800a610:	e7de      	b.n	800a5d0 <_malloc_r+0xa8>
 800a612:	230c      	movs	r3, #12
 800a614:	6033      	str	r3, [r6, #0]
 800a616:	4630      	mov	r0, r6
 800a618:	f000 f8b8 	bl	800a78c <__malloc_unlock>
 800a61c:	e794      	b.n	800a548 <_malloc_r+0x20>
 800a61e:	6005      	str	r5, [r0, #0]
 800a620:	e7d6      	b.n	800a5d0 <_malloc_r+0xa8>
 800a622:	bf00      	nop
 800a624:	20000af8 	.word	0x20000af8

0800a628 <__sflush_r>:
 800a628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a630:	0716      	lsls	r6, r2, #28
 800a632:	4605      	mov	r5, r0
 800a634:	460c      	mov	r4, r1
 800a636:	d454      	bmi.n	800a6e2 <__sflush_r+0xba>
 800a638:	684b      	ldr	r3, [r1, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	dc02      	bgt.n	800a644 <__sflush_r+0x1c>
 800a63e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a640:	2b00      	cmp	r3, #0
 800a642:	dd48      	ble.n	800a6d6 <__sflush_r+0xae>
 800a644:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a646:	2e00      	cmp	r6, #0
 800a648:	d045      	beq.n	800a6d6 <__sflush_r+0xae>
 800a64a:	2300      	movs	r3, #0
 800a64c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a650:	682f      	ldr	r7, [r5, #0]
 800a652:	6a21      	ldr	r1, [r4, #32]
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	d030      	beq.n	800a6ba <__sflush_r+0x92>
 800a658:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	0759      	lsls	r1, r3, #29
 800a65e:	d505      	bpl.n	800a66c <__sflush_r+0x44>
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	1ad2      	subs	r2, r2, r3
 800a664:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a666:	b10b      	cbz	r3, 800a66c <__sflush_r+0x44>
 800a668:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	2300      	movs	r3, #0
 800a66e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a670:	6a21      	ldr	r1, [r4, #32]
 800a672:	4628      	mov	r0, r5
 800a674:	47b0      	blx	r6
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	d106      	bne.n	800a68a <__sflush_r+0x62>
 800a67c:	6829      	ldr	r1, [r5, #0]
 800a67e:	291d      	cmp	r1, #29
 800a680:	d82b      	bhi.n	800a6da <__sflush_r+0xb2>
 800a682:	4a2a      	ldr	r2, [pc, #168]	@ (800a72c <__sflush_r+0x104>)
 800a684:	410a      	asrs	r2, r1
 800a686:	07d6      	lsls	r6, r2, #31
 800a688:	d427      	bmi.n	800a6da <__sflush_r+0xb2>
 800a68a:	2200      	movs	r2, #0
 800a68c:	6062      	str	r2, [r4, #4]
 800a68e:	04d9      	lsls	r1, r3, #19
 800a690:	6922      	ldr	r2, [r4, #16]
 800a692:	6022      	str	r2, [r4, #0]
 800a694:	d504      	bpl.n	800a6a0 <__sflush_r+0x78>
 800a696:	1c42      	adds	r2, r0, #1
 800a698:	d101      	bne.n	800a69e <__sflush_r+0x76>
 800a69a:	682b      	ldr	r3, [r5, #0]
 800a69c:	b903      	cbnz	r3, 800a6a0 <__sflush_r+0x78>
 800a69e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6a2:	602f      	str	r7, [r5, #0]
 800a6a4:	b1b9      	cbz	r1, 800a6d6 <__sflush_r+0xae>
 800a6a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6aa:	4299      	cmp	r1, r3
 800a6ac:	d002      	beq.n	800a6b4 <__sflush_r+0x8c>
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 fe2c 	bl	800b30c <_free_r>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6b8:	e00d      	b.n	800a6d6 <__sflush_r+0xae>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b0      	blx	r6
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	1c50      	adds	r0, r2, #1
 800a6c4:	d1c9      	bne.n	800a65a <__sflush_r+0x32>
 800a6c6:	682b      	ldr	r3, [r5, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0c6      	beq.n	800a65a <__sflush_r+0x32>
 800a6cc:	2b1d      	cmp	r3, #29
 800a6ce:	d001      	beq.n	800a6d4 <__sflush_r+0xac>
 800a6d0:	2b16      	cmp	r3, #22
 800a6d2:	d11e      	bne.n	800a712 <__sflush_r+0xea>
 800a6d4:	602f      	str	r7, [r5, #0]
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e022      	b.n	800a720 <__sflush_r+0xf8>
 800a6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6de:	b21b      	sxth	r3, r3
 800a6e0:	e01b      	b.n	800a71a <__sflush_r+0xf2>
 800a6e2:	690f      	ldr	r7, [r1, #16]
 800a6e4:	2f00      	cmp	r7, #0
 800a6e6:	d0f6      	beq.n	800a6d6 <__sflush_r+0xae>
 800a6e8:	0793      	lsls	r3, r2, #30
 800a6ea:	680e      	ldr	r6, [r1, #0]
 800a6ec:	bf08      	it	eq
 800a6ee:	694b      	ldreq	r3, [r1, #20]
 800a6f0:	600f      	str	r7, [r1, #0]
 800a6f2:	bf18      	it	ne
 800a6f4:	2300      	movne	r3, #0
 800a6f6:	eba6 0807 	sub.w	r8, r6, r7
 800a6fa:	608b      	str	r3, [r1, #8]
 800a6fc:	f1b8 0f00 	cmp.w	r8, #0
 800a700:	dde9      	ble.n	800a6d6 <__sflush_r+0xae>
 800a702:	6a21      	ldr	r1, [r4, #32]
 800a704:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a706:	4643      	mov	r3, r8
 800a708:	463a      	mov	r2, r7
 800a70a:	4628      	mov	r0, r5
 800a70c:	47b0      	blx	r6
 800a70e:	2800      	cmp	r0, #0
 800a710:	dc08      	bgt.n	800a724 <__sflush_r+0xfc>
 800a712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a724:	4407      	add	r7, r0
 800a726:	eba8 0800 	sub.w	r8, r8, r0
 800a72a:	e7e7      	b.n	800a6fc <__sflush_r+0xd4>
 800a72c:	dfbffffe 	.word	0xdfbffffe

0800a730 <_fflush_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	690b      	ldr	r3, [r1, #16]
 800a734:	4605      	mov	r5, r0
 800a736:	460c      	mov	r4, r1
 800a738:	b913      	cbnz	r3, 800a740 <_fflush_r+0x10>
 800a73a:	2500      	movs	r5, #0
 800a73c:	4628      	mov	r0, r5
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	b118      	cbz	r0, 800a74a <_fflush_r+0x1a>
 800a742:	6a03      	ldr	r3, [r0, #32]
 800a744:	b90b      	cbnz	r3, 800a74a <_fflush_r+0x1a>
 800a746:	f7fe fd25 	bl	8009194 <__sinit>
 800a74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0f3      	beq.n	800a73a <_fflush_r+0xa>
 800a752:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a754:	07d0      	lsls	r0, r2, #31
 800a756:	d404      	bmi.n	800a762 <_fflush_r+0x32>
 800a758:	0599      	lsls	r1, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_fflush_r+0x32>
 800a75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a75e:	f7fe fdb2 	bl	80092c6 <__retarget_lock_acquire_recursive>
 800a762:	4628      	mov	r0, r5
 800a764:	4621      	mov	r1, r4
 800a766:	f7ff ff5f 	bl	800a628 <__sflush_r>
 800a76a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a76c:	07da      	lsls	r2, r3, #31
 800a76e:	4605      	mov	r5, r0
 800a770:	d4e4      	bmi.n	800a73c <_fflush_r+0xc>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	059b      	lsls	r3, r3, #22
 800a776:	d4e1      	bmi.n	800a73c <_fflush_r+0xc>
 800a778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a77a:	f7fe fda5 	bl	80092c8 <__retarget_lock_release_recursive>
 800a77e:	e7dd      	b.n	800a73c <_fflush_r+0xc>

0800a780 <__malloc_lock>:
 800a780:	4801      	ldr	r0, [pc, #4]	@ (800a788 <__malloc_lock+0x8>)
 800a782:	f7fe bda0 	b.w	80092c6 <__retarget_lock_acquire_recursive>
 800a786:	bf00      	nop
 800a788:	20000af0 	.word	0x20000af0

0800a78c <__malloc_unlock>:
 800a78c:	4801      	ldr	r0, [pc, #4]	@ (800a794 <__malloc_unlock+0x8>)
 800a78e:	f7fe bd9b 	b.w	80092c8 <__retarget_lock_release_recursive>
 800a792:	bf00      	nop
 800a794:	20000af0 	.word	0x20000af0

0800a798 <_Balloc>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	69c6      	ldr	r6, [r0, #28]
 800a79c:	4604      	mov	r4, r0
 800a79e:	460d      	mov	r5, r1
 800a7a0:	b976      	cbnz	r6, 800a7c0 <_Balloc+0x28>
 800a7a2:	2010      	movs	r0, #16
 800a7a4:	f7ff fe96 	bl	800a4d4 <malloc>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	61e0      	str	r0, [r4, #28]
 800a7ac:	b920      	cbnz	r0, 800a7b8 <_Balloc+0x20>
 800a7ae:	4b18      	ldr	r3, [pc, #96]	@ (800a810 <_Balloc+0x78>)
 800a7b0:	4818      	ldr	r0, [pc, #96]	@ (800a814 <_Balloc+0x7c>)
 800a7b2:	216b      	movs	r1, #107	@ 0x6b
 800a7b4:	f7fd ffb8 	bl	8008728 <__assert_func>
 800a7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7bc:	6006      	str	r6, [r0, #0]
 800a7be:	60c6      	str	r6, [r0, #12]
 800a7c0:	69e6      	ldr	r6, [r4, #28]
 800a7c2:	68f3      	ldr	r3, [r6, #12]
 800a7c4:	b183      	cbz	r3, 800a7e8 <_Balloc+0x50>
 800a7c6:	69e3      	ldr	r3, [r4, #28]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7ce:	b9b8      	cbnz	r0, 800a800 <_Balloc+0x68>
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a7d6:	1d72      	adds	r2, r6, #5
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 fd82 	bl	800b2e4 <_calloc_r>
 800a7e0:	b160      	cbz	r0, 800a7fc <_Balloc+0x64>
 800a7e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7e6:	e00e      	b.n	800a806 <_Balloc+0x6e>
 800a7e8:	2221      	movs	r2, #33	@ 0x21
 800a7ea:	2104      	movs	r1, #4
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fd79 	bl	800b2e4 <_calloc_r>
 800a7f2:	69e3      	ldr	r3, [r4, #28]
 800a7f4:	60f0      	str	r0, [r6, #12]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e4      	bne.n	800a7c6 <_Balloc+0x2e>
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	6802      	ldr	r2, [r0, #0]
 800a802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a806:	2300      	movs	r3, #0
 800a808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a80c:	e7f7      	b.n	800a7fe <_Balloc+0x66>
 800a80e:	bf00      	nop
 800a810:	0800c591 	.word	0x0800c591
 800a814:	0800c622 	.word	0x0800c622

0800a818 <_Bfree>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	69c6      	ldr	r6, [r0, #28]
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	b976      	cbnz	r6, 800a840 <_Bfree+0x28>
 800a822:	2010      	movs	r0, #16
 800a824:	f7ff fe56 	bl	800a4d4 <malloc>
 800a828:	4602      	mov	r2, r0
 800a82a:	61e8      	str	r0, [r5, #28]
 800a82c:	b920      	cbnz	r0, 800a838 <_Bfree+0x20>
 800a82e:	4b09      	ldr	r3, [pc, #36]	@ (800a854 <_Bfree+0x3c>)
 800a830:	4809      	ldr	r0, [pc, #36]	@ (800a858 <_Bfree+0x40>)
 800a832:	218f      	movs	r1, #143	@ 0x8f
 800a834:	f7fd ff78 	bl	8008728 <__assert_func>
 800a838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a83c:	6006      	str	r6, [r0, #0]
 800a83e:	60c6      	str	r6, [r0, #12]
 800a840:	b13c      	cbz	r4, 800a852 <_Bfree+0x3a>
 800a842:	69eb      	ldr	r3, [r5, #28]
 800a844:	6862      	ldr	r2, [r4, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a84c:	6021      	str	r1, [r4, #0]
 800a84e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	0800c591 	.word	0x0800c591
 800a858:	0800c622 	.word	0x0800c622

0800a85c <__multadd>:
 800a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a860:	690d      	ldr	r5, [r1, #16]
 800a862:	4607      	mov	r7, r0
 800a864:	460c      	mov	r4, r1
 800a866:	461e      	mov	r6, r3
 800a868:	f101 0c14 	add.w	ip, r1, #20
 800a86c:	2000      	movs	r0, #0
 800a86e:	f8dc 3000 	ldr.w	r3, [ip]
 800a872:	b299      	uxth	r1, r3
 800a874:	fb02 6101 	mla	r1, r2, r1, r6
 800a878:	0c1e      	lsrs	r6, r3, #16
 800a87a:	0c0b      	lsrs	r3, r1, #16
 800a87c:	fb02 3306 	mla	r3, r2, r6, r3
 800a880:	b289      	uxth	r1, r1
 800a882:	3001      	adds	r0, #1
 800a884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a888:	4285      	cmp	r5, r0
 800a88a:	f84c 1b04 	str.w	r1, [ip], #4
 800a88e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a892:	dcec      	bgt.n	800a86e <__multadd+0x12>
 800a894:	b30e      	cbz	r6, 800a8da <__multadd+0x7e>
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	42ab      	cmp	r3, r5
 800a89a:	dc19      	bgt.n	800a8d0 <__multadd+0x74>
 800a89c:	6861      	ldr	r1, [r4, #4]
 800a89e:	4638      	mov	r0, r7
 800a8a0:	3101      	adds	r1, #1
 800a8a2:	f7ff ff79 	bl	800a798 <_Balloc>
 800a8a6:	4680      	mov	r8, r0
 800a8a8:	b928      	cbnz	r0, 800a8b6 <__multadd+0x5a>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e0 <__multadd+0x84>)
 800a8ae:	480d      	ldr	r0, [pc, #52]	@ (800a8e4 <__multadd+0x88>)
 800a8b0:	21ba      	movs	r1, #186	@ 0xba
 800a8b2:	f7fd ff39 	bl	8008728 <__assert_func>
 800a8b6:	6922      	ldr	r2, [r4, #16]
 800a8b8:	3202      	adds	r2, #2
 800a8ba:	f104 010c 	add.w	r1, r4, #12
 800a8be:	0092      	lsls	r2, r2, #2
 800a8c0:	300c      	adds	r0, #12
 800a8c2:	f7fe fd02 	bl	80092ca <memcpy>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f7ff ffa5 	bl	800a818 <_Bfree>
 800a8ce:	4644      	mov	r4, r8
 800a8d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8d4:	3501      	adds	r5, #1
 800a8d6:	615e      	str	r6, [r3, #20]
 800a8d8:	6125      	str	r5, [r4, #16]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e0:	0800c600 	.word	0x0800c600
 800a8e4:	0800c622 	.word	0x0800c622

0800a8e8 <__hi0bits>:
 800a8e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	bf36      	itet	cc
 800a8f0:	0403      	lslcc	r3, r0, #16
 800a8f2:	2000      	movcs	r0, #0
 800a8f4:	2010      	movcc	r0, #16
 800a8f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8fa:	bf3c      	itt	cc
 800a8fc:	021b      	lslcc	r3, r3, #8
 800a8fe:	3008      	addcc	r0, #8
 800a900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a904:	bf3c      	itt	cc
 800a906:	011b      	lslcc	r3, r3, #4
 800a908:	3004      	addcc	r0, #4
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a90e:	bf3c      	itt	cc
 800a910:	009b      	lslcc	r3, r3, #2
 800a912:	3002      	addcc	r0, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	db05      	blt.n	800a924 <__hi0bits+0x3c>
 800a918:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a91c:	f100 0001 	add.w	r0, r0, #1
 800a920:	bf08      	it	eq
 800a922:	2020      	moveq	r0, #32
 800a924:	4770      	bx	lr

0800a926 <__lo0bits>:
 800a926:	6803      	ldr	r3, [r0, #0]
 800a928:	4602      	mov	r2, r0
 800a92a:	f013 0007 	ands.w	r0, r3, #7
 800a92e:	d00b      	beq.n	800a948 <__lo0bits+0x22>
 800a930:	07d9      	lsls	r1, r3, #31
 800a932:	d421      	bmi.n	800a978 <__lo0bits+0x52>
 800a934:	0798      	lsls	r0, r3, #30
 800a936:	bf49      	itett	mi
 800a938:	085b      	lsrmi	r3, r3, #1
 800a93a:	089b      	lsrpl	r3, r3, #2
 800a93c:	2001      	movmi	r0, #1
 800a93e:	6013      	strmi	r3, [r2, #0]
 800a940:	bf5c      	itt	pl
 800a942:	6013      	strpl	r3, [r2, #0]
 800a944:	2002      	movpl	r0, #2
 800a946:	4770      	bx	lr
 800a948:	b299      	uxth	r1, r3
 800a94a:	b909      	cbnz	r1, 800a950 <__lo0bits+0x2a>
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	2010      	movs	r0, #16
 800a950:	b2d9      	uxtb	r1, r3
 800a952:	b909      	cbnz	r1, 800a958 <__lo0bits+0x32>
 800a954:	3008      	adds	r0, #8
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	0719      	lsls	r1, r3, #28
 800a95a:	bf04      	itt	eq
 800a95c:	091b      	lsreq	r3, r3, #4
 800a95e:	3004      	addeq	r0, #4
 800a960:	0799      	lsls	r1, r3, #30
 800a962:	bf04      	itt	eq
 800a964:	089b      	lsreq	r3, r3, #2
 800a966:	3002      	addeq	r0, #2
 800a968:	07d9      	lsls	r1, r3, #31
 800a96a:	d403      	bmi.n	800a974 <__lo0bits+0x4e>
 800a96c:	085b      	lsrs	r3, r3, #1
 800a96e:	f100 0001 	add.w	r0, r0, #1
 800a972:	d003      	beq.n	800a97c <__lo0bits+0x56>
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	4770      	bx	lr
 800a978:	2000      	movs	r0, #0
 800a97a:	4770      	bx	lr
 800a97c:	2020      	movs	r0, #32
 800a97e:	4770      	bx	lr

0800a980 <__i2b>:
 800a980:	b510      	push	{r4, lr}
 800a982:	460c      	mov	r4, r1
 800a984:	2101      	movs	r1, #1
 800a986:	f7ff ff07 	bl	800a798 <_Balloc>
 800a98a:	4602      	mov	r2, r0
 800a98c:	b928      	cbnz	r0, 800a99a <__i2b+0x1a>
 800a98e:	4b05      	ldr	r3, [pc, #20]	@ (800a9a4 <__i2b+0x24>)
 800a990:	4805      	ldr	r0, [pc, #20]	@ (800a9a8 <__i2b+0x28>)
 800a992:	f240 1145 	movw	r1, #325	@ 0x145
 800a996:	f7fd fec7 	bl	8008728 <__assert_func>
 800a99a:	2301      	movs	r3, #1
 800a99c:	6144      	str	r4, [r0, #20]
 800a99e:	6103      	str	r3, [r0, #16]
 800a9a0:	bd10      	pop	{r4, pc}
 800a9a2:	bf00      	nop
 800a9a4:	0800c600 	.word	0x0800c600
 800a9a8:	0800c622 	.word	0x0800c622

0800a9ac <__multiply>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	690a      	ldr	r2, [r1, #16]
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	bfa8      	it	ge
 800a9ba:	4623      	movge	r3, r4
 800a9bc:	460f      	mov	r7, r1
 800a9be:	bfa4      	itt	ge
 800a9c0:	460c      	movge	r4, r1
 800a9c2:	461f      	movge	r7, r3
 800a9c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a9c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a9cc:	68a3      	ldr	r3, [r4, #8]
 800a9ce:	6861      	ldr	r1, [r4, #4]
 800a9d0:	eb0a 0609 	add.w	r6, sl, r9
 800a9d4:	42b3      	cmp	r3, r6
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	bfb8      	it	lt
 800a9da:	3101      	addlt	r1, #1
 800a9dc:	f7ff fedc 	bl	800a798 <_Balloc>
 800a9e0:	b930      	cbnz	r0, 800a9f0 <__multiply+0x44>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4b44      	ldr	r3, [pc, #272]	@ (800aaf8 <__multiply+0x14c>)
 800a9e6:	4845      	ldr	r0, [pc, #276]	@ (800aafc <__multiply+0x150>)
 800a9e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a9ec:	f7fd fe9c 	bl	8008728 <__assert_func>
 800a9f0:	f100 0514 	add.w	r5, r0, #20
 800a9f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9f8:	462b      	mov	r3, r5
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	4543      	cmp	r3, r8
 800a9fe:	d321      	bcc.n	800aa44 <__multiply+0x98>
 800aa00:	f107 0114 	add.w	r1, r7, #20
 800aa04:	f104 0214 	add.w	r2, r4, #20
 800aa08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aa0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aa10:	9302      	str	r3, [sp, #8]
 800aa12:	1b13      	subs	r3, r2, r4
 800aa14:	3b15      	subs	r3, #21
 800aa16:	f023 0303 	bic.w	r3, r3, #3
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	f104 0715 	add.w	r7, r4, #21
 800aa20:	42ba      	cmp	r2, r7
 800aa22:	bf38      	it	cc
 800aa24:	2304      	movcc	r3, #4
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	9b02      	ldr	r3, [sp, #8]
 800aa2a:	9103      	str	r1, [sp, #12]
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	d80c      	bhi.n	800aa4a <__multiply+0x9e>
 800aa30:	2e00      	cmp	r6, #0
 800aa32:	dd03      	ble.n	800aa3c <__multiply+0x90>
 800aa34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d05b      	beq.n	800aaf4 <__multiply+0x148>
 800aa3c:	6106      	str	r6, [r0, #16]
 800aa3e:	b005      	add	sp, #20
 800aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa44:	f843 2b04 	str.w	r2, [r3], #4
 800aa48:	e7d8      	b.n	800a9fc <__multiply+0x50>
 800aa4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa4e:	f1ba 0f00 	cmp.w	sl, #0
 800aa52:	d024      	beq.n	800aa9e <__multiply+0xf2>
 800aa54:	f104 0e14 	add.w	lr, r4, #20
 800aa58:	46a9      	mov	r9, r5
 800aa5a:	f04f 0c00 	mov.w	ip, #0
 800aa5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa62:	f8d9 3000 	ldr.w	r3, [r9]
 800aa66:	fa1f fb87 	uxth.w	fp, r7
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa74:	f8d9 7000 	ldr.w	r7, [r9]
 800aa78:	4463      	add	r3, ip
 800aa7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa7e:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa8c:	4572      	cmp	r2, lr
 800aa8e:	f849 3b04 	str.w	r3, [r9], #4
 800aa92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa96:	d8e2      	bhi.n	800aa5e <__multiply+0xb2>
 800aa98:	9b01      	ldr	r3, [sp, #4]
 800aa9a:	f845 c003 	str.w	ip, [r5, r3]
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aaa4:	3104      	adds	r1, #4
 800aaa6:	f1b9 0f00 	cmp.w	r9, #0
 800aaaa:	d021      	beq.n	800aaf0 <__multiply+0x144>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	f104 0c14 	add.w	ip, r4, #20
 800aab2:	46ae      	mov	lr, r5
 800aab4:	f04f 0a00 	mov.w	sl, #0
 800aab8:	f8bc b000 	ldrh.w	fp, [ip]
 800aabc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aac0:	fb09 770b 	mla	r7, r9, fp, r7
 800aac4:	4457      	add	r7, sl
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aacc:	f84e 3b04 	str.w	r3, [lr], #4
 800aad0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aad8:	f8be 3000 	ldrh.w	r3, [lr]
 800aadc:	fb09 330a 	mla	r3, r9, sl, r3
 800aae0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aae4:	4562      	cmp	r2, ip
 800aae6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaea:	d8e5      	bhi.n	800aab8 <__multiply+0x10c>
 800aaec:	9f01      	ldr	r7, [sp, #4]
 800aaee:	51eb      	str	r3, [r5, r7]
 800aaf0:	3504      	adds	r5, #4
 800aaf2:	e799      	b.n	800aa28 <__multiply+0x7c>
 800aaf4:	3e01      	subs	r6, #1
 800aaf6:	e79b      	b.n	800aa30 <__multiply+0x84>
 800aaf8:	0800c600 	.word	0x0800c600
 800aafc:	0800c622 	.word	0x0800c622

0800ab00 <__pow5mult>:
 800ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	4615      	mov	r5, r2
 800ab06:	f012 0203 	ands.w	r2, r2, #3
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	460e      	mov	r6, r1
 800ab0e:	d007      	beq.n	800ab20 <__pow5mult+0x20>
 800ab10:	4c25      	ldr	r4, [pc, #148]	@ (800aba8 <__pow5mult+0xa8>)
 800ab12:	3a01      	subs	r2, #1
 800ab14:	2300      	movs	r3, #0
 800ab16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab1a:	f7ff fe9f 	bl	800a85c <__multadd>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	10ad      	asrs	r5, r5, #2
 800ab22:	d03d      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab24:	69fc      	ldr	r4, [r7, #28]
 800ab26:	b97c      	cbnz	r4, 800ab48 <__pow5mult+0x48>
 800ab28:	2010      	movs	r0, #16
 800ab2a:	f7ff fcd3 	bl	800a4d4 <malloc>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	61f8      	str	r0, [r7, #28]
 800ab32:	b928      	cbnz	r0, 800ab40 <__pow5mult+0x40>
 800ab34:	4b1d      	ldr	r3, [pc, #116]	@ (800abac <__pow5mult+0xac>)
 800ab36:	481e      	ldr	r0, [pc, #120]	@ (800abb0 <__pow5mult+0xb0>)
 800ab38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab3c:	f7fd fdf4 	bl	8008728 <__assert_func>
 800ab40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab44:	6004      	str	r4, [r0, #0]
 800ab46:	60c4      	str	r4, [r0, #12]
 800ab48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab50:	b94c      	cbnz	r4, 800ab66 <__pow5mult+0x66>
 800ab52:	f240 2171 	movw	r1, #625	@ 0x271
 800ab56:	4638      	mov	r0, r7
 800ab58:	f7ff ff12 	bl	800a980 <__i2b>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab62:	4604      	mov	r4, r0
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	07eb      	lsls	r3, r5, #31
 800ab6c:	d50a      	bpl.n	800ab84 <__pow5mult+0x84>
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4622      	mov	r2, r4
 800ab72:	4638      	mov	r0, r7
 800ab74:	f7ff ff1a 	bl	800a9ac <__multiply>
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	f7ff fe4b 	bl	800a818 <_Bfree>
 800ab82:	4646      	mov	r6, r8
 800ab84:	106d      	asrs	r5, r5, #1
 800ab86:	d00b      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab88:	6820      	ldr	r0, [r4, #0]
 800ab8a:	b938      	cbnz	r0, 800ab9c <__pow5mult+0x9c>
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ff0b 	bl	800a9ac <__multiply>
 800ab96:	6020      	str	r0, [r4, #0]
 800ab98:	f8c0 9000 	str.w	r9, [r0]
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	e7e4      	b.n	800ab6a <__pow5mult+0x6a>
 800aba0:	4630      	mov	r0, r6
 800aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba6:	bf00      	nop
 800aba8:	0800c67c 	.word	0x0800c67c
 800abac:	0800c591 	.word	0x0800c591
 800abb0:	0800c622 	.word	0x0800c622

0800abb4 <__lshift>:
 800abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	6849      	ldr	r1, [r1, #4]
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	4607      	mov	r7, r0
 800abc6:	4691      	mov	r9, r2
 800abc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abcc:	f108 0601 	add.w	r6, r8, #1
 800abd0:	42b3      	cmp	r3, r6
 800abd2:	db0b      	blt.n	800abec <__lshift+0x38>
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff fddf 	bl	800a798 <_Balloc>
 800abda:	4605      	mov	r5, r0
 800abdc:	b948      	cbnz	r0, 800abf2 <__lshift+0x3e>
 800abde:	4602      	mov	r2, r0
 800abe0:	4b28      	ldr	r3, [pc, #160]	@ (800ac84 <__lshift+0xd0>)
 800abe2:	4829      	ldr	r0, [pc, #164]	@ (800ac88 <__lshift+0xd4>)
 800abe4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800abe8:	f7fd fd9e 	bl	8008728 <__assert_func>
 800abec:	3101      	adds	r1, #1
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	e7ee      	b.n	800abd0 <__lshift+0x1c>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f100 0114 	add.w	r1, r0, #20
 800abf8:	f100 0210 	add.w	r2, r0, #16
 800abfc:	4618      	mov	r0, r3
 800abfe:	4553      	cmp	r3, sl
 800ac00:	db33      	blt.n	800ac6a <__lshift+0xb6>
 800ac02:	6920      	ldr	r0, [r4, #16]
 800ac04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac08:	f104 0314 	add.w	r3, r4, #20
 800ac0c:	f019 091f 	ands.w	r9, r9, #31
 800ac10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac18:	d02b      	beq.n	800ac72 <__lshift+0xbe>
 800ac1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac1e:	468a      	mov	sl, r1
 800ac20:	2200      	movs	r2, #0
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	fa00 f009 	lsl.w	r0, r0, r9
 800ac28:	4310      	orrs	r0, r2
 800ac2a:	f84a 0b04 	str.w	r0, [sl], #4
 800ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac32:	459c      	cmp	ip, r3
 800ac34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac38:	d8f3      	bhi.n	800ac22 <__lshift+0x6e>
 800ac3a:	ebac 0304 	sub.w	r3, ip, r4
 800ac3e:	3b15      	subs	r3, #21
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	3304      	adds	r3, #4
 800ac46:	f104 0015 	add.w	r0, r4, #21
 800ac4a:	4584      	cmp	ip, r0
 800ac4c:	bf38      	it	cc
 800ac4e:	2304      	movcc	r3, #4
 800ac50:	50ca      	str	r2, [r1, r3]
 800ac52:	b10a      	cbz	r2, 800ac58 <__lshift+0xa4>
 800ac54:	f108 0602 	add.w	r6, r8, #2
 800ac58:	3e01      	subs	r6, #1
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	612e      	str	r6, [r5, #16]
 800ac5e:	4621      	mov	r1, r4
 800ac60:	f7ff fdda 	bl	800a818 <_Bfree>
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac6e:	3301      	adds	r3, #1
 800ac70:	e7c5      	b.n	800abfe <__lshift+0x4a>
 800ac72:	3904      	subs	r1, #4
 800ac74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac7c:	459c      	cmp	ip, r3
 800ac7e:	d8f9      	bhi.n	800ac74 <__lshift+0xc0>
 800ac80:	e7ea      	b.n	800ac58 <__lshift+0xa4>
 800ac82:	bf00      	nop
 800ac84:	0800c600 	.word	0x0800c600
 800ac88:	0800c622 	.word	0x0800c622

0800ac8c <__mcmp>:
 800ac8c:	690a      	ldr	r2, [r1, #16]
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6900      	ldr	r0, [r0, #16]
 800ac92:	1a80      	subs	r0, r0, r2
 800ac94:	b530      	push	{r4, r5, lr}
 800ac96:	d10e      	bne.n	800acb6 <__mcmp+0x2a>
 800ac98:	3314      	adds	r3, #20
 800ac9a:	3114      	adds	r1, #20
 800ac9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acac:	4295      	cmp	r5, r2
 800acae:	d003      	beq.n	800acb8 <__mcmp+0x2c>
 800acb0:	d205      	bcs.n	800acbe <__mcmp+0x32>
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acb6:	bd30      	pop	{r4, r5, pc}
 800acb8:	42a3      	cmp	r3, r4
 800acba:	d3f3      	bcc.n	800aca4 <__mcmp+0x18>
 800acbc:	e7fb      	b.n	800acb6 <__mcmp+0x2a>
 800acbe:	2001      	movs	r0, #1
 800acc0:	e7f9      	b.n	800acb6 <__mcmp+0x2a>
	...

0800acc4 <__mdiff>:
 800acc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	4689      	mov	r9, r1
 800acca:	4606      	mov	r6, r0
 800accc:	4611      	mov	r1, r2
 800acce:	4648      	mov	r0, r9
 800acd0:	4614      	mov	r4, r2
 800acd2:	f7ff ffdb 	bl	800ac8c <__mcmp>
 800acd6:	1e05      	subs	r5, r0, #0
 800acd8:	d112      	bne.n	800ad00 <__mdiff+0x3c>
 800acda:	4629      	mov	r1, r5
 800acdc:	4630      	mov	r0, r6
 800acde:	f7ff fd5b 	bl	800a798 <_Balloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	b928      	cbnz	r0, 800acf2 <__mdiff+0x2e>
 800ace6:	4b3f      	ldr	r3, [pc, #252]	@ (800ade4 <__mdiff+0x120>)
 800ace8:	f240 2137 	movw	r1, #567	@ 0x237
 800acec:	483e      	ldr	r0, [pc, #248]	@ (800ade8 <__mdiff+0x124>)
 800acee:	f7fd fd1b 	bl	8008728 <__assert_func>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acf8:	4610      	mov	r0, r2
 800acfa:	b003      	add	sp, #12
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad00:	bfbc      	itt	lt
 800ad02:	464b      	movlt	r3, r9
 800ad04:	46a1      	movlt	r9, r4
 800ad06:	4630      	mov	r0, r6
 800ad08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad0c:	bfba      	itte	lt
 800ad0e:	461c      	movlt	r4, r3
 800ad10:	2501      	movlt	r5, #1
 800ad12:	2500      	movge	r5, #0
 800ad14:	f7ff fd40 	bl	800a798 <_Balloc>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	b918      	cbnz	r0, 800ad24 <__mdiff+0x60>
 800ad1c:	4b31      	ldr	r3, [pc, #196]	@ (800ade4 <__mdiff+0x120>)
 800ad1e:	f240 2145 	movw	r1, #581	@ 0x245
 800ad22:	e7e3      	b.n	800acec <__mdiff+0x28>
 800ad24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad28:	6926      	ldr	r6, [r4, #16]
 800ad2a:	60c5      	str	r5, [r0, #12]
 800ad2c:	f109 0310 	add.w	r3, r9, #16
 800ad30:	f109 0514 	add.w	r5, r9, #20
 800ad34:	f104 0e14 	add.w	lr, r4, #20
 800ad38:	f100 0b14 	add.w	fp, r0, #20
 800ad3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	46d9      	mov	r9, fp
 800ad48:	f04f 0c00 	mov.w	ip, #0
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad56:	9301      	str	r3, [sp, #4]
 800ad58:	fa1f f38a 	uxth.w	r3, sl
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	b283      	uxth	r3, r0
 800ad60:	1acb      	subs	r3, r1, r3
 800ad62:	0c00      	lsrs	r0, r0, #16
 800ad64:	4463      	add	r3, ip
 800ad66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad74:	4576      	cmp	r6, lr
 800ad76:	f849 3b04 	str.w	r3, [r9], #4
 800ad7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad7e:	d8e5      	bhi.n	800ad4c <__mdiff+0x88>
 800ad80:	1b33      	subs	r3, r6, r4
 800ad82:	3b15      	subs	r3, #21
 800ad84:	f023 0303 	bic.w	r3, r3, #3
 800ad88:	3415      	adds	r4, #21
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	42a6      	cmp	r6, r4
 800ad8e:	bf38      	it	cc
 800ad90:	2304      	movcc	r3, #4
 800ad92:	441d      	add	r5, r3
 800ad94:	445b      	add	r3, fp
 800ad96:	461e      	mov	r6, r3
 800ad98:	462c      	mov	r4, r5
 800ad9a:	4544      	cmp	r4, r8
 800ad9c:	d30e      	bcc.n	800adbc <__mdiff+0xf8>
 800ad9e:	f108 0103 	add.w	r1, r8, #3
 800ada2:	1b49      	subs	r1, r1, r5
 800ada4:	f021 0103 	bic.w	r1, r1, #3
 800ada8:	3d03      	subs	r5, #3
 800adaa:	45a8      	cmp	r8, r5
 800adac:	bf38      	it	cc
 800adae:	2100      	movcc	r1, #0
 800adb0:	440b      	add	r3, r1
 800adb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adb6:	b191      	cbz	r1, 800adde <__mdiff+0x11a>
 800adb8:	6117      	str	r7, [r2, #16]
 800adba:	e79d      	b.n	800acf8 <__mdiff+0x34>
 800adbc:	f854 1b04 	ldr.w	r1, [r4], #4
 800adc0:	46e6      	mov	lr, ip
 800adc2:	0c08      	lsrs	r0, r1, #16
 800adc4:	fa1c fc81 	uxtah	ip, ip, r1
 800adc8:	4471      	add	r1, lr
 800adca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800adce:	b289      	uxth	r1, r1
 800add0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800add4:	f846 1b04 	str.w	r1, [r6], #4
 800add8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800addc:	e7dd      	b.n	800ad9a <__mdiff+0xd6>
 800adde:	3f01      	subs	r7, #1
 800ade0:	e7e7      	b.n	800adb2 <__mdiff+0xee>
 800ade2:	bf00      	nop
 800ade4:	0800c600 	.word	0x0800c600
 800ade8:	0800c622 	.word	0x0800c622

0800adec <__d2b>:
 800adec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	460f      	mov	r7, r1
 800adf2:	2101      	movs	r1, #1
 800adf4:	ec59 8b10 	vmov	r8, r9, d0
 800adf8:	4616      	mov	r6, r2
 800adfa:	f7ff fccd 	bl	800a798 <_Balloc>
 800adfe:	4604      	mov	r4, r0
 800ae00:	b930      	cbnz	r0, 800ae10 <__d2b+0x24>
 800ae02:	4602      	mov	r2, r0
 800ae04:	4b23      	ldr	r3, [pc, #140]	@ (800ae94 <__d2b+0xa8>)
 800ae06:	4824      	ldr	r0, [pc, #144]	@ (800ae98 <__d2b+0xac>)
 800ae08:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae0c:	f7fd fc8c 	bl	8008728 <__assert_func>
 800ae10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae18:	b10d      	cbz	r5, 800ae1e <__d2b+0x32>
 800ae1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	f1b8 0300 	subs.w	r3, r8, #0
 800ae24:	d023      	beq.n	800ae6e <__d2b+0x82>
 800ae26:	4668      	mov	r0, sp
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	f7ff fd7c 	bl	800a926 <__lo0bits>
 800ae2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae32:	b1d0      	cbz	r0, 800ae6a <__d2b+0x7e>
 800ae34:	f1c0 0320 	rsb	r3, r0, #32
 800ae38:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3c:	430b      	orrs	r3, r1
 800ae3e:	40c2      	lsrs	r2, r0
 800ae40:	6163      	str	r3, [r4, #20]
 800ae42:	9201      	str	r2, [sp, #4]
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	61a3      	str	r3, [r4, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	bf0c      	ite	eq
 800ae4c:	2201      	moveq	r2, #1
 800ae4e:	2202      	movne	r2, #2
 800ae50:	6122      	str	r2, [r4, #16]
 800ae52:	b1a5      	cbz	r5, 800ae7e <__d2b+0x92>
 800ae54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae58:	4405      	add	r5, r0
 800ae5a:	603d      	str	r5, [r7, #0]
 800ae5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae60:	6030      	str	r0, [r6, #0]
 800ae62:	4620      	mov	r0, r4
 800ae64:	b003      	add	sp, #12
 800ae66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae6a:	6161      	str	r1, [r4, #20]
 800ae6c:	e7ea      	b.n	800ae44 <__d2b+0x58>
 800ae6e:	a801      	add	r0, sp, #4
 800ae70:	f7ff fd59 	bl	800a926 <__lo0bits>
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	6163      	str	r3, [r4, #20]
 800ae78:	3020      	adds	r0, #32
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	e7e8      	b.n	800ae50 <__d2b+0x64>
 800ae7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae86:	6038      	str	r0, [r7, #0]
 800ae88:	6918      	ldr	r0, [r3, #16]
 800ae8a:	f7ff fd2d 	bl	800a8e8 <__hi0bits>
 800ae8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae92:	e7e5      	b.n	800ae60 <__d2b+0x74>
 800ae94:	0800c600 	.word	0x0800c600
 800ae98:	0800c622 	.word	0x0800c622

0800ae9c <__sread>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	460c      	mov	r4, r1
 800aea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea4:	f000 f9d6 	bl	800b254 <_read_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	bfab      	itete	ge
 800aeac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aeae:	89a3      	ldrhlt	r3, [r4, #12]
 800aeb0:	181b      	addge	r3, r3, r0
 800aeb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aeb6:	bfac      	ite	ge
 800aeb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aeba:	81a3      	strhlt	r3, [r4, #12]
 800aebc:	bd10      	pop	{r4, pc}

0800aebe <__swrite>:
 800aebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec2:	461f      	mov	r7, r3
 800aec4:	898b      	ldrh	r3, [r1, #12]
 800aec6:	05db      	lsls	r3, r3, #23
 800aec8:	4605      	mov	r5, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	4616      	mov	r6, r2
 800aece:	d505      	bpl.n	800aedc <__swrite+0x1e>
 800aed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed4:	2302      	movs	r3, #2
 800aed6:	2200      	movs	r2, #0
 800aed8:	f000 f97a 	bl	800b1d0 <_lseek_r>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	4632      	mov	r2, r6
 800aeea:	463b      	mov	r3, r7
 800aeec:	4628      	mov	r0, r5
 800aeee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aef2:	f000 b9e5 	b.w	800b2c0 <_write_r>

0800aef6 <__sseek>:
 800aef6:	b510      	push	{r4, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefe:	f000 f967 	bl	800b1d0 <_lseek_r>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	bf15      	itete	ne
 800af08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af12:	81a3      	strheq	r3, [r4, #12]
 800af14:	bf18      	it	ne
 800af16:	81a3      	strhne	r3, [r4, #12]
 800af18:	bd10      	pop	{r4, pc}

0800af1a <__sclose>:
 800af1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1e:	f000 b925 	b.w	800b16c <_close_r>

0800af22 <_realloc_r>:
 800af22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af26:	4680      	mov	r8, r0
 800af28:	4615      	mov	r5, r2
 800af2a:	460c      	mov	r4, r1
 800af2c:	b921      	cbnz	r1, 800af38 <_realloc_r+0x16>
 800af2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af32:	4611      	mov	r1, r2
 800af34:	f7ff baf8 	b.w	800a528 <_malloc_r>
 800af38:	b92a      	cbnz	r2, 800af46 <_realloc_r+0x24>
 800af3a:	f000 f9e7 	bl	800b30c <_free_r>
 800af3e:	2400      	movs	r4, #0
 800af40:	4620      	mov	r0, r4
 800af42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af46:	f000 fa3d 	bl	800b3c4 <_malloc_usable_size_r>
 800af4a:	4285      	cmp	r5, r0
 800af4c:	4606      	mov	r6, r0
 800af4e:	d802      	bhi.n	800af56 <_realloc_r+0x34>
 800af50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af54:	d8f4      	bhi.n	800af40 <_realloc_r+0x1e>
 800af56:	4629      	mov	r1, r5
 800af58:	4640      	mov	r0, r8
 800af5a:	f7ff fae5 	bl	800a528 <_malloc_r>
 800af5e:	4607      	mov	r7, r0
 800af60:	2800      	cmp	r0, #0
 800af62:	d0ec      	beq.n	800af3e <_realloc_r+0x1c>
 800af64:	42b5      	cmp	r5, r6
 800af66:	462a      	mov	r2, r5
 800af68:	4621      	mov	r1, r4
 800af6a:	bf28      	it	cs
 800af6c:	4632      	movcs	r2, r6
 800af6e:	f7fe f9ac 	bl	80092ca <memcpy>
 800af72:	4621      	mov	r1, r4
 800af74:	4640      	mov	r0, r8
 800af76:	f000 f9c9 	bl	800b30c <_free_r>
 800af7a:	463c      	mov	r4, r7
 800af7c:	e7e0      	b.n	800af40 <_realloc_r+0x1e>

0800af7e <__swbuf_r>:
 800af7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af80:	460e      	mov	r6, r1
 800af82:	4614      	mov	r4, r2
 800af84:	4605      	mov	r5, r0
 800af86:	b118      	cbz	r0, 800af90 <__swbuf_r+0x12>
 800af88:	6a03      	ldr	r3, [r0, #32]
 800af8a:	b90b      	cbnz	r3, 800af90 <__swbuf_r+0x12>
 800af8c:	f7fe f902 	bl	8009194 <__sinit>
 800af90:	69a3      	ldr	r3, [r4, #24]
 800af92:	60a3      	str	r3, [r4, #8]
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	071a      	lsls	r2, r3, #28
 800af98:	d501      	bpl.n	800af9e <__swbuf_r+0x20>
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	b943      	cbnz	r3, 800afb0 <__swbuf_r+0x32>
 800af9e:	4621      	mov	r1, r4
 800afa0:	4628      	mov	r0, r5
 800afa2:	f000 f82b 	bl	800affc <__swsetup_r>
 800afa6:	b118      	cbz	r0, 800afb0 <__swbuf_r+0x32>
 800afa8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800afac:	4638      	mov	r0, r7
 800afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	6922      	ldr	r2, [r4, #16]
 800afb4:	1a98      	subs	r0, r3, r2
 800afb6:	6963      	ldr	r3, [r4, #20]
 800afb8:	b2f6      	uxtb	r6, r6
 800afba:	4283      	cmp	r3, r0
 800afbc:	4637      	mov	r7, r6
 800afbe:	dc05      	bgt.n	800afcc <__swbuf_r+0x4e>
 800afc0:	4621      	mov	r1, r4
 800afc2:	4628      	mov	r0, r5
 800afc4:	f7ff fbb4 	bl	800a730 <_fflush_r>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d1ed      	bne.n	800afa8 <__swbuf_r+0x2a>
 800afcc:	68a3      	ldr	r3, [r4, #8]
 800afce:	3b01      	subs	r3, #1
 800afd0:	60a3      	str	r3, [r4, #8]
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	6022      	str	r2, [r4, #0]
 800afd8:	701e      	strb	r6, [r3, #0]
 800afda:	6962      	ldr	r2, [r4, #20]
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	429a      	cmp	r2, r3
 800afe0:	d004      	beq.n	800afec <__swbuf_r+0x6e>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	07db      	lsls	r3, r3, #31
 800afe6:	d5e1      	bpl.n	800afac <__swbuf_r+0x2e>
 800afe8:	2e0a      	cmp	r6, #10
 800afea:	d1df      	bne.n	800afac <__swbuf_r+0x2e>
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f7ff fb9e 	bl	800a730 <_fflush_r>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d0d9      	beq.n	800afac <__swbuf_r+0x2e>
 800aff8:	e7d6      	b.n	800afa8 <__swbuf_r+0x2a>
	...

0800affc <__swsetup_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4b29      	ldr	r3, [pc, #164]	@ (800b0a4 <__swsetup_r+0xa8>)
 800b000:	4605      	mov	r5, r0
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	460c      	mov	r4, r1
 800b006:	b118      	cbz	r0, 800b010 <__swsetup_r+0x14>
 800b008:	6a03      	ldr	r3, [r0, #32]
 800b00a:	b90b      	cbnz	r3, 800b010 <__swsetup_r+0x14>
 800b00c:	f7fe f8c2 	bl	8009194 <__sinit>
 800b010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b014:	0719      	lsls	r1, r3, #28
 800b016:	d422      	bmi.n	800b05e <__swsetup_r+0x62>
 800b018:	06da      	lsls	r2, r3, #27
 800b01a:	d407      	bmi.n	800b02c <__swsetup_r+0x30>
 800b01c:	2209      	movs	r2, #9
 800b01e:	602a      	str	r2, [r5, #0]
 800b020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b02a:	e033      	b.n	800b094 <__swsetup_r+0x98>
 800b02c:	0758      	lsls	r0, r3, #29
 800b02e:	d512      	bpl.n	800b056 <__swsetup_r+0x5a>
 800b030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b032:	b141      	cbz	r1, 800b046 <__swsetup_r+0x4a>
 800b034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b038:	4299      	cmp	r1, r3
 800b03a:	d002      	beq.n	800b042 <__swsetup_r+0x46>
 800b03c:	4628      	mov	r0, r5
 800b03e:	f000 f965 	bl	800b30c <_free_r>
 800b042:	2300      	movs	r3, #0
 800b044:	6363      	str	r3, [r4, #52]	@ 0x34
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	2300      	movs	r3, #0
 800b050:	6063      	str	r3, [r4, #4]
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f043 0308 	orr.w	r3, r3, #8
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	6923      	ldr	r3, [r4, #16]
 800b060:	b94b      	cbnz	r3, 800b076 <__swsetup_r+0x7a>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b06c:	d003      	beq.n	800b076 <__swsetup_r+0x7a>
 800b06e:	4621      	mov	r1, r4
 800b070:	4628      	mov	r0, r5
 800b072:	f000 f83f 	bl	800b0f4 <__smakebuf_r>
 800b076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b07a:	f013 0201 	ands.w	r2, r3, #1
 800b07e:	d00a      	beq.n	800b096 <__swsetup_r+0x9a>
 800b080:	2200      	movs	r2, #0
 800b082:	60a2      	str	r2, [r4, #8]
 800b084:	6962      	ldr	r2, [r4, #20]
 800b086:	4252      	negs	r2, r2
 800b088:	61a2      	str	r2, [r4, #24]
 800b08a:	6922      	ldr	r2, [r4, #16]
 800b08c:	b942      	cbnz	r2, 800b0a0 <__swsetup_r+0xa4>
 800b08e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b092:	d1c5      	bne.n	800b020 <__swsetup_r+0x24>
 800b094:	bd38      	pop	{r3, r4, r5, pc}
 800b096:	0799      	lsls	r1, r3, #30
 800b098:	bf58      	it	pl
 800b09a:	6962      	ldrpl	r2, [r4, #20]
 800b09c:	60a2      	str	r2, [r4, #8]
 800b09e:	e7f4      	b.n	800b08a <__swsetup_r+0x8e>
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e7f7      	b.n	800b094 <__swsetup_r+0x98>
 800b0a4:	20000024 	.word	0x20000024

0800b0a8 <__swhatbuf_r>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b0:	2900      	cmp	r1, #0
 800b0b2:	b096      	sub	sp, #88	@ 0x58
 800b0b4:	4615      	mov	r5, r2
 800b0b6:	461e      	mov	r6, r3
 800b0b8:	da0d      	bge.n	800b0d6 <__swhatbuf_r+0x2e>
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0c0:	f04f 0100 	mov.w	r1, #0
 800b0c4:	bf14      	ite	ne
 800b0c6:	2340      	movne	r3, #64	@ 0x40
 800b0c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	6031      	str	r1, [r6, #0]
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	b016      	add	sp, #88	@ 0x58
 800b0d4:	bd70      	pop	{r4, r5, r6, pc}
 800b0d6:	466a      	mov	r2, sp
 800b0d8:	f000 f858 	bl	800b18c <_fstat_r>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	dbec      	blt.n	800b0ba <__swhatbuf_r+0x12>
 800b0e0:	9901      	ldr	r1, [sp, #4]
 800b0e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0ea:	4259      	negs	r1, r3
 800b0ec:	4159      	adcs	r1, r3
 800b0ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0f2:	e7eb      	b.n	800b0cc <__swhatbuf_r+0x24>

0800b0f4 <__smakebuf_r>:
 800b0f4:	898b      	ldrh	r3, [r1, #12]
 800b0f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0f8:	079d      	lsls	r5, r3, #30
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	d507      	bpl.n	800b110 <__smakebuf_r+0x1c>
 800b100:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	6123      	str	r3, [r4, #16]
 800b108:	2301      	movs	r3, #1
 800b10a:	6163      	str	r3, [r4, #20]
 800b10c:	b003      	add	sp, #12
 800b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b110:	ab01      	add	r3, sp, #4
 800b112:	466a      	mov	r2, sp
 800b114:	f7ff ffc8 	bl	800b0a8 <__swhatbuf_r>
 800b118:	9f00      	ldr	r7, [sp, #0]
 800b11a:	4605      	mov	r5, r0
 800b11c:	4639      	mov	r1, r7
 800b11e:	4630      	mov	r0, r6
 800b120:	f7ff fa02 	bl	800a528 <_malloc_r>
 800b124:	b948      	cbnz	r0, 800b13a <__smakebuf_r+0x46>
 800b126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b12a:	059a      	lsls	r2, r3, #22
 800b12c:	d4ee      	bmi.n	800b10c <__smakebuf_r+0x18>
 800b12e:	f023 0303 	bic.w	r3, r3, #3
 800b132:	f043 0302 	orr.w	r3, r3, #2
 800b136:	81a3      	strh	r3, [r4, #12]
 800b138:	e7e2      	b.n	800b100 <__smakebuf_r+0xc>
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	6020      	str	r0, [r4, #0]
 800b13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b142:	81a3      	strh	r3, [r4, #12]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b14a:	b15b      	cbz	r3, 800b164 <__smakebuf_r+0x70>
 800b14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b150:	4630      	mov	r0, r6
 800b152:	f000 f82d 	bl	800b1b0 <_isatty_r>
 800b156:	b128      	cbz	r0, 800b164 <__smakebuf_r+0x70>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	f043 0301 	orr.w	r3, r3, #1
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	431d      	orrs	r5, r3
 800b168:	81a5      	strh	r5, [r4, #12]
 800b16a:	e7cf      	b.n	800b10c <__smakebuf_r+0x18>

0800b16c <_close_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d06      	ldr	r5, [pc, #24]	@ (800b188 <_close_r+0x1c>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	f7f6 ff5c 	bl	8002034 <_close>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_close_r+0x1a>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_close_r+0x1a>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	20000afc 	.word	0x20000afc

0800b18c <_fstat_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d07      	ldr	r5, [pc, #28]	@ (800b1ac <_fstat_r+0x20>)
 800b190:	2300      	movs	r3, #0
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	4611      	mov	r1, r2
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f7f6 ff57 	bl	800204c <_fstat>
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	d102      	bne.n	800b1a8 <_fstat_r+0x1c>
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	b103      	cbz	r3, 800b1a8 <_fstat_r+0x1c>
 800b1a6:	6023      	str	r3, [r4, #0]
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000afc 	.word	0x20000afc

0800b1b0 <_isatty_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d06      	ldr	r5, [pc, #24]	@ (800b1cc <_isatty_r+0x1c>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	602b      	str	r3, [r5, #0]
 800b1bc:	f7f6 ff56 	bl	800206c <_isatty>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_isatty_r+0x1a>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_isatty_r+0x1a>
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	20000afc 	.word	0x20000afc

0800b1d0 <_lseek_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d07      	ldr	r5, [pc, #28]	@ (800b1f0 <_lseek_r+0x20>)
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	4611      	mov	r1, r2
 800b1da:	2200      	movs	r2, #0
 800b1dc:	602a      	str	r2, [r5, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f7f6 ff4f 	bl	8002082 <_lseek>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_lseek_r+0x1e>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_lseek_r+0x1e>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20000afc 	.word	0x20000afc

0800b1f4 <_raise_r>:
 800b1f4:	291f      	cmp	r1, #31
 800b1f6:	b538      	push	{r3, r4, r5, lr}
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	d904      	bls.n	800b208 <_raise_r+0x14>
 800b1fe:	2316      	movs	r3, #22
 800b200:	6003      	str	r3, [r0, #0]
 800b202:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b20a:	b112      	cbz	r2, 800b212 <_raise_r+0x1e>
 800b20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b210:	b94b      	cbnz	r3, 800b226 <_raise_r+0x32>
 800b212:	4628      	mov	r0, r5
 800b214:	f000 f842 	bl	800b29c <_getpid_r>
 800b218:	4622      	mov	r2, r4
 800b21a:	4601      	mov	r1, r0
 800b21c:	4628      	mov	r0, r5
 800b21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b222:	f000 b829 	b.w	800b278 <_kill_r>
 800b226:	2b01      	cmp	r3, #1
 800b228:	d00a      	beq.n	800b240 <_raise_r+0x4c>
 800b22a:	1c59      	adds	r1, r3, #1
 800b22c:	d103      	bne.n	800b236 <_raise_r+0x42>
 800b22e:	2316      	movs	r3, #22
 800b230:	6003      	str	r3, [r0, #0]
 800b232:	2001      	movs	r0, #1
 800b234:	e7e7      	b.n	800b206 <_raise_r+0x12>
 800b236:	2100      	movs	r1, #0
 800b238:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b23c:	4620      	mov	r0, r4
 800b23e:	4798      	blx	r3
 800b240:	2000      	movs	r0, #0
 800b242:	e7e0      	b.n	800b206 <_raise_r+0x12>

0800b244 <raise>:
 800b244:	4b02      	ldr	r3, [pc, #8]	@ (800b250 <raise+0xc>)
 800b246:	4601      	mov	r1, r0
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f7ff bfd3 	b.w	800b1f4 <_raise_r>
 800b24e:	bf00      	nop
 800b250:	20000024 	.word	0x20000024

0800b254 <_read_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	@ (800b274 <_read_r+0x20>)
 800b258:	4604      	mov	r4, r0
 800b25a:	4608      	mov	r0, r1
 800b25c:	4611      	mov	r1, r2
 800b25e:	2200      	movs	r2, #0
 800b260:	602a      	str	r2, [r5, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	f7f6 fead 	bl	8001fc2 <_read>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_read_r+0x1e>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_read_r+0x1e>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	20000afc 	.word	0x20000afc

0800b278 <_kill_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	@ (800b298 <_kill_r+0x20>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	4611      	mov	r1, r2
 800b284:	602b      	str	r3, [r5, #0]
 800b286:	f7f6 fe81 	bl	8001f8c <_kill>
 800b28a:	1c43      	adds	r3, r0, #1
 800b28c:	d102      	bne.n	800b294 <_kill_r+0x1c>
 800b28e:	682b      	ldr	r3, [r5, #0]
 800b290:	b103      	cbz	r3, 800b294 <_kill_r+0x1c>
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	bd38      	pop	{r3, r4, r5, pc}
 800b296:	bf00      	nop
 800b298:	20000afc 	.word	0x20000afc

0800b29c <_getpid_r>:
 800b29c:	f7f6 be6e 	b.w	8001f7c <_getpid>

0800b2a0 <_sbrk_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4d06      	ldr	r5, [pc, #24]	@ (800b2bc <_sbrk_r+0x1c>)
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	602b      	str	r3, [r5, #0]
 800b2ac:	f7f6 fef6 	bl	800209c <_sbrk>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_sbrk_r+0x1a>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_sbrk_r+0x1a>
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	20000afc 	.word	0x20000afc

0800b2c0 <_write_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d07      	ldr	r5, [pc, #28]	@ (800b2e0 <_write_r+0x20>)
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	4608      	mov	r0, r1
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	602a      	str	r2, [r5, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f7f6 fe94 	bl	8001ffc <_write>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_write_r+0x1e>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_write_r+0x1e>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	20000afc 	.word	0x20000afc

0800b2e4 <_calloc_r>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	fba1 5402 	umull	r5, r4, r1, r2
 800b2ea:	b93c      	cbnz	r4, 800b2fc <_calloc_r+0x18>
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	f7ff f91b 	bl	800a528 <_malloc_r>
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	b928      	cbnz	r0, 800b302 <_calloc_r+0x1e>
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	bd70      	pop	{r4, r5, r6, pc}
 800b2fc:	220c      	movs	r2, #12
 800b2fe:	6002      	str	r2, [r0, #0]
 800b300:	e7f9      	b.n	800b2f6 <_calloc_r+0x12>
 800b302:	462a      	mov	r2, r5
 800b304:	4621      	mov	r1, r4
 800b306:	f7fd ffa7 	bl	8009258 <memset>
 800b30a:	e7f5      	b.n	800b2f8 <_calloc_r+0x14>

0800b30c <_free_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4605      	mov	r5, r0
 800b310:	2900      	cmp	r1, #0
 800b312:	d041      	beq.n	800b398 <_free_r+0x8c>
 800b314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b318:	1f0c      	subs	r4, r1, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfb8      	it	lt
 800b31e:	18e4      	addlt	r4, r4, r3
 800b320:	f7ff fa2e 	bl	800a780 <__malloc_lock>
 800b324:	4a1d      	ldr	r2, [pc, #116]	@ (800b39c <_free_r+0x90>)
 800b326:	6813      	ldr	r3, [r2, #0]
 800b328:	b933      	cbnz	r3, 800b338 <_free_r+0x2c>
 800b32a:	6063      	str	r3, [r4, #4]
 800b32c:	6014      	str	r4, [r2, #0]
 800b32e:	4628      	mov	r0, r5
 800b330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b334:	f7ff ba2a 	b.w	800a78c <__malloc_unlock>
 800b338:	42a3      	cmp	r3, r4
 800b33a:	d908      	bls.n	800b34e <_free_r+0x42>
 800b33c:	6820      	ldr	r0, [r4, #0]
 800b33e:	1821      	adds	r1, r4, r0
 800b340:	428b      	cmp	r3, r1
 800b342:	bf01      	itttt	eq
 800b344:	6819      	ldreq	r1, [r3, #0]
 800b346:	685b      	ldreq	r3, [r3, #4]
 800b348:	1809      	addeq	r1, r1, r0
 800b34a:	6021      	streq	r1, [r4, #0]
 800b34c:	e7ed      	b.n	800b32a <_free_r+0x1e>
 800b34e:	461a      	mov	r2, r3
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	b10b      	cbz	r3, 800b358 <_free_r+0x4c>
 800b354:	42a3      	cmp	r3, r4
 800b356:	d9fa      	bls.n	800b34e <_free_r+0x42>
 800b358:	6811      	ldr	r1, [r2, #0]
 800b35a:	1850      	adds	r0, r2, r1
 800b35c:	42a0      	cmp	r0, r4
 800b35e:	d10b      	bne.n	800b378 <_free_r+0x6c>
 800b360:	6820      	ldr	r0, [r4, #0]
 800b362:	4401      	add	r1, r0
 800b364:	1850      	adds	r0, r2, r1
 800b366:	4283      	cmp	r3, r0
 800b368:	6011      	str	r1, [r2, #0]
 800b36a:	d1e0      	bne.n	800b32e <_free_r+0x22>
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	6053      	str	r3, [r2, #4]
 800b372:	4408      	add	r0, r1
 800b374:	6010      	str	r0, [r2, #0]
 800b376:	e7da      	b.n	800b32e <_free_r+0x22>
 800b378:	d902      	bls.n	800b380 <_free_r+0x74>
 800b37a:	230c      	movs	r3, #12
 800b37c:	602b      	str	r3, [r5, #0]
 800b37e:	e7d6      	b.n	800b32e <_free_r+0x22>
 800b380:	6820      	ldr	r0, [r4, #0]
 800b382:	1821      	adds	r1, r4, r0
 800b384:	428b      	cmp	r3, r1
 800b386:	bf04      	itt	eq
 800b388:	6819      	ldreq	r1, [r3, #0]
 800b38a:	685b      	ldreq	r3, [r3, #4]
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	bf04      	itt	eq
 800b390:	1809      	addeq	r1, r1, r0
 800b392:	6021      	streq	r1, [r4, #0]
 800b394:	6054      	str	r4, [r2, #4]
 800b396:	e7ca      	b.n	800b32e <_free_r+0x22>
 800b398:	bd38      	pop	{r3, r4, r5, pc}
 800b39a:	bf00      	nop
 800b39c:	20000af8 	.word	0x20000af8

0800b3a0 <__ascii_mbtowc>:
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	b901      	cbnz	r1, 800b3a6 <__ascii_mbtowc+0x6>
 800b3a4:	a901      	add	r1, sp, #4
 800b3a6:	b142      	cbz	r2, 800b3ba <__ascii_mbtowc+0x1a>
 800b3a8:	b14b      	cbz	r3, 800b3be <__ascii_mbtowc+0x1e>
 800b3aa:	7813      	ldrb	r3, [r2, #0]
 800b3ac:	600b      	str	r3, [r1, #0]
 800b3ae:	7812      	ldrb	r2, [r2, #0]
 800b3b0:	1e10      	subs	r0, r2, #0
 800b3b2:	bf18      	it	ne
 800b3b4:	2001      	movne	r0, #1
 800b3b6:	b002      	add	sp, #8
 800b3b8:	4770      	bx	lr
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	e7fb      	b.n	800b3b6 <__ascii_mbtowc+0x16>
 800b3be:	f06f 0001 	mvn.w	r0, #1
 800b3c2:	e7f8      	b.n	800b3b6 <__ascii_mbtowc+0x16>

0800b3c4 <_malloc_usable_size_r>:
 800b3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c8:	1f18      	subs	r0, r3, #4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	bfbc      	itt	lt
 800b3ce:	580b      	ldrlt	r3, [r1, r0]
 800b3d0:	18c0      	addlt	r0, r0, r3
 800b3d2:	4770      	bx	lr

0800b3d4 <__ascii_wctomb>:
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4608      	mov	r0, r1
 800b3d8:	b141      	cbz	r1, 800b3ec <__ascii_wctomb+0x18>
 800b3da:	2aff      	cmp	r2, #255	@ 0xff
 800b3dc:	d904      	bls.n	800b3e8 <__ascii_wctomb+0x14>
 800b3de:	228a      	movs	r2, #138	@ 0x8a
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3e6:	4770      	bx	lr
 800b3e8:	700a      	strb	r2, [r1, #0]
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <_init>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	bf00      	nop
 800b3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f6:	bc08      	pop	{r3}
 800b3f8:	469e      	mov	lr, r3
 800b3fa:	4770      	bx	lr

0800b3fc <_fini>:
 800b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fe:	bf00      	nop
 800b400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b402:	bc08      	pop	{r3}
 800b404:	469e      	mov	lr, r3
 800b406:	4770      	bx	lr
