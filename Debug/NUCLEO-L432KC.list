
NUCLEO-L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001494  0800b688  0800b688  0000c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb1c  0800cb1c  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb1c  0800cb1c  0000db1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb24  0800cb24  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb24  0800cb24  0000db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb28  0800cb28  0000db28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800cb2c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  200001e0  0800cd0c  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  0800cd0c  0000eb68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b958  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000413b  00000000  00000000  00029b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0002dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001304  00000000  00000000  0002f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026230  00000000  00000000  0003084c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb9c  00000000  00000000  00056a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0fb5  00000000  00000000  00076618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001575cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007848  00000000  00000000  00157610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b670 	.word	0x0800b670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b670 	.word	0x0800b670

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	@ 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <hm10_uart_handle_tx>:
		show_error(hm10_error, sizeof(hm10_error), SerialUART_Out);
	}
}

void hm10_uart_handle_tx()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	// clear the TX buffer after sending
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <hm10_uart_handle_rx>:

void hm10_uart_handle_rx(uint8_t rx_data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	if (rx_data_s == 79 && rx_data == 75) // received the OK response
 8000f66:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <hm10_uart_handle_rx+0xe4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b4f      	cmp	r3, #79	@ 0x4f
 8000f6c:	d106      	bne.n	8000f7c <hm10_uart_handle_rx+0x20>
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b4b      	cmp	r3, #75	@ 0x4b
 8000f72:	d103      	bne.n	8000f7c <hm10_uart_handle_rx+0x20>
	{
		incoming_ok_cmd = true;
 8000f74:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <hm10_uart_handle_rx+0xe8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e05a      	b.n	8001032 <hm10_uart_handle_rx+0xd6>
	}
	else if (incoming_ok_cmd) // parse the next character for OK command
 8000f7c:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <hm10_uart_handle_rx+0xe8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <hm10_uart_handle_rx+0x32>
	{
		parse_OK_cmd(rx_data);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f864 	bl	8001054 <parse_OK_cmd>
 8000f8c:	e051      	b.n	8001032 <hm10_uart_handle_rx+0xd6>
	}
	// Check if incoming characters are saying YES or NO to turn the LED on or off
	else if (rx_data_s == 78 && rx_data == 79) // ASCII for N and O
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <hm10_uart_handle_rx+0xe4>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f94:	d109      	bne.n	8000faa <hm10_uart_handle_rx+0x4e>
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b4f      	cmp	r3, #79	@ 0x4f
 8000f9a:	d106      	bne.n	8000faa <hm10_uart_handle_rx+0x4e>
	{
		// turn the green LED off
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f003 f932 	bl	800420c <HAL_GPIO_WritePin>
 8000fa8:	e043      	b.n	8001032 <hm10_uart_handle_rx+0xd6>
	}
	else if (rx_data_s == 89 && rx_data == 69) // ASCII for Y and E
 8000faa:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <hm10_uart_handle_rx+0xe4>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b59      	cmp	r3, #89	@ 0x59
 8000fb0:	d109      	bne.n	8000fc6 <hm10_uart_handle_rx+0x6a>
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b45      	cmp	r3, #69	@ 0x45
 8000fb6:	d106      	bne.n	8000fc6 <hm10_uart_handle_rx+0x6a>
	{
		// turn the green LED on
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2102      	movs	r1, #2
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f003 f924 	bl	800420c <HAL_GPIO_WritePin>
 8000fc4:	e035      	b.n	8001032 <hm10_uart_handle_rx+0xd6>
	}
	// otherwise check if device is sending it's name
	else if (rx_data_s == 36 && rx_data == 36) // $$ code for start of sending device name
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <hm10_uart_handle_rx+0xe4>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b24      	cmp	r3, #36	@ 0x24
 8000fcc:	d106      	bne.n	8000fdc <hm10_uart_handle_rx+0x80>
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b24      	cmp	r3, #36	@ 0x24
 8000fd2:	d103      	bne.n	8000fdc <hm10_uart_handle_rx+0x80>
	{
		incoming_device_name = true;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <hm10_uart_handle_rx+0xec>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e02a      	b.n	8001032 <hm10_uart_handle_rx+0xd6>
	}
	// received end of the device name(!!) or 20 chars, print out the name
	else if ((rx_data_s == 33 && rx_data == 33) || name_buffer_counter == 21)
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <hm10_uart_handle_rx+0xe4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b21      	cmp	r3, #33	@ 0x21
 8000fe2:	d102      	bne.n	8000fea <hm10_uart_handle_rx+0x8e>
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b21      	cmp	r3, #33	@ 0x21
 8000fe8:	d003      	beq.n	8000ff2 <hm10_uart_handle_rx+0x96>
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <hm10_uart_handle_rx+0xf0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b15      	cmp	r3, #21
 8000ff0:	d10e      	bne.n	8001010 <hm10_uart_handle_rx+0xb4>
	{
		// print the device name out over i2c to the display
		print_device_name((char *)rx_name_buffer_s);
 8000ff2:	4817      	ldr	r0, [pc, #92]	@ (8001050 <hm10_uart_handle_rx+0xf4>)
 8000ff4:	f000 ffc0 	bl	8001f78 <print_device_name>

		// reset the name flag, counter and buffer
		incoming_device_name = false;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <hm10_uart_handle_rx+0xec>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
		name_buffer_counter = 0;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <hm10_uart_handle_rx+0xf0>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
		memset(rx_name_buffer_s, '\0', (size_t)100);
 8001004:	2264      	movs	r2, #100	@ 0x64
 8001006:	2100      	movs	r1, #0
 8001008:	4811      	ldr	r0, [pc, #68]	@ (8001050 <hm10_uart_handle_rx+0xf4>)
 800100a:	f008 fa67 	bl	80094dc <memset>
 800100e:	e010      	b.n	8001032 <hm10_uart_handle_rx+0xd6>
	}
	else if (incoming_device_name && rx_data != 33) // ignore the ! after the name ends
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <hm10_uart_handle_rx+0xec>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00c      	beq.n	8001032 <hm10_uart_handle_rx+0xd6>
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b21      	cmp	r3, #33	@ 0x21
 800101c:	d009      	beq.n	8001032 <hm10_uart_handle_rx+0xd6>
	{
		rx_name_buffer_s[name_buffer_counter++] = rx_data; // store the next character for the name
 800101e:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <hm10_uart_handle_rx+0xf0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	b2d1      	uxtb	r1, r2
 8001026:	4a09      	ldr	r2, [pc, #36]	@ (800104c <hm10_uart_handle_rx+0xf0>)
 8001028:	7011      	strb	r1, [r2, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <hm10_uart_handle_rx+0xf4>)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	5453      	strb	r3, [r2, r1]
	}

	rx_data_s = rx_data; // store last character
 8001032:	4a03      	ldr	r2, [pc, #12]	@ (8001040 <hm10_uart_handle_rx+0xe4>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	7013      	strb	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200001fe 	.word	0x200001fe
 8001044:	200001fd 	.word	0x200001fd
 8001048:	200001fc 	.word	0x200001fc
 800104c:	20000264 	.word	0x20000264
 8001050:	20000200 	.word	0x20000200

08001054 <parse_OK_cmd>:

void parse_OK_cmd(uint8_t next_byte)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	if (rx_data_s == 76 && next_byte == 79) // LO for LOST indicating BLE client disconnected
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <parse_OK_cmd+0x58>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b4c      	cmp	r3, #76	@ 0x4c
 8001064:	d114      	bne.n	8001090 <parse_OK_cmd+0x3c>
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b4f      	cmp	r3, #79	@ 0x4f
 800106a:	d111      	bne.n	8001090 <parse_OK_cmd+0x3c>
	{
		// clear the connection and device name from LCD2
		incoming_ok_cmd = false;
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <parse_OK_cmd+0x5c>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		print_device_name("");
 8001072:	4810      	ldr	r0, [pc, #64]	@ (80010b4 <parse_OK_cmd+0x60>)
 8001074:	f000 ff80 	bl	8001f78 <print_device_name>
		incoming_device_name = false;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <parse_OK_cmd+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
		name_buffer_counter = 0;
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <parse_OK_cmd+0x68>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
		memset(rx_name_buffer_s, '\0', (size_t)100);
 8001084:	2264      	movs	r2, #100	@ 0x64
 8001086:	2100      	movs	r1, #0
 8001088:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <parse_OK_cmd+0x6c>)
 800108a:	f008 fa27 	bl	80094dc <memset>
	else if (rx_data_s == 67 && next_byte == 79) // CO for CONN indicating the BLE client connected
	{
		incoming_ok_cmd = false;
	}
	// add more commands when they're needed
}
 800108e:	e009      	b.n	80010a4 <parse_OK_cmd+0x50>
	else if (rx_data_s == 67 && next_byte == 79) // CO for CONN indicating the BLE client connected
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <parse_OK_cmd+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b43      	cmp	r3, #67	@ 0x43
 8001096:	d105      	bne.n	80010a4 <parse_OK_cmd+0x50>
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b4f      	cmp	r3, #79	@ 0x4f
 800109c:	d102      	bne.n	80010a4 <parse_OK_cmd+0x50>
		incoming_ok_cmd = false;
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <parse_OK_cmd+0x5c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001fe 	.word	0x200001fe
 80010b0:	200001fd 	.word	0x200001fd
 80010b4:	0800b688 	.word	0x0800b688
 80010b8:	200001fc 	.word	0x200001fc
 80010bc:	20000264 	.word	0x20000264
 80010c0:	20000200 	.word	0x20000200

080010c4 <mpu6050_init>:
/*!
 * \brief     Init function used to setup this module and the accelerometer for sampling.
 * \return    device_init_complete_s - True is the device is initialized okay, false if not.
 */
bool mpu6050_init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	device_init_complete_s = (who_am_i() == true) ? true : false;
 80010ca:	f000 f8a5 	bl	8001218 <who_am_i>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <mpu6050_init+0x9c>)
 80010d4:	701a      	strb	r2, [r3, #0]
	if (device_init_complete_s == false)
 80010d6:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <mpu6050_init+0x9c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	f083 0301 	eor.w	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <mpu6050_init+0x24>
	{
		return false; // early termination if get_who_am_i() failed
 80010e4:	2300      	movs	r3, #0
 80010e6:	e036      	b.n	8001156 <mpu6050_init+0x92>
	}

	// Need to take the accelerometer out of sleep mode.
	uint8_t data = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	71fb      	strb	r3, [r7, #7]
	bool pwr_mgmt_write = write_register(MPU6050_REG_PWR_MGMT_1, data);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4619      	mov	r1, r3
 80010f0:	206b      	movs	r0, #107	@ 0x6b
 80010f2:	f000 f8c5 	bl	8001280 <write_register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	71bb      	strb	r3, [r7, #6]
	assert(pwr_mgmt_write);
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d105      	bne.n	800110c <mpu6050_init+0x48>
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <mpu6050_init+0xa0>)
 8001102:	4a19      	ldr	r2, [pc, #100]	@ (8001168 <mpu6050_init+0xa4>)
 8001104:	212e      	movs	r1, #46	@ 0x2e
 8001106:	4819      	ldr	r0, [pc, #100]	@ (800116c <mpu6050_init+0xa8>)
 8001108:	f007 fc50 	bl	80089ac <__assert_func>

	// Set data rate to 1KHz by writing MPU6050_REG_SMPRT_DIV register.
	data = 0x07;
 800110c:	2307      	movs	r3, #7
 800110e:	71fb      	strb	r3, [r7, #7]
	bool set_data_rate = write_register(MPU6050_REG_SMPRT_DIV, data);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4619      	mov	r1, r3
 8001114:	2019      	movs	r0, #25
 8001116:	f000 f8b3 	bl	8001280 <write_register>
 800111a:	4603      	mov	r3, r0
 800111c:	717b      	strb	r3, [r7, #5]
	assert(set_data_rate);
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d105      	bne.n	8001130 <mpu6050_init+0x6c>
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <mpu6050_init+0xac>)
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <mpu6050_init+0xa4>)
 8001128:	2133      	movs	r1, #51	@ 0x33
 800112a:	4810      	ldr	r0, [pc, #64]	@ (800116c <mpu6050_init+0xa8>)
 800112c:	f007 fc3e 	bl	80089ac <__assert_func>

	// Set accelerometer configuration to +-2g.
	data = 0x00;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
	bool set_accel = write_register(MPU6050_REG_ACCEL_CONFIG, data);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	4619      	mov	r1, r3
 8001138:	201c      	movs	r0, #28
 800113a:	f000 f8a1 	bl	8001280 <write_register>
 800113e:	4603      	mov	r3, r0
 8001140:	713b      	strb	r3, [r7, #4]
	assert(set_accel);
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d105      	bne.n	8001154 <mpu6050_init+0x90>
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <mpu6050_init+0xb0>)
 800114a:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <mpu6050_init+0xa4>)
 800114c:	2138      	movs	r1, #56	@ 0x38
 800114e:	4807      	ldr	r0, [pc, #28]	@ (800116c <mpu6050_init+0xa8>)
 8001150:	f007 fc2c 	bl	80089ac <__assert_func>

	return true;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000265 	.word	0x20000265
 8001164:	0800b68c 	.word	0x0800b68c
 8001168:	0800b7e8 	.word	0x0800b7e8
 800116c:	0800b69c 	.word	0x0800b69c
 8001170:	0800b6c4 	.word	0x0800b6c4
 8001174:	0800b6d4 	.word	0x0800b6d4

08001178 <mpu6050_get_temperature_data>:

	return (float)z_axis/16384.0;
}

float mpu6050_get_temperature_data(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	if (!device_init_complete_s)
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <mpu6050_get_temperature_data+0x98>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <mpu6050_get_temperature_data+0x1a>
	{
		return 0u;
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e031      	b.n	80011f6 <mpu6050_get_temperature_data+0x7e>
	}

	short temperature = 0; // resultant value holder used for combining L and H 8 bit values
 8001192:	2300      	movs	r3, #0
 8001194:	80fb      	strh	r3, [r7, #6]
	uint8_t temp_l = read_register(MPU6050_REG_TEMP_OUT_L);
 8001196:	2042      	movs	r0, #66	@ 0x42
 8001198:	f000 f854 	bl	8001244 <read_register>
 800119c:	4603      	mov	r3, r0
 800119e:	717b      	strb	r3, [r7, #5]
	uint8_t temp_h = read_register(MPU6050_REG_TEMP_OUT_H);
 80011a0:	2041      	movs	r0, #65	@ 0x41
 80011a2:	f000 f84f 	bl	8001244 <read_register>
 80011a6:	4603      	mov	r3, r0
 80011a8:	713b      	strb	r3, [r7, #4]
	// combine the 2 with a bit shift and an or operator
	temperature = (temp_h << 8) | temp_l;
 80011aa:	793b      	ldrb	r3, [r7, #4]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	80fb      	strh	r3, [r7, #6]

	// convert to Celcius per mpu6050 datasheet
	return (float)temperature/340.0 + 36.53;
 80011b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c4:	ee17 0a90 	vmov	r0, s15
 80011c8:	f7ff f9c8 	bl	800055c <__aeabi_f2d>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <mpu6050_get_temperature_data+0x9c>)
 80011d2:	f7ff fb45 	bl	8000860 <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a30a      	add	r3, pc, #40	@ (adr r3, 8001208 <mpu6050_get_temperature_data+0x90>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff f85c 	bl	80002a0 <__adddf3>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fce4 	bl	8000bbc <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	0a3d70a4 	.word	0x0a3d70a4
 800120c:	404243d7 	.word	0x404243d7
 8001210:	20000265 	.word	0x20000265
 8001214:	40754000 	.word	0x40754000

08001218 <who_am_i>:
/*!
 * \brief     Reads the WHO_AM_I register of the MPU6050.
 * \return    device_present - True is the register value was read correctly, false if not.
 */
bool who_am_i(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	bool device_present = false;
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	71bb      	strb	r3, [r7, #6]

	reg_value = read_register(MPU6050_REG_WHO_AM_I);
 8001226:	2075      	movs	r0, #117	@ 0x75
 8001228:	f000 f80c 	bl	8001244 <read_register>
 800122c:	4603      	mov	r3, r0
 800122e:	71bb      	strb	r3, [r7, #6]
	if (reg_value == WHO_AM_I_VALUE)
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	2b68      	cmp	r3, #104	@ 0x68
 8001234:	d101      	bne.n	800123a <who_am_i+0x22>
	{
		device_present = true;
 8001236:	2301      	movs	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
	}

	return device_present;
 800123a:	79fb      	ldrb	r3, [r7, #7]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <read_register>:
 * \brief     Reads from a register address passed into the function.
 * \param[in] reg_add - Address of the register we want to read.
 * \return    reg_val - Value of the register we read from.
 */
uint8_t read_register(uint8_t reg_add)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af04      	add	r7, sp, #16
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef i2c_rx_okay = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, reg_add, 1, &reg_value, 1, I2C_MAX_TIMEOUT);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	b29a      	uxth	r2, r3
 8001256:	2364      	movs	r3, #100	@ 0x64
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f107 030e 	add.w	r3, r7, #14
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	21d0      	movs	r1, #208	@ 0xd0
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <read_register+0x38>)
 800126a:	f003 f997 	bl	800459c <HAL_I2C_Mem_Read>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
	if (i2c_rx_okay != HAL_OK)
	{
		// handle the error
	}
	return reg_value;
 8001272:	7bbb      	ldrb	r3, [r7, #14]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000740 	.word	0x20000740

08001280 <write_register>:
 * \param[in] reg_add - Address of the register we want to write to.
 * \param[in] reg_val - Value of the register we want to write.
 * \return    True is the register write was successful, false if not.
 */
bool write_register(uint8_t reg_add, uint8_t reg_val)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af04      	add	r7, sp, #16
 8001286:	4603      	mov	r3, r0
 8001288:	460a      	mov	r2, r1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef i2c_tx_okay = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, reg_add, 1, &reg_val, 1, I2C_MAX_TIMEOUT);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	b29a      	uxth	r2, r3
 8001294:	2364      	movs	r3, #100	@ 0x64
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2301      	movs	r3, #1
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	21d0      	movs	r1, #208	@ 0xd0
 80012a4:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <write_register+0x44>)
 80012a6:	f003 f865 	bl	8004374 <HAL_I2C_Mem_Write>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
	if (i2c_tx_okay != HAL_OK)
	{
		// handle the error
	}
	return i2c_tx_okay == HAL_OK;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000740 	.word	0x20000740

080012c8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <ssd1306_WriteCommand>:

// LCD number currently selected
static LCD_NUMBER current_lcd = LCD_NUMBER_1;

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	if (current_lcd == LCD_NUMBER_1)
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <ssd1306_WriteCommand+0x50>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10d      	bne.n	8001306 <ssd1306_WriteCommand+0x2e>
	{
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR_1, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2178      	movs	r1, #120	@ 0x78
 80012fe:	480b      	ldr	r0, [pc, #44]	@ (800132c <ssd1306_WriteCommand+0x54>)
 8001300:	f003 f838 	bl	8004374 <HAL_I2C_Mem_Write>
	}
	else
	{
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR_2, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
	}
}
 8001304:	e00c      	b.n	8001320 <ssd1306_WriteCommand+0x48>
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR_2, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2200      	movs	r2, #0
 8001318:	217a      	movs	r1, #122	@ 0x7a
 800131a:	4804      	ldr	r0, [pc, #16]	@ (800132c <ssd1306_WriteCommand+0x54>)
 800131c:	f003 f82a 	bl	8004374 <HAL_I2C_Mem_Write>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000266 	.word	0x20000266
 800132c:	20000794 	.word	0x20000794

08001330 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af04      	add	r7, sp, #16
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]

	if (current_lcd == LCD_NUMBER_1)
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <ssd1306_WriteData+0x54>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10e      	bne.n	8001360 <ssd1306_WriteData+0x30>
	{
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR_1, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800134a:	9202      	str	r2, [sp, #8]
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2240      	movs	r2, #64	@ 0x40
 8001356:	2178      	movs	r1, #120	@ 0x78
 8001358:	480b      	ldr	r0, [pc, #44]	@ (8001388 <ssd1306_WriteData+0x58>)
 800135a:	f003 f80b 	bl	8004374 <HAL_I2C_Mem_Write>
	}
	else
	{
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR_2, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
	}
}
 800135e:	e00d      	b.n	800137c <ssd1306_WriteData+0x4c>
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR_2, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001368:	9202      	str	r2, [sp, #8]
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	2240      	movs	r2, #64	@ 0x40
 8001374:	217a      	movs	r1, #122	@ 0x7a
 8001376:	4804      	ldr	r0, [pc, #16]	@ (8001388 <ssd1306_WriteData+0x58>)
 8001378:	f002 fffc 	bl	8004374 <HAL_I2C_Mem_Write>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000266 	.word	0x20000266
 8001388:	20000794 	.word	0x20000794

0800138c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001390:	f7ff ff9a 	bl	80012c8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	@ 0x64
 8001396:	f001 fba9 	bl	8002aec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800139a:	2000      	movs	r0, #0
 800139c:	f000 fa40 	bl	8001820 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80013a0:	2020      	movs	r0, #32
 80013a2:	f7ff ff99 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff ff96 	bl	80012d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80013ac:	20b0      	movs	r0, #176	@ 0xb0
 80013ae:	f7ff ff93 	bl	80012d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80013b2:	20c8      	movs	r0, #200	@ 0xc8
 80013b4:	f7ff ff90 	bl	80012d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ff8d 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80013be:	2010      	movs	r0, #16
 80013c0:	f7ff ff8a 	bl	80012d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80013c4:	2040      	movs	r0, #64	@ 0x40
 80013c6:	f7ff ff87 	bl	80012d8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80013ca:	20ff      	movs	r0, #255	@ 0xff
 80013cc:	f000 fa15 	bl	80017fa <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80013d0:	20a1      	movs	r0, #161	@ 0xa1
 80013d2:	f7ff ff81 	bl	80012d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80013d6:	20a6      	movs	r0, #166	@ 0xa6
 80013d8:	f7ff ff7e 	bl	80012d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80013dc:	20a8      	movs	r0, #168	@ 0xa8
 80013de:	f7ff ff7b 	bl	80012d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80013e2:	203f      	movs	r0, #63	@ 0x3f
 80013e4:	f7ff ff78 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013e8:	20a4      	movs	r0, #164	@ 0xa4
 80013ea:	f7ff ff75 	bl	80012d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80013ee:	20d3      	movs	r0, #211	@ 0xd3
 80013f0:	f7ff ff72 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff ff6f 	bl	80012d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013fa:	20d5      	movs	r0, #213	@ 0xd5
 80013fc:	f7ff ff6c 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001400:	20f0      	movs	r0, #240	@ 0xf0
 8001402:	f7ff ff69 	bl	80012d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001406:	20d9      	movs	r0, #217	@ 0xd9
 8001408:	f7ff ff66 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800140c:	2022      	movs	r0, #34	@ 0x22
 800140e:	f7ff ff63 	bl	80012d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001412:	20da      	movs	r0, #218	@ 0xda
 8001414:	f7ff ff60 	bl	80012d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001418:	2012      	movs	r0, #18
 800141a:	f7ff ff5d 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800141e:	20db      	movs	r0, #219	@ 0xdb
 8001420:	f7ff ff5a 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001424:	2020      	movs	r0, #32
 8001426:	f7ff ff57 	bl	80012d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800142a:	208d      	movs	r0, #141	@ 0x8d
 800142c:	f7ff ff54 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001430:	2014      	movs	r0, #20
 8001432:	f7ff ff51 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001436:	2001      	movs	r0, #1
 8001438:	f000 f9f2 	bl	8001820 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800143c:	2000      	movs	r0, #0
 800143e:	f000 f81f 	bl	8001480 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001442:	f000 f835 	bl	80014b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <ssd1306_Init+0xd0>)
 8001448:	2200      	movs	r2, #0
 800144a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <ssd1306_Init+0xd0>)
 800144e:	2200      	movs	r2, #0
 8001450:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001452:	4b02      	ldr	r3, [pc, #8]	@ (800145c <ssd1306_Init+0xd0>)
 8001454:	2201      	movs	r2, #1
 8001456:	711a      	strb	r2, [r3, #4]
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000668 	.word	0x20000668

08001460 <ssd1306_set_LCD>:

/* set the LCD you want to write to next */
void ssd1306_set_LCD(LCD_NUMBER lcd)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	current_lcd = lcd;
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <ssd1306_set_LCD+0x1c>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	7013      	strb	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000266 	.word	0x20000266

08001480 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <ssd1306_Fill+0x14>
 8001490:	2300      	movs	r3, #0
 8001492:	e000      	b.n	8001496 <ssd1306_Fill+0x16>
 8001494:	23ff      	movs	r3, #255	@ 0xff
 8001496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800149a:	4619      	mov	r1, r3
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <ssd1306_Fill+0x2c>)
 800149e:	f008 f81d 	bl	80094dc <memset>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000268 	.word	0x20000268

080014b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e016      	b.n	80014ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	3b50      	subs	r3, #80	@ 0x50
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff08 	bl	80012d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ff05 	bl	80012d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80014ce:	2010      	movs	r0, #16
 80014d0:	f7ff ff02 	bl	80012d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <ssd1306_UpdateScreen+0x4c>)
 80014da:	4413      	add	r3, r2
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff26 	bl	8001330 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	3301      	adds	r3, #1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b07      	cmp	r3, #7
 80014ee:	d9e5      	bls.n	80014bc <ssd1306_UpdateScreen+0xc>
    }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000268 	.word	0x20000268

08001500 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	460b      	mov	r3, r1
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	4613      	mov	r3, r2
 8001510:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db3d      	blt.n	8001596 <ssd1306_DrawPixel+0x96>
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	2b3f      	cmp	r3, #63	@ 0x3f
 800151e:	d83a      	bhi.n	8001596 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001520:	797b      	ldrb	r3, [r7, #5]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d11a      	bne.n	800155c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	4603      	mov	r3, r0
 8001530:	01db      	lsls	r3, r3, #7
 8001532:	4413      	add	r3, r2
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <ssd1306_DrawPixel+0xa4>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	b25a      	sxtb	r2, r3
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	b25b      	sxtb	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b259      	sxtb	r1, r3
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	4603      	mov	r3, r0
 8001550:	01db      	lsls	r3, r3, #7
 8001552:	4413      	add	r3, r2
 8001554:	b2c9      	uxtb	r1, r1
 8001556:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <ssd1306_DrawPixel+0xa4>)
 8001558:	54d1      	strb	r1, [r2, r3]
 800155a:	e01d      	b.n	8001598 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	b2d8      	uxtb	r0, r3
 8001564:	4603      	mov	r3, r0
 8001566:	01db      	lsls	r3, r3, #7
 8001568:	4413      	add	r3, r2
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <ssd1306_DrawPixel+0xa4>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	b25a      	sxtb	r2, r3
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	b25b      	sxtb	r3, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	4013      	ands	r3, r2
 8001584:	b259      	sxtb	r1, r3
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	4603      	mov	r3, r0
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	4413      	add	r3, r2
 800158e:	b2c9      	uxtb	r1, r1
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <ssd1306_DrawPixel+0xa4>)
 8001592:	54d1      	strb	r1, [r2, r3]
 8001594:	e000      	b.n	8001598 <ssd1306_DrawPixel+0x98>
        return;
 8001596:	bf00      	nop
    }
}
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000268 	.word	0x20000268

080015a8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4604      	mov	r4, r0
 80015b0:	4638      	mov	r0, r7
 80015b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80015b6:	4623      	mov	r3, r4
 80015b8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b1f      	cmp	r3, #31
 80015be:	d902      	bls.n	80015c6 <ssd1306_WriteChar+0x1e>
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80015c4:	d901      	bls.n	80015ca <ssd1306_WriteChar+0x22>
        return 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e077      	b.n	80016ba <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80015ca:	4b3e      	ldr	r3, [pc, #248]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	783b      	ldrb	r3, [r7, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	2b80      	cmp	r3, #128	@ 0x80
 80015d6:	dc06      	bgt.n	80015e6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80015d8:	4b3a      	ldr	r3, [pc, #232]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 80015da:	885b      	ldrh	r3, [r3, #2]
 80015dc:	461a      	mov	r2, r3
 80015de:	787b      	ldrb	r3, [r7, #1]
 80015e0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80015e2:	2b40      	cmp	r3, #64	@ 0x40
 80015e4:	dd01      	ble.n	80015ea <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e067      	b.n	80016ba <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e04e      	b.n	800168e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	3b20      	subs	r3, #32
 80015f6:	7879      	ldrb	r1, [r7, #1]
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	440b      	add	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	e036      	b.n	800167e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001620:	4b28      	ldr	r3, [pc, #160]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b2d8      	uxtb	r0, r3
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 8001630:	885b      	ldrh	r3, [r3, #2]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4413      	add	r3, r2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff ff5d 	bl	8001500 <ssd1306_DrawPixel>
 8001646:	e017      	b.n	8001678 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001648:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4413      	add	r3, r2
 8001654:	b2d8      	uxtb	r0, r3
 8001656:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 8001658:	885b      	ldrh	r3, [r3, #2]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4413      	add	r3, r2
 8001662:	b2d9      	uxtb	r1, r3
 8001664:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	f7ff ff44 	bl	8001500 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	3301      	adds	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	783b      	ldrb	r3, [r7, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4293      	cmp	r3, r2
 8001686:	d3c3      	bcc.n	8001610 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	3301      	adds	r3, #1
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	787b      	ldrb	r3, [r7, #1]
 8001690:	461a      	mov	r2, r3
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4293      	cmp	r3, r2
 8001696:	d3ab      	bcc.n	80015f0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	2a00      	cmp	r2, #0
 80016a0:	d005      	beq.n	80016ae <ssd1306_WriteChar+0x106>
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	3a20      	subs	r2, #32
 80016a8:	440a      	add	r2, r1
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	e000      	b.n	80016b0 <ssd1306_WriteChar+0x108>
 80016ae:	783a      	ldrb	r2, [r7, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <ssd1306_WriteChar+0x11c>)
 80016b6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000668 	.word	0x20000668

080016c8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	4638      	mov	r0, r7
 80016d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80016d6:	e013      	b.n	8001700 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	7818      	ldrb	r0, [r3, #0]
 80016dc:	7e3b      	ldrb	r3, [r7, #24]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	463b      	mov	r3, r7
 80016e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e4:	f7ff ff60 	bl	80015a8 <ssd1306_WriteChar>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d002      	beq.n	80016fa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	e008      	b.n	800170c <ssd1306_WriteString+0x44>
        }
        str++;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e7      	bne.n	80016d8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	781b      	ldrb	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	460a      	mov	r2, r1
 800171e:	71fb      	strb	r3, [r7, #7]
 8001720:	4613      	mov	r3, r2
 8001722:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <ssd1306_SetCursor+0x2c>)
 800172a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <ssd1306_SetCursor+0x2c>)
 8001732:	805a      	strh	r2, [r3, #2]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000668 	.word	0x20000668

08001744 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	603a      	str	r2, [r7, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	460b      	mov	r3, r1
 8001754:	71bb      	strb	r3, [r7, #6]
 8001756:	4613      	mov	r3, r2
 8001758:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800175a:	797b      	ldrb	r3, [r7, #5]
 800175c:	3307      	adds	r3, #7
 800175e:	2b00      	cmp	r3, #0
 8001760:	da00      	bge.n	8001764 <ssd1306_DrawBitmap+0x20>
 8001762:	3307      	adds	r3, #7
 8001764:	10db      	asrs	r3, r3, #3
 8001766:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db3e      	blt.n	80017f2 <ssd1306_DrawBitmap+0xae>
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	2b3f      	cmp	r3, #63	@ 0x3f
 8001778:	d83b      	bhi.n	80017f2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800177a:	2300      	movs	r3, #0
 800177c:	73bb      	strb	r3, [r7, #14]
 800177e:	e033      	b.n	80017e8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001780:	2300      	movs	r3, #0
 8001782:	737b      	strb	r3, [r7, #13]
 8001784:	e026      	b.n	80017d4 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001786:	7b7b      	ldrb	r3, [r7, #13]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e00d      	b.n	80017b4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	7b7a      	ldrb	r2, [r7, #13]
 80017a4:	08d2      	lsrs	r2, r2, #3
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	4413      	add	r3, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80017b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da08      	bge.n	80017ce <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	4413      	add	r3, r2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	7f3a      	ldrb	r2, [r7, #28]
 80017c6:	79b9      	ldrb	r1, [r7, #6]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fe99 	bl	8001500 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	3301      	adds	r3, #1
 80017d2:	737b      	strb	r3, [r7, #13]
 80017d4:	7b7a      	ldrb	r2, [r7, #13]
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d3d4      	bcc.n	8001786 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
 80017de:	3301      	adds	r3, #1
 80017e0:	73bb      	strb	r3, [r7, #14]
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	3301      	adds	r3, #1
 80017e6:	71bb      	strb	r3, [r7, #6]
 80017e8:	7bba      	ldrb	r2, [r7, #14]
 80017ea:	7e3b      	ldrb	r3, [r7, #24]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d3c7      	bcc.n	8001780 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80017f0:	e000      	b.n	80017f4 <ssd1306_DrawBitmap+0xb0>
        return;
 80017f2:	bf00      	nop
}
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001804:	2381      	movs	r3, #129	@ 0x81
 8001806:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd64 	bl	80012d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fd60 	bl	80012d8 <ssd1306_WriteCommand>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001830:	23af      	movs	r3, #175	@ 0xaf
 8001832:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <ssd1306_SetDisplayOn+0x38>)
 8001836:	2201      	movs	r2, #1
 8001838:	715a      	strb	r2, [r3, #5]
 800183a:	e004      	b.n	8001846 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800183c:	23ae      	movs	r3, #174	@ 0xae
 800183e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <ssd1306_SetDisplayOn+0x38>)
 8001842:	2200      	movs	r2, #0
 8001844:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fd45 	bl	80012d8 <ssd1306_WriteCommand>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000668 	.word	0x20000668

0800185c <draw_github_intro>:
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
    ssd1306_UpdateScreen();
}

void draw_github_intro()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff fe0c 	bl	8001480 <ssd1306_Fill>
	ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 8001868:	2301      	movs	r3, #1
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2340      	movs	r3, #64	@ 0x40
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <draw_github_intro+0x2c>)
 8001874:	2100      	movs	r1, #0
 8001876:	2020      	movs	r0, #32
 8001878:	f7ff ff64 	bl	8001744 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800187c:	f7ff fe18 	bl	80014b0 <ssd1306_UpdateScreen>
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	0800c560 	.word	0x0800c560

0800188c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001892:	463b      	mov	r3, r7
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <MX_ADC1_Init+0xc8>)
 80018a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018a8:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b4:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ba:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018c0:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018c2:	2208      	movs	r2, #8
 80018c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ec:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_ADC1_Init+0xc4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001904:	4812      	ldr	r0, [pc, #72]	@ (8001950 <MX_ADC1_Init+0xc4>)
 8001906:	f001 fadd 	bl	8002ec4 <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001910:	f000 fbde 	bl	80020d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001914:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_ADC1_Init+0xcc>)
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001918:	2306      	movs	r3, #6
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001920:	237f      	movs	r3, #127	@ 0x7f
 8001922:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001924:	2304      	movs	r3, #4
 8001926:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_ADC1_Init+0xc4>)
 8001932:	f001 fd09 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800193c:	f000 fbc8 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  // ADC needs to be started to work.
  (void)HAL_ADC_Start(&hadc1);
 8001940:	4803      	ldr	r0, [pc, #12]	@ (8001950 <MX_ADC1_Init+0xc4>)
 8001942:	f001 fc01 	bl	8003148 <HAL_ADC_Start>

  /* USER CODE END ADC1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200006dc 	.word	0x200006dc
 8001954:	50040000 	.word	0x50040000
 8001958:	25b00200 	.word	0x25b00200

0800195c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b09e      	sub	sp, #120	@ 0x78
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	2254      	movs	r2, #84	@ 0x54
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f007 fdad 	bl	80094dc <memset>
  if(adcHandle->Instance==ADC1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a25      	ldr	r2, [pc, #148]	@ (8001a1c <HAL_ADC_MspInit+0xc0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d143      	bne.n	8001a14 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800198c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001990:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001992:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001996:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80019a0:	2310      	movs	r3, #16
 80019a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019a4:	2307      	movs	r3, #7
 80019a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019a8:	2302      	movs	r3, #2
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f90e 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80019c6:	f000 fb83 	bl	80020d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_ADC_MspInit+0xc4>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	4a14      	ldr	r2, [pc, #80]	@ (8001a20 <HAL_ADC_MspInit+0xc4>)
 80019d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_ADC_MspInit+0xc4>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_ADC_MspInit+0xc4>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a20 <HAL_ADC_MspInit+0xc4>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <HAL_ADC_MspInit+0xc4>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019fa:	2310      	movs	r3, #16
 80019fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019fe:	230b      	movs	r3, #11
 8001a00:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a10:	f002 fa92 	bl	8003f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a14:	bf00      	nop
 8001a16:	3778      	adds	r7, #120	@ 0x78
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	50040000 	.word	0x50040000
 8001a20:	40021000 	.word	0x40021000

08001a24 <pollADC>:
}

/* USER CODE BEGIN 1 */

void pollADC(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b09c      	sub	sp, #112	@ 0x70
 8001a28:	af02      	add	r7, sp, #8
	// usage of both UART and the ADC
	adc_ok = HAL_ADC_PollForConversion(&hadc1, 100);
 8001a2a:	2164      	movs	r1, #100	@ 0x64
 8001a2c:	482f      	ldr	r0, [pc, #188]	@ (8001aec <pollADC+0xc8>)
 8001a2e:	f001 fbee 	bl	800320e <HAL_ADC_PollForConversion>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <pollADC+0xcc>)
 8001a38:	701a      	strb	r2, [r3, #0]

	if (adc_ok == HAL_OK)
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <pollADC+0xcc>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d14a      	bne.n	8001ad8 <pollADC+0xb4>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 8001a42:	482a      	ldr	r0, [pc, #168]	@ (8001aec <pollADC+0xc8>)
 8001a44:	f001 fc72 	bl	800332c <HAL_ADC_GetValue>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <pollADC+0xd0>)
 8001a4c:	6013      	str	r3, [r2, #0]
		voltage = volt_per_bit * adc_value;
 8001a4e:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <pollADC+0xd0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001af8 <pollADC+0xd4>
 8001a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a62:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <pollADC+0xd8>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]
		snprintf(buffer, 100, "Voltage read from ADC was: %.6f\r\n", voltage);
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <pollADC+0xd8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd75 	bl	800055c <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	e9cd 2300 	strd	r2, r3, [sp]
 8001a7a:	4a21      	ldr	r2, [pc, #132]	@ (8001b00 <pollADC+0xdc>)
 8001a7c:	2164      	movs	r1, #100	@ 0x64
 8001a7e:	4821      	ldr	r0, [pc, #132]	@ (8001b04 <pollADC+0xe0>)
 8001a80:	f007 fc0a 	bl	8009298 <sniprintf>
		serial_uart_send_tx(buffer, 100);
 8001a84:	2164      	movs	r1, #100	@ 0x64
 8001a86:	481f      	ldr	r0, [pc, #124]	@ (8001b04 <pollADC+0xe0>)
 8001a88:	f000 ff1c 	bl	80028c4 <serial_uart_send_tx>

		// output to the OLED display
		ssd1306_set_LCD(LCD_NUMBER_1);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff fce7 	bl	8001460 <ssd1306_set_LCD>
		ssd1306_SetCursor(2, 20);
 8001a92:	2114      	movs	r1, #20
 8001a94:	2002      	movs	r0, #2
 8001a96:	f7ff fe3d 	bl	8001714 <ssd1306_SetCursor>
		char volts_msg[MAX_BUFFER_LEN] = "";
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	2260      	movs	r2, #96	@ 0x60
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f007 fd18 	bl	80094dc <memset>
		snprintf(volts_msg, MAX_BUFFER_LEN, "ADC: %.1fV", voltage);
 8001aac:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <pollADC+0xd8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd53 	bl	800055c <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	1d38      	adds	r0, r7, #4
 8001abc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac0:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <pollADC+0xe4>)
 8001ac2:	2164      	movs	r1, #100	@ 0x64
 8001ac4:	f007 fbe8 	bl	8009298 <sniprintf>
		ssd1306_WriteString(volts_msg, Font_11x18, White);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <pollADC+0xe8>)
 8001aca:	1d38      	adds	r0, r7, #4
 8001acc:	2201      	movs	r2, #1
 8001ace:	9200      	str	r2, [sp, #0]
 8001ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad2:	f7ff fdf9 	bl	80016c8 <ssd1306_WriteString>
	}
	else
	{
		serial_uart_send_tx((char *)error, 9);
	}
}
 8001ad6:	e005      	b.n	8001ae4 <pollADC+0xc0>
		serial_uart_send_tx((char *)error, 9);
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <pollADC+0xec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2109      	movs	r1, #9
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fef0 	bl	80028c4 <serial_uart_send_tx>
}
 8001ae4:	bf00      	nop
 8001ae6:	3768      	adds	r7, #104	@ 0x68
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200006dc 	.word	0x200006dc
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000670 	.word	0x20000670
 8001af8:	3a534067 	.word	0x3a534067
 8001afc:	20000674 	.word	0x20000674
 8001b00:	0800b6ec 	.word	0x0800b6ec
 8001b04:	20000678 	.word	0x20000678
 8001b08:	0800b710 	.word	0x0800b710
 8001b0c:	0800c554 	.word	0x0800c554
 8001b10:	20000004 	.word	0x20000004

08001b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a27      	ldr	r2, [pc, #156]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_GPIO_Init+0xb8>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2102      	movs	r1, #2
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b7a:	f002 fb47 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2108      	movs	r1, #8
 8001b82:	4813      	ldr	r0, [pc, #76]	@ (8001bd0 <MX_GPIO_Init+0xbc>)
 8001b84:	f002 fb42 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba2:	f002 f9c9 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <MX_GPIO_Init+0xbc>)
 8001bbe:	f002 f9bb 	bl	8003f38 <HAL_GPIO_Init>

}
 8001bc2:	bf00      	nop
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000400 	.word	0x48000400

08001bd4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001bda:	4a1d      	ldr	r2, [pc, #116]	@ (8001c50 <MX_I2C1_Init+0x7c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001be0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c54 <MX_I2C1_Init+0x80>)
 8001be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001be4:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c08:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c0e:	480f      	ldr	r0, [pc, #60]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001c10:	f002 fb14 	bl	800423c <HAL_I2C_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c1a:	f000 fa59 	bl	80020d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	480a      	ldr	r0, [pc, #40]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001c22:	f003 f897 	bl	8004d54 <HAL_I2CEx_ConfigAnalogFilter>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c2c:	f000 fa50 	bl	80020d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <MX_I2C1_Init+0x78>)
 8001c34:	f003 f8d9 	bl	8004dea <HAL_I2CEx_ConfigDigitalFilter>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f000 fa47 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  if (mpu6050_init() == false)
 8001c42:	f7ff fa3f 	bl	80010c4 <mpu6050_init>
	  // TODO: handle init error for mpu6050
  }

  /* USER CODE END I2C1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000740 	.word	0x20000740
 8001c50:	40005400 	.word	0x40005400
 8001c54:	00b07cb4 	.word	0x00b07cb4

08001c58 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c5c:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c5e:	4a27      	ldr	r2, [pc, #156]	@ (8001cfc <MX_I2C3_Init+0xa4>)
 8001c60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0060112F;
 8001c62:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c64:	4a26      	ldr	r2, [pc, #152]	@ (8001d00 <MX_I2C3_Init+0xa8>)
 8001c66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c74:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c92:	4819      	ldr	r0, [pc, #100]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001c94:	f002 fad2 	bl	800423c <HAL_I2C_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001c9e:	f000 fa17 	bl	80020d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4814      	ldr	r0, [pc, #80]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001ca6:	f003 f855 	bl	8004d54 <HAL_I2CEx_ConfigAnalogFilter>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001cb0:	f000 fa0e 	bl	80020d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4810      	ldr	r0, [pc, #64]	@ (8001cf8 <MX_I2C3_Init+0xa0>)
 8001cb8:	f003 f897 	bl	8004dea <HAL_I2CEx_ConfigDigitalFilter>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001cc2:	f000 fa05 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  ssd1306_set_LCD(LCD_NUMBER_1); // not needed, but good to be explicit about which ssd1306 we're init'ing
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff fbca 	bl	8001460 <ssd1306_set_LCD>
  ssd1306_Init();
 8001ccc:	f7ff fb5e 	bl	800138c <ssd1306_Init>

  draw_github_intro();
 8001cd0:	f7ff fdc4 	bl	800185c <draw_github_intro>
  HAL_Delay(1000); // let the logo stay on the screen for a second
 8001cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cd8:	f000 ff08 	bl	8002aec <HAL_Delay>

  ssd1306_set_LCD(LCD_NUMBER_2); // now init the 2nd LCD
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff fbbf 	bl	8001460 <ssd1306_set_LCD>
  ssd1306_Init();
 8001ce2:	f7ff fb53 	bl	800138c <ssd1306_Init>

  draw_github_intro();
 8001ce6:	f7ff fdb9 	bl	800185c <draw_github_intro>
  HAL_Delay(1000); // let the logo stay on the screen for a second
 8001cea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cee:	f000 fefd 	bl	8002aec <HAL_Delay>


  /* USER CODE END I2C3_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000794 	.word	0x20000794
 8001cfc:	40005c00 	.word	0x40005c00
 8001d00:	0060112f 	.word	0x0060112f

08001d04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0a2      	sub	sp, #136	@ 0x88
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	2254      	movs	r2, #84	@ 0x54
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f007 fbd9 	bl	80094dc <memset>
  if(i2cHandle->Instance==I2C1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e68 <HAL_I2C_MspInit+0x164>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d138      	bne.n	8001da6 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d34:	2340      	movs	r3, #64	@ 0x40
 8001d36:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 ff4b 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d4c:	f000 f9c0 	bl	80020d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b46      	ldr	r3, [pc, #280]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d54:	4a45      	ldr	r2, [pc, #276]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5c:	4b43      	ldr	r3, [pc, #268]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d68:	23c0      	movs	r3, #192	@ 0xc0
 8001d6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d84:	4619      	mov	r1, r3
 8001d86:	483a      	ldr	r0, [pc, #232]	@ (8001e70 <HAL_I2C_MspInit+0x16c>)
 8001d88:	f002 f8d6 	bl	8003f38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d8c:	4b37      	ldr	r3, [pc, #220]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	4a36      	ldr	r2, [pc, #216]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001d92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001da4:	e05c      	b.n	8001e60 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a32      	ldr	r2, [pc, #200]	@ (8001e74 <HAL_I2C_MspInit+0x170>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d157      	bne.n	8001e60 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dba:	f107 0320 	add.w	r3, r7, #32
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 ff0c 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8001dca:	f000 f981 	bl	80020d0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	4a26      	ldr	r2, [pc, #152]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dda:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4a20      	ldr	r2, [pc, #128]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e02:	2312      	movs	r3, #18
 8001e04:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e10:	2304      	movs	r3, #4
 8001e12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e20:	f002 f88a 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e24:	2310      	movs	r3, #16
 8001e26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e28:	2312      	movs	r3, #18
 8001e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e36:	2304      	movs	r3, #4
 8001e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e40:	4619      	mov	r1, r3
 8001e42:	480b      	ldr	r0, [pc, #44]	@ (8001e70 <HAL_I2C_MspInit+0x16c>)
 8001e44:	f002 f878 	bl	8003f38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001e4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_I2C_MspInit+0x168>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3788      	adds	r7, #136	@ 0x88
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400
 8001e74:	40005c00 	.word	0x40005c00

08001e78 <print_temperature_data>:
}

/* USER CODE BEGIN 1 */

void print_temperature_data(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b8      	sub	sp, #224	@ 0xe0
 8001e7c:	af02      	add	r7, sp, #8
	ssd1306_set_LCD(LCD_NUMBER_1);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff faee 	bl	8001460 <ssd1306_set_LCD>

	float temp_value = mpu6050_get_temperature_data();
 8001e84:	f7ff f978 	bl	8001178 <mpu6050_get_temperature_data>
 8001e88:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
	// comes in as C, convert to F
	// (C × 9/5) + 32
	float temp_value_F = (temp_value * 1.8) + 32.0;
 8001e8c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001e90:	f7fe fb64 	bl	800055c <__aeabi_f2d>
 8001e94:	a336      	add	r3, pc, #216	@ (adr r3, 8001f70 <print_temperature_data+0xf8>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fbb7 	bl	800060c <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <print_temperature_data+0xe8>)
 8001eac:	f7fe f9f8 	bl	80002a0 <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe80 	bl	8000bbc <__aeabi_d2f>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	char temp_msg[MAX_BUFFER_LEN] = "";
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ec6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001eca:	2260      	movs	r2, #96	@ 0x60
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 fb04 	bl	80094dc <memset>

	snprintf(temp_msg, MAX_BUFFER_LEN, "temperature is: %.1f\r\n", temp_value_F);
 8001ed4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001ed8:	f7fe fb40 	bl	800055c <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001ee4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <print_temperature_data+0xec>)
 8001eea:	2164      	movs	r1, #100	@ 0x64
 8001eec:	f007 f9d4 	bl	8009298 <sniprintf>

	// output over the uart to serial port
	uint16_t temp_buffer_len = strlen(temp_msg);
 8001ef0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe f9bb 	bl	8000270 <strlen>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
	serial_uart_send_tx(temp_msg, temp_buffer_len);
 8001f00:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8001f04:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fcda 	bl	80028c4 <serial_uart_send_tx>

	// output to the OLED display
	ssd1306_Fill(Black);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff fab5 	bl	8001480 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8001f16:	2100      	movs	r1, #0
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7ff fbfb 	bl	8001714 <ssd1306_SetCursor>
	char temp_F[MAX_BUFFER_LEN] = "";
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	2260      	movs	r2, #96	@ 0x60
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f007 fad6 	bl	80094dc <memset>
	snprintf(temp_F, MAX_BUFFER_LEN, "Temp: %.1fF", temp_value_F);
 8001f30:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001f34:	f7fe fb12 	bl	800055c <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	1d38      	adds	r0, r7, #4
 8001f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <print_temperature_data+0xf0>)
 8001f44:	2164      	movs	r1, #100	@ 0x64
 8001f46:	f007 f9a7 	bl	8009298 <sniprintf>
	ssd1306_WriteString(temp_F, Font_11x18, White);
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <print_temperature_data+0xf4>)
 8001f4c:	1d38      	adds	r0, r7, #4
 8001f4e:	2201      	movs	r2, #1
 8001f50:	9200      	str	r2, [sp, #0]
 8001f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f54:	f7ff fbb8 	bl	80016c8 <ssd1306_WriteString>
}
 8001f58:	bf00      	nop
 8001f5a:	37d8      	adds	r7, #216	@ 0xd8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40400000 	.word	0x40400000
 8001f64:	0800b71c 	.word	0x0800b71c
 8001f68:	0800b734 	.word	0x0800b734
 8001f6c:	0800c554 	.word	0x0800c554
 8001f70:	cccccccd 	.word	0xcccccccd
 8001f74:	3ffccccc 	.word	0x3ffccccc

08001f78 <print_device_name>:

void print_device_name(const char *name)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	6078      	str	r0, [r7, #4]
	// output to the LCD display
	ssd1306_set_LCD(LCD_NUMBER_2);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff fa6d 	bl	8001460 <ssd1306_set_LCD>
	ssd1306_Fill(Black);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fa7a 	bl	8001480 <ssd1306_Fill>

	if (strlen(name) > 0)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <print_device_name+0x48>
	{
		ssd1306_SetCursor(2, 0);
 8001f94:	2100      	movs	r1, #0
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7ff fbbc 	bl	8001714 <ssd1306_SetCursor>
		ssd1306_WriteString("Connected:", Font_11x18, White);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <print_device_name+0x54>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	9200      	str	r2, [sp, #0]
 8001fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa4:	480a      	ldr	r0, [pc, #40]	@ (8001fd0 <print_device_name+0x58>)
 8001fa6:	f7ff fb8f 	bl	80016c8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 20);
 8001faa:	2114      	movs	r1, #20
 8001fac:	2002      	movs	r0, #2
 8001fae:	f7ff fbb1 	bl	8001714 <ssd1306_SetCursor>
		ssd1306_WriteString((char*)name, Font_11x18, White);
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <print_device_name+0x54>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fb84 	bl	80016c8 <ssd1306_WriteString>
	}

	ssd1306_UpdateScreen();
 8001fc0:	f7ff fa76 	bl	80014b0 <ssd1306_UpdateScreen>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0800c554 	.word	0x0800c554
 8001fd0:	0800b740 	.word	0x0800b740

08001fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd8:	f000 fd13 	bl	8002a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fdc:	f000 f816 	bl	800200c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe0:	f7ff fd98 	bl	8001b14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001fe4:	f000 fac8 	bl	8002578 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001fe8:	f000 fa8c 	bl	8002504 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001fec:	f7ff fc4e 	bl	800188c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ff0:	f7ff fdf0 	bl	8001bd4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001ff4:	f7ff fe30 	bl	8001c58 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001ff8:	f000 f9a6 	bl	8002348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start the interrupt timer.
  HAL_TIM_Base_Start_IT(&htim2);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <main+0x34>)
 8001ffe:	f004 f93d 	bl	800627c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002002:	bf00      	nop
 8002004:	e7fd      	b.n	8002002 <main+0x2e>
 8002006:	bf00      	nop
 8002008:	200007ec 	.word	0x200007ec

0800200c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b096      	sub	sp, #88	@ 0x58
 8002010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	2244      	movs	r2, #68	@ 0x44
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f007 fa5e 	bl	80094dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002020:	463b      	mov	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800202e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002032:	f002 ff45 	bl	8004ec0 <HAL_PWREx_ControlVoltageScaling>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800203c:	f000 f848 	bl	80020d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002040:	f002 ff20 	bl	8004e84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <SystemClock_Config+0xc0>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204a:	4a20      	ldr	r2, [pc, #128]	@ (80020cc <SystemClock_Config+0xc0>)
 800204c:	f023 0318 	bic.w	r3, r3, #24
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002054:	2314      	movs	r3, #20
 8002056:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002058:	2301      	movs	r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002064:	2360      	movs	r3, #96	@ 0x60
 8002066:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002068:	2302      	movs	r3, #2
 800206a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800206c:	2301      	movs	r3, #1
 800206e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002074:	2310      	movs	r3, #16
 8002076:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002078:	2307      	movs	r3, #7
 800207a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800207c:	2302      	movs	r3, #2
 800207e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002080:	2302      	movs	r3, #2
 8002082:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4618      	mov	r0, r3
 800208a:	f002 ff6f 	bl	8004f6c <HAL_RCC_OscConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002094:	f000 f81c 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002098:	230f      	movs	r3, #15
 800209a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800209c:	2303      	movs	r3, #3
 800209e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	2101      	movs	r1, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fb6f 	bl	8005794 <HAL_RCC_ClockConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80020bc:	f000 f808 	bl	80020d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80020c0:	f003 ff82 	bl	8005fc8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80020c4:	bf00      	nop
 80020c6:	3758      	adds	r7, #88	@ 0x58
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <Error_Handler+0x8>

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <HAL_MspInit+0x44>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002120 <HAL_MspInit+0x44>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <HAL_MspInit+0x44>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_MspInit+0x44>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <HAL_MspInit+0x44>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6593      	str	r3, [r2, #88]	@ 0x58
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_MspInit+0x44>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <NMI_Handler+0x4>

0800212c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <MemManage_Handler+0x4>

0800213c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <UsageFault_Handler+0x4>

0800214c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f000 fc97 	bl	8002aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <TIM2_IRQHandler+0x10>)
 800218a:	f004 f92c 	bl	80063e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200007ec 	.word	0x200007ec

08002198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b2:	f007 f99f 	bl	80094f4 <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
  return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021da:	bf00      	nop
 80021dc:	e7fd      	b.n	80021da <_exit+0x12>

080021de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e00a      	b.n	8002206 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f0:	f3af 8000 	nop.w
 80021f4:	4601      	mov	r1, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	60ba      	str	r2, [r7, #8]
 80021fc:	b2ca      	uxtb	r2, r1
 80021fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbf0      	blt.n	80021f0 <_read+0x12>
  }

  return len;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e009      	b.n	800223e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	60ba      	str	r2, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	dbf1      	blt.n	800222a <_write+0x12>
  }
  return len;
 8002246:	687b      	ldr	r3, [r7, #4]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_close>:

int _close(int file)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002278:	605a      	str	r2, [r3, #4]
  return 0;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_isatty>:

int _isatty(int file)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f007 f904 	bl	80094f4 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	@ (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000c000 	.word	0x2000c000
 8002318:	00000400 	.word	0x00000400
 800231c:	200007e8 	.word	0x200007e8
 8002320:	20000b68 	.word	0x20000b68

08002324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <SystemInit+0x20>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232e:	4a05      	ldr	r2, [pc, #20]	@ (8002344 <SystemInit+0x20>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	@ 0x38
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800237a:	4b2e      	ldr	r3, [pc, #184]	@ (8002434 <MX_TIM2_Init+0xec>)
 800237c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002380:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 8002382:	4b2c      	ldr	r3, [pc, #176]	@ (8002434 <MX_TIM2_Init+0xec>)
 8002384:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238a:	4b2a      	ldr	r3, [pc, #168]	@ (8002434 <MX_TIM2_Init+0xec>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000;
 8002390:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <MX_TIM2_Init+0xec>)
 8002392:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002398:	4b26      	ldr	r3, [pc, #152]	@ (8002434 <MX_TIM2_Init+0xec>)
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <MX_TIM2_Init+0xec>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023a4:	4823      	ldr	r0, [pc, #140]	@ (8002434 <MX_TIM2_Init+0xec>)
 80023a6:	f003 ff11 	bl	80061cc <HAL_TIM_Base_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80023b0:	f7ff fe8e 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023be:	4619      	mov	r1, r3
 80023c0:	481c      	ldr	r0, [pc, #112]	@ (8002434 <MX_TIM2_Init+0xec>)
 80023c2:	f004 f991 	bl	80066e8 <HAL_TIM_ConfigClockSource>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80023cc:	f7ff fe80 	bl	80020d0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80023d0:	4818      	ldr	r0, [pc, #96]	@ (8002434 <MX_TIM2_Init+0xec>)
 80023d2:	f003 ffa7 	bl	8006324 <HAL_TIM_OC_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80023dc:	f7ff fe78 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	4811      	ldr	r0, [pc, #68]	@ (8002434 <MX_TIM2_Init+0xec>)
 80023f0:	f004 fdf4 	bl	8006fdc <HAL_TIMEx_MasterConfigSynchronization>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80023fa:	f7ff fe69 	bl	80020d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80023fe:	2300      	movs	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800240e:	463b      	mov	r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	4619      	mov	r1, r3
 8002414:	4807      	ldr	r0, [pc, #28]	@ (8002434 <MX_TIM2_Init+0xec>)
 8002416:	f004 f8ed 	bl	80065f4 <HAL_TIM_OC_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002420:	f7ff fe56 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002424:	4803      	ldr	r0, [pc, #12]	@ (8002434 <MX_TIM2_Init+0xec>)
 8002426:	f000 f82b 	bl	8002480 <HAL_TIM_MspPostInit>

}
 800242a:	bf00      	nop
 800242c:	3738      	adds	r7, #56	@ 0x38
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200007ec 	.word	0x200007ec

08002438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002448:	d113      	bne.n	8002472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_TIM_Base_MspInit+0x44>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_TIM_Base_MspInit+0x44>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6593      	str	r3, [r2, #88]	@ 0x58
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_TIM_Base_MspInit+0x44>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	201c      	movs	r0, #28
 8002468:	f001 fcb1 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800246c:	201c      	movs	r0, #28
 800246e:	f001 fcca 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000

08002480 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a0:	d11c      	bne.n	80024dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_TIM_MspPostInit+0x64>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <HAL_TIM_MspPostInit+0x64>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <HAL_TIM_MspPostInit+0x64>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024ba:	2320      	movs	r3, #32
 80024bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	4619      	mov	r1, r3
 80024d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d8:	f001 fd2e 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	// our (close to 1 second) timer elapsed, do updates in here.

	print_temperature_data();
 80024f0:	f7ff fcc2 	bl	8001e78 <print_temperature_data>
	pollADC();
 80024f4:	f7ff fa96 	bl	8001a24 <pollADC>
	ssd1306_UpdateScreen();
 80024f8:	f7fe ffda 	bl	80014b0 <ssd1306_UpdateScreen>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002508:	4b18      	ldr	r3, [pc, #96]	@ (800256c <MX_USART1_UART_Init+0x68>)
 800250a:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <MX_USART1_UART_Init+0x6c>)
 800250c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800250e:	4b17      	ldr	r3, [pc, #92]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002510:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002516:	4b15      	ldr	r3, [pc, #84]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <MX_USART1_UART_Init+0x68>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002528:	4b10      	ldr	r3, [pc, #64]	@ (800256c <MX_USART1_UART_Init+0x68>)
 800252a:	220c      	movs	r2, #12
 800252c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252e:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002534:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253a:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <MX_USART1_UART_Init+0x68>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002546:	4809      	ldr	r0, [pc, #36]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002548:	f004 fdcc 	bl	80070e4 <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002552:	f7ff fdbd 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_Delay(20); // delay needed to get UART working properly
 8002556:	2014      	movs	r0, #20
 8002558:	f000 fac8 	bl	8002aec <HAL_Delay>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800255c:	2201      	movs	r2, #1
 800255e:	4905      	ldr	r1, [pc, #20]	@ (8002574 <MX_USART1_UART_Init+0x70>)
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <MX_USART1_UART_Init+0x68>)
 8002562:	f004 fef5 	bl	8007350 <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000908 	.word	0x20000908
 8002570:	40013800 	.word	0x40013800
 8002574:	20000838 	.word	0x20000838

08002578 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 800257e:	4a1b      	ldr	r2, [pc, #108]	@ (80025ec <MX_USART2_UART_Init+0x74>)
 8002580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ba:	480b      	ldr	r0, [pc, #44]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 80025bc:	f004 fd92 	bl	80070e4 <HAL_UART_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025c6:	f7ff fd83 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_Delay(20); // delay needed to get UART working properly
 80025ca:	2014      	movs	r0, #20
 80025cc:	f000 fa8e 	bl	8002aec <HAL_Delay>

  HAL_UART_Transmit_IT(&huart2, uart2_tx_buffer, MAX_BUFFER_LEN);
 80025d0:	2264      	movs	r2, #100	@ 0x64
 80025d2:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <MX_USART2_UART_Init+0x78>)
 80025d4:	4804      	ldr	r0, [pc, #16]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 80025d6:	f004 fe5d 	bl	8007294 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80025da:	2201      	movs	r2, #1
 80025dc:	4905      	ldr	r1, [pc, #20]	@ (80025f4 <MX_USART2_UART_Init+0x7c>)
 80025de:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <MX_USART2_UART_Init+0x70>)
 80025e0:	f004 feb6 	bl	8007350 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000990 	.word	0x20000990
 80025ec:	40004400 	.word	0x40004400
 80025f0:	2000083c 	.word	0x2000083c
 80025f4:	20000839 	.word	0x20000839

080025f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a0      	sub	sp, #128	@ 0x80
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	2254      	movs	r2, #84	@ 0x54
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f006 ff5f 	bl	80094dc <memset>
  if(uartHandle->Instance==USART1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a46      	ldr	r2, [pc, #280]	@ (800273c <HAL_UART_MspInit+0x144>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d140      	bne.n	80026aa <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002628:	2301      	movs	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800262c:	2300      	movs	r3, #0
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002630:	f107 0318 	add.w	r3, r7, #24
 8002634:	4618      	mov	r0, r3
 8002636:	f003 fad1 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002640:	f7ff fd46 	bl	80020d0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002644:	4b3e      	ldr	r3, [pc, #248]	@ (8002740 <HAL_UART_MspInit+0x148>)
 8002646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002648:	4a3d      	ldr	r2, [pc, #244]	@ (8002740 <HAL_UART_MspInit+0x148>)
 800264a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800264e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002650:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <HAL_UART_MspInit+0x148>)
 8002652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <HAL_UART_MspInit+0x148>)
 800265e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002660:	4a37      	ldr	r2, [pc, #220]	@ (8002740 <HAL_UART_MspInit+0x148>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002668:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <HAL_UART_MspInit+0x148>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002674:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002678:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002686:	2307      	movs	r3, #7
 8002688:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002694:	f001 fc50 	bl	8003f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	2100      	movs	r1, #0
 800269c:	2025      	movs	r0, #37	@ 0x25
 800269e:	f001 fb96 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026a2:	2025      	movs	r0, #37	@ 0x25
 80026a4:	f001 fbaf 	bl	8003e06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026a8:	e043      	b.n	8002732 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a25      	ldr	r2, [pc, #148]	@ (8002744 <HAL_UART_MspInit+0x14c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d13e      	bne.n	8002732 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026bc:	f107 0318 	add.w	r3, r7, #24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 fa8b 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80026cc:	f7ff fd00 	bl	80020d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_UART_MspInit+0x148>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002740 <HAL_UART_MspInit+0x148>)
 80026d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026da:	6593      	str	r3, [r2, #88]	@ 0x58
 80026dc:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <HAL_UART_MspInit+0x148>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <HAL_UART_MspInit+0x148>)
 80026ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ec:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <HAL_UART_MspInit+0x148>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_UART_MspInit+0x148>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002700:	230c      	movs	r3, #12
 8002702:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002710:	2307      	movs	r3, #7
 8002712:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002718:	4619      	mov	r1, r3
 800271a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271e:	f001 fc0b 	bl	8003f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2026      	movs	r0, #38	@ 0x26
 8002728:	f001 fb51 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800272c:	2026      	movs	r0, #38	@ 0x26
 800272e:	f001 fb6a 	bl	8003e06 <HAL_NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3780      	adds	r7, #128	@ 0x80
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40013800 	.word	0x40013800
 8002740:	40021000 	.word	0x40021000
 8002744:	40004400 	.word	0x40004400

08002748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800274c:	4802      	ldr	r0, [pc, #8]	@ (8002758 <USART1_IRQHandler+0x10>)
 800274e:	f004 fe4b 	bl	80073e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000908 	.word	0x20000908

0800275c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002760:	4802      	ldr	r0, [pc, #8]	@ (800276c <USART2_IRQHandler+0x10>)
 8002762:	f004 fe41 	bl	80073e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000990 	.word	0x20000990

08002770 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_UART_TxCpltCallback+0x34>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d102      	bne.n	800278a <HAL_UART_TxCpltCallback+0x1a>
	{
		serial_uart_handle_tx();
 8002784:	f000 f8b6 	bl	80028f4 <serial_uart_handle_tx>
	}
	else if (huart->Instance == huart1.Instance)
	{
		hm10_uart_handle_tx();
	}
}
 8002788:	e007      	b.n	800279a <HAL_UART_TxCpltCallback+0x2a>
	else if (huart->Instance == huart1.Instance)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_UART_TxCpltCallback+0x38>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d101      	bne.n	800279a <HAL_UART_TxCpltCallback+0x2a>
		hm10_uart_handle_tx();
 8002796:	f7fe fbd9 	bl	8000f4c <hm10_uart_handle_tx>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000990 	.word	0x20000990
 80027a8:	20000908 	.word	0x20000908

080027ac <HAL_UART_RxCpltCallback>:

// called from HAL for any UART callback setup with Interrupts.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	// if from the HCO5 or HM10 Bluetooth module
	if (huart->Instance == huart1.Instance)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_UART_RxCpltCallback+0x4c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10a      	bne.n	80027d6 <HAL_UART_RxCpltCallback+0x2a>
//			{
//				break;
//			}
//		}

		hm10_uart_handle_rx(uart1_rx_data);
 80027c0:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <HAL_UART_RxCpltCallback+0x50>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fbc9 	bl	8000f5c <hm10_uart_handle_rx>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80027ca:	2201      	movs	r2, #1
 80027cc:	490b      	ldr	r1, [pc, #44]	@ (80027fc <HAL_UART_RxCpltCallback+0x50>)
 80027ce:	480a      	ldr	r0, [pc, #40]	@ (80027f8 <HAL_UART_RxCpltCallback+0x4c>)
 80027d0:	f004 fdbe 	bl	8007350 <HAL_UART_Receive_IT>
	else if (huart->Instance == huart2.Instance)
	{
		serial_uart_handle_rx();
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
	}
}
 80027d4:	e00c      	b.n	80027f0 <HAL_UART_RxCpltCallback+0x44>
	else if (huart->Instance == huart2.Instance)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_UART_RxCpltCallback+0x54>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d106      	bne.n	80027f0 <HAL_UART_RxCpltCallback+0x44>
		serial_uart_handle_rx();
 80027e2:	f000 f893 	bl	800290c <serial_uart_handle_rx>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80027e6:	2201      	movs	r2, #1
 80027e8:	4906      	ldr	r1, [pc, #24]	@ (8002804 <HAL_UART_RxCpltCallback+0x58>)
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <HAL_UART_RxCpltCallback+0x54>)
 80027ec:	f004 fdb0 	bl	8007350 <HAL_UART_Receive_IT>
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000908 	.word	0x20000908
 80027fc:	20000838 	.word	0x20000838
 8002800:	20000990 	.word	0x20000990
 8002804:	20000839 	.word	0x20000839

08002808 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	char *error_msg = "UART error occurred.";
 8002810:	4b27      	ldr	r3, [pc, #156]	@ (80028b0 <HAL_UART_ErrorCallback+0xa8>)
 8002812:	60fb      	str	r3, [r7, #12]

	uint32_t error = huart->ErrorCode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281a:	60bb      	str	r3, [r7, #8]

	if (huart->Instance == huart1.Instance)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_UART_ErrorCallback+0xac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d137      	bne.n	8002898 <HAL_UART_ErrorCallback+0x90>
	{
		if(error & HAL_UART_ERROR_FE)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <HAL_UART_ErrorCallback+0x34>
		{
			//frame error detected
			__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE); //clear frame error flag
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2202      	movs	r2, #2
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	e026      	b.n	800288a <HAL_UART_ErrorCallback+0x82>

		}
		else if(error & HAL_UART_ERROR_ORE)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <HAL_UART_ErrorCallback+0x70>
		{
			//overrun error
			__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE); //clear overrun flag
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2208      	movs	r2, #8
 800284c:	621a      	str	r2, [r3, #32]
			__HAL_UART_FLUSH_DRREGISTER(huart); //flush data
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	8b1b      	ldrh	r3, [r3, #24]
 8002854:	b29a      	uxth	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0208 	orr.w	r2, r2, #8
 800285e:	b292      	uxth	r2, r2
 8002860:	831a      	strh	r2, [r3, #24]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	8b1b      	ldrh	r3, [r3, #24]
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0210 	orr.w	r2, r2, #16
 8002872:	b292      	uxth	r2, r2
 8002874:	831a      	strh	r2, [r3, #24]
 8002876:	e008      	b.n	800288a <HAL_UART_ErrorCallback+0x82>
		}
		else if(error & HAL_UART_ERROR_PE)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_UART_ErrorCallback+0x82>
		{
			// parity error occurred
			__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE); //clear frame error flag
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2201      	movs	r2, #1
 8002888:	621a      	str	r2, [r3, #32]
		}

		error_msg = "HM10 UART error occurred.";
 800288a:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_UART_ErrorCallback+0xb0>)
 800288c:	60fb      	str	r3, [r7, #12]
		serial_uart_send_tx(error_msg, sizeof(error_msg));
 800288e:	2104      	movs	r1, #4
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f817 	bl	80028c4 <serial_uart_send_tx>
	else if (huart->Instance == huart2.Instance)
	{
		error_msg = "Serial port UART error occurred";
		// probably output over BLE or just output to terminal.
	}
}
 8002896:	e007      	b.n	80028a8 <HAL_UART_ErrorCallback+0xa0>
	else if (huart->Instance == huart2.Instance)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <HAL_UART_ErrorCallback+0xb4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d101      	bne.n	80028a8 <HAL_UART_ErrorCallback+0xa0>
		error_msg = "Serial port UART error occurred";
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_UART_ErrorCallback+0xb8>)
 80028a6:	60fb      	str	r3, [r7, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	0800b750 	.word	0x0800b750
 80028b4:	20000908 	.word	0x20000908
 80028b8:	0800b768 	.word	0x0800b768
 80028bc:	20000990 	.word	0x20000990
 80028c0:	0800b784 	.word	0x0800b784

080028c4 <serial_uart_send_tx>:
 * \brief    Sends content in the buffer over uart tx
 * \param[in] tx_buff - Buffer with the message we want to send.
 * \param[in] buffer_len - Maximum length of the buffer we want to send.
 */
void serial_uart_send_tx(const char *buffer, uint16_t buffer_len)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
	strcpy((char *)uart2_tx_buffer, buffer);
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4806      	ldr	r0, [pc, #24]	@ (80028ec <serial_uart_send_tx+0x28>)
 80028d4:	f006 fe49 	bl	800956a <strcpy>
	HAL_UART_Transmit(&huart2, uart2_tx_buffer, buffer_len, 100);
 80028d8:	887a      	ldrh	r2, [r7, #2]
 80028da:	2364      	movs	r3, #100	@ 0x64
 80028dc:	4903      	ldr	r1, [pc, #12]	@ (80028ec <serial_uart_send_tx+0x28>)
 80028de:	4804      	ldr	r0, [pc, #16]	@ (80028f0 <serial_uart_send_tx+0x2c>)
 80028e0:	f004 fc4e 	bl	8007180 <HAL_UART_Transmit>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000083c 	.word	0x2000083c
 80028f0:	20000990 	.word	0x20000990

080028f4 <serial_uart_handle_tx>:
/*!
 * \brief    Readies the uart tx buffer
 * \param[in] huart - pointer to huart handle.
 */
void serial_uart_handle_tx()
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	memset(uart2_tx_buffer, '\0', (size_t)MAX_BUFFER_LEN); //empty the transmit data buffer to be ready for new data.
 80028f8:	2264      	movs	r2, #100	@ 0x64
 80028fa:	2100      	movs	r1, #0
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <serial_uart_handle_tx+0x14>)
 80028fe:	f006 fded 	bl	80094dc <memset>
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000083c 	.word	0x2000083c

0800290c <serial_uart_handle_rx>:
/*!
 * \brief    Handles uart rx by taking in next character, processing it, then sending out over tx
 * \param[in] huart - pointer to huart handle.
 */
void serial_uart_handle_rx()
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
	// if we didn't receive the carriage return increment the rx_buffer and add the next character
	if (uart2_rx_data != '\r')
 8002912:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <serial_uart_handle_rx+0x84>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b0d      	cmp	r3, #13
 8002918:	d00e      	beq.n	8002938 <serial_uart_handle_rx+0x2c>
	{
		// if there is data coming into the rx_data pointer that isn't the "Enter" character then add it to the buffer.
		uart2_rx_buffer[counter_s++] = uart2_rx_data;
 800291a:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <serial_uart_handle_rx+0x88>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	491c      	ldr	r1, [pc, #112]	@ (8002994 <serial_uart_handle_rx+0x88>)
 8002922:	600a      	str	r2, [r1, #0]
 8002924:	4a1a      	ldr	r2, [pc, #104]	@ (8002990 <serial_uart_handle_rx+0x84>)
 8002926:	7811      	ldrb	r1, [r2, #0]
 8002928:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <serial_uart_handle_rx+0x8c>)
 800292a:	54d1      	strb	r1, [r2, r3]
		// Get ready for new data in rx_data_s pointer.
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 800292c:	2201      	movs	r2, #1
 800292e:	4918      	ldr	r1, [pc, #96]	@ (8002990 <serial_uart_handle_rx+0x84>)
 8002930:	481a      	ldr	r0, [pc, #104]	@ (800299c <serial_uart_handle_rx+0x90>)
 8002932:	f004 fd0d 	bl	8007350 <HAL_UART_Receive_IT>
		return;
 8002936:	e028      	b.n	800298a <serial_uart_handle_rx+0x7e>
	}

	// otherwise we did get a carriage return, check against our expected string
	if (strcmp(hello_cmd, (char*)uart2_rx_buffer) == 0) // string compare the command against what we received from the sender.
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <serial_uart_handle_rx+0x94>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4916      	ldr	r1, [pc, #88]	@ (8002998 <serial_uart_handle_rx+0x8c>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fc9e 	bl	8000280 <strcmp>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <serial_uart_handle_rx+0x4c>
	{
		const char *response = "Hello to you too!\r\n";
 800294a:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <serial_uart_handle_rx+0x98>)
 800294c:	603b      	str	r3, [r7, #0]
		strcpy((char*)uart2_tx_buffer, response); // move response into tx buffer
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	4815      	ldr	r0, [pc, #84]	@ (80029a8 <serial_uart_handle_rx+0x9c>)
 8002952:	f006 fe0a 	bl	800956a <strcpy>
 8002956:	e005      	b.n	8002964 <serial_uart_handle_rx+0x58>
	}
	else
	{
		// otherwise put an error in the tx buffer.
		const char *error = "Uh oh, didn't get the right word...\r\n";
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <serial_uart_handle_rx+0xa0>)
 800295a:	607b      	str	r3, [r7, #4]
		strcpy((char*)uart2_tx_buffer, error);
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4812      	ldr	r0, [pc, #72]	@ (80029a8 <serial_uart_handle_rx+0x9c>)
 8002960:	f006 fe03 	bl	800956a <strcpy>
	}

	// now transmit out the answer over tx.
	HAL_UART_Transmit(&huart2, uart2_tx_buffer, (uint16_t)MAX_BUFFER_LEN, 100);
 8002964:	2364      	movs	r3, #100	@ 0x64
 8002966:	2264      	movs	r2, #100	@ 0x64
 8002968:	490f      	ldr	r1, [pc, #60]	@ (80029a8 <serial_uart_handle_rx+0x9c>)
 800296a:	480c      	ldr	r0, [pc, #48]	@ (800299c <serial_uart_handle_rx+0x90>)
 800296c:	f004 fc08 	bl	8007180 <HAL_UART_Transmit>
	// clear both buffers
	memset(uart2_tx_buffer, '\0', (size_t)MAX_BUFFER_LEN);
 8002970:	2264      	movs	r2, #100	@ 0x64
 8002972:	2100      	movs	r1, #0
 8002974:	480c      	ldr	r0, [pc, #48]	@ (80029a8 <serial_uart_handle_rx+0x9c>)
 8002976:	f006 fdb1 	bl	80094dc <memset>
	memset(uart2_rx_buffer, '\0', (size_t)MAX_BUFFER_LEN);
 800297a:	2264      	movs	r2, #100	@ 0x64
 800297c:	2100      	movs	r1, #0
 800297e:	4806      	ldr	r0, [pc, #24]	@ (8002998 <serial_uart_handle_rx+0x8c>)
 8002980:	f006 fdac 	bl	80094dc <memset>
	counter_s = 0; // reset the counter to be ready for new data.
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <serial_uart_handle_rx+0x88>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000839 	.word	0x20000839
 8002994:	20000904 	.word	0x20000904
 8002998:	200008a0 	.word	0x200008a0
 800299c:	20000990 	.word	0x20000990
 80029a0:	2000000c 	.word	0x2000000c
 80029a4:	0800b7ac 	.word	0x0800b7ac
 80029a8:	2000083c 	.word	0x2000083c
 80029ac:	0800b7c0 	.word	0x0800b7c0

080029b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029b4:	f7ff fcb6 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b8:	480c      	ldr	r0, [pc, #48]	@ (80029ec <LoopForever+0x6>)
  ldr r1, =_edata
 80029ba:	490d      	ldr	r1, [pc, #52]	@ (80029f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029bc:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <LoopForever+0xe>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c0:	e002      	b.n	80029c8 <LoopCopyDataInit>

080029c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c6:	3304      	adds	r3, #4

080029c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029cc:	d3f9      	bcc.n	80029c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ce:	4a0a      	ldr	r2, [pc, #40]	@ (80029f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d0:	4c0a      	ldr	r4, [pc, #40]	@ (80029fc <LoopForever+0x16>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d4:	e001      	b.n	80029da <LoopFillZerobss>

080029d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d8:	3204      	adds	r2, #4

080029da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029dc:	d3fb      	bcc.n	80029d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029de:	f006 fd8f 	bl	8009500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029e2:	f7ff faf7 	bl	8001fd4 <main>

080029e6 <LoopForever>:

LoopForever:
    b LoopForever
 80029e6:	e7fe      	b.n	80029e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029e8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80029ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80029f4:	0800cb2c 	.word	0x0800cb2c
  ldr r2, =_sbss
 80029f8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80029fc:	20000b68 	.word	0x20000b68

08002a00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC1_IRQHandler>

08002a02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f001 f9d3 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 f80e 	bl	8002a34 <HAL_InitTick>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	71fb      	strb	r3, [r7, #7]
 8002a22:	e001      	b.n	8002a28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a24:	f7ff fb5a 	bl	80020dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a28:	79fb      	ldrb	r3, [r7, #7]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a40:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <HAL_InitTick+0x6c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d023      	beq.n	8002a90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_InitTick+0x70>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <HAL_InitTick+0x6c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 f9df 	bl	8003e22 <HAL_SYSTICK_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d809      	bhi.n	8002a84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a78:	f001 f9a9 	bl	8003dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <HAL_InitTick+0x74>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e007      	b.n	8002a94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e004      	b.n	8002a94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e001      	b.n	8002a94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000014 	.word	0x20000014
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	20000010 	.word	0x20000010

08002aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_IncTick+0x20>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_IncTick+0x24>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	4a04      	ldr	r2, [pc, #16]	@ (8002ad0 <HAL_IncTick+0x24>)
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000014 	.word	0x20000014
 8002ad0:	20000a18 	.word	0x20000a18

08002ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	@ (8002ae8 <HAL_GetTick+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000a18 	.word	0x20000a18

08002aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff ffee 	bl	8002ad4 <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b04:	d005      	beq.n	8002b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_Delay+0x44>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b12:	bf00      	nop
 8002b14:	f7ff ffde 	bl	8002ad4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d8f7      	bhi.n	8002b14 <HAL_Delay+0x28>
  {
  }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000014 	.word	0x20000014

08002b34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3360      	adds	r3, #96	@ 0x60
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <LL_ADC_SetOffset+0x44>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	03fff000 	.word	0x03fff000

08002be4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3360      	adds	r3, #96	@ 0x60
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3360      	adds	r3, #96	@ 0x60
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c3a:	bf00      	nop
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3330      	adds	r3, #48	@ 0x30
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	4413      	add	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	211f      	movs	r1, #31
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	f003 011f 	and.w	r1, r3, #31
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3314      	adds	r3, #20
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	0e5b      	lsrs	r3, r3, #25
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	4413      	add	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	0d1b      	lsrs	r3, r3, #20
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2107      	movs	r1, #7
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0d1b      	lsrs	r3, r3, #20
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	43db      	mvns	r3, r3
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0318 	and.w	r3, r3, #24
 8002d3e:	4908      	ldr	r1, [pc, #32]	@ (8002d60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d40:	40d9      	lsrs	r1, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	400b      	ands	r3, r1
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	0007ffff 	.word	0x0007ffff

08002d64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6093      	str	r3, [r2, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d9c:	d101      	bne.n	8002da2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002dc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dec:	d101      	bne.n	8002df2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <LL_ADC_IsEnabled+0x18>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <LL_ADC_IsEnabled+0x1a>
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e62:	f043 0204 	orr.w	r2, r3, #4
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d101      	bne.n	8002eb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e126      	b.n	800312c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fe fd35 	bl	800195c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff3f 	bl	8002d88 <LL_ADC_IsDeepPowerDownEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff25 	bl	8002d64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff5a 	bl	8002dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d115      	bne.n	8002f56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff3e 	bl	8002db0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f34:	4b7f      	ldr	r3, [pc, #508]	@ (8003134 <HAL_ADC_Init+0x270>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	4a7f      	ldr	r2, [pc, #508]	@ (8003138 <HAL_ADC_Init+0x274>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	3301      	adds	r3, #1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff3c 	bl	8002dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff75 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 8002f8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 80bf 	bne.w	800311a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 80bb 	bne.w	800311a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fac:	f043 0202 	orr.w	r2, r3, #2
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff35 	bl	8002e28 <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc4:	485d      	ldr	r0, [pc, #372]	@ (800313c <HAL_ADC_Init+0x278>)
 8002fc6:	f7ff ff2f 	bl	8002e28 <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	485a      	ldr	r0, [pc, #360]	@ (8003140 <HAL_ADC_Init+0x27c>)
 8002fd8:	f7ff fdac 	bl	8002b34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7e5b      	ldrb	r3, [r3, #25]
 8002fe0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ff2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d106      	bne.n	8003018 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	3b01      	subs	r3, #1
 8003010:	045b      	lsls	r3, r3, #17
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d009      	beq.n	8003034 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	4b42      	ldr	r3, [pc, #264]	@ (8003144 <HAL_ADC_Init+0x280>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	430b      	orrs	r3, r1
 8003046:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff25 	bl	8002e9c <LL_ADC_INJ_IsConversionOngoing>
 8003052:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d13d      	bne.n	80030d6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d13a      	bne.n	80030d6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003064:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800306c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800307c:	f023 0302 	bic.w	r3, r3, #2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	69b9      	ldr	r1, [r7, #24]
 8003086:	430b      	orrs	r3, r1
 8003088:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003090:	2b01      	cmp	r3, #1
 8003092:	d118      	bne.n	80030c6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800309e:	f023 0304 	bic.w	r3, r3, #4
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030b6:	430a      	orrs	r2, r1
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	611a      	str	r2, [r3, #16]
 80030c4:	e007      	b.n	80030d6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10c      	bne.n	80030f8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	f023 010f 	bic.w	r1, r3, #15
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	1e5a      	subs	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80030f6:	e007      	b.n	8003108 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 020f 	bic.w	r2, r2, #15
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	f023 0303 	bic.w	r3, r3, #3
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
 8003118:	e007      	b.n	800312a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	f043 0210 	orr.w	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800312a:	7ffb      	ldrb	r3, [r7, #31]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000008 	.word	0x20000008
 8003138:	053e2d63 	.word	0x053e2d63
 800313c:	50040000 	.word	0x50040000
 8003140:	50040300 	.word	0x50040300
 8003144:	fff0c007 	.word	0xfff0c007

08003148 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fe8e 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d14f      	bne.n	8003200 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_ADC_Start+0x26>
 800316a:	2302      	movs	r3, #2
 800316c:	e04b      	b.n	8003206 <HAL_ADC_Start+0xbe>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fcc8 	bl	8003b0c <ADC_Enable>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d137      	bne.n	80031f6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a6:	d106      	bne.n	80031b6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f023 0206 	bic.w	r2, r3, #6
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80031b4:	e002      	b.n	80031bc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	221c      	movs	r2, #28
 80031c2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fe2d 	bl	8002e4e <LL_ADC_REG_StartConversion>
 80031f4:	e006      	b.n	8003204 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80031fe:	e001      	b.n	8003204 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003200:	2302      	movs	r3, #2
 8003202:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d102      	bne.n	8003226 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003220:	2308      	movs	r3, #8
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	e010      	b.n	8003248 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e06f      	b.n	8003324 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003244:	2304      	movs	r3, #4
 8003246:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003248:	f7ff fc44 	bl	8002ad4 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800324e:	e021      	b.n	8003294 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003256:	d01d      	beq.n	8003294 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003258:	f7ff fc3c 	bl	8002ad4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <HAL_ADC_PollForConversion+0x60>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d112      	bne.n	8003294 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e047      	b.n	8003324 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0d6      	beq.n	8003250 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fcc7 	bl	8002c46 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01c      	beq.n	80032f8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7e5b      	ldrb	r3, [r3, #25]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d111      	bne.n	80032f8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b08      	cmp	r3, #8
 8003304:	d104      	bne.n	8003310 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2208      	movs	r2, #8
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e008      	b.n	8003322 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	220c      	movs	r2, #12
 8003320:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b0b6      	sub	sp, #216	@ 0xd8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADC_ConfigChannel+0x22>
 8003366:	2302      	movs	r3, #2
 8003368:	e3bb      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x79a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fd7d 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 83a0 	bne.w	8003ac4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d824      	bhi.n	80033de <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	3b02      	subs	r3, #2
 800339a:	2b03      	cmp	r3, #3
 800339c:	d81b      	bhi.n	80033d6 <HAL_ADC_ConfigChannel+0x8e>
 800339e:	a201      	add	r2, pc, #4	@ (adr r2, 80033a4 <HAL_ADC_ConfigChannel+0x5c>)
 80033a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033bd 	.word	0x080033bd
 80033ac:	080033c5 	.word	0x080033c5
 80033b0:	080033cd 	.word	0x080033cd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80033b4:	230c      	movs	r3, #12
 80033b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033ba:	e010      	b.n	80033de <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80033bc:	2312      	movs	r3, #18
 80033be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033c2:	e00c      	b.n	80033de <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80033c4:	2318      	movs	r3, #24
 80033c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033ca:	e008      	b.n	80033de <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80033cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033d4:	e003      	b.n	80033de <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80033d6:	2306      	movs	r3, #6
 80033d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033dc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80033ec:	f7ff fc3e 	bl	8002c6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fd3e 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 80033fa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fd4a 	bl	8002e9c <LL_ADC_INJ_IsConversionOngoing>
 8003408:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800340c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 81a4 	bne.w	800375e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 819f 	bne.w	800375e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	461a      	mov	r2, r3
 800342e:	f7ff fc49 	bl	8002cc4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00a      	beq.n	800346a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6919      	ldr	r1, [r3, #16]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003464:	f7ff fb9a 	bl	8002b9c <LL_ADC_SetOffset>
 8003468:	e179      	b.n	800375e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fbb7 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 8003476:	4603      	mov	r3, r0
 8003478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x14e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fbac 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 800348c:	4603      	mov	r3, r0
 800348e:	0e9b      	lsrs	r3, r3, #26
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	e01e      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x18c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fba1 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e004      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80034c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x1a4>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	e018      	b.n	800351e <HAL_ADC_ConfigChannel+0x1d6>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003510:	2320      	movs	r3, #32
 8003512:	e004      	b.n	800351e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800351e:	429a      	cmp	r2, r3
 8003520:	d106      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fb70 	bl	8002c10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fb54 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <HAL_ADC_ConfigChannel+0x214>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2101      	movs	r1, #1
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fb49 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 8003552:	4603      	mov	r3, r0
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	f003 021f 	and.w	r2, r3, #31
 800355a:	e01e      	b.n	800359a <HAL_ADC_ConfigChannel+0x252>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fb3e 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 8003568:	4603      	mov	r3, r0
 800356a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800357a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800357e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800358a:	2320      	movs	r3, #32
 800358c:	e004      	b.n	8003598 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800358e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x26a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	e018      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x29c>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80035c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80035ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80035d6:	2320      	movs	r3, #32
 80035d8:	e004      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80035da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fb0d 	bl	8002c10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff faf1 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 8003602:	4603      	mov	r3, r0
 8003604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x2da>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fae6 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 8003618:	4603      	mov	r3, r0
 800361a:	0e9b      	lsrs	r3, r3, #26
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	e01e      	b.n	8003660 <HAL_ADC_ConfigChannel+0x318>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fadb 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003644:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	e004      	b.n	800365e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x330>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	e014      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x35a>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800368c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d106      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff faae 	bl	8002c10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2103      	movs	r1, #3
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fa92 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x398>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2103      	movs	r1, #3
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fa87 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	f003 021f 	and.w	r2, r3, #31
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x3c8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2103      	movs	r1, #3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fa7c 	bl	8002be4 <LL_ADC_GetOffsetChannel>
 80036ec:	4603      	mov	r3, r0
 80036ee:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80036f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036fa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80036fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x3e0>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	e011      	b.n	800374c <HAL_ADC_ConfigChannel+0x404>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003738:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800373a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800374c:	429a      	cmp	r2, r3
 800374e:	d106      	bne.n	800375e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2200      	movs	r2, #0
 8003756:	2103      	movs	r1, #3
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fa59 	bl	8002c10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fb60 	bl	8002e28 <LL_ADC_IsEnabled>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 8140 	bne.w	80039f0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6819      	ldr	r1, [r3, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	461a      	mov	r2, r3
 800377e:	f7ff facd 	bl	8002d1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4a8f      	ldr	r2, [pc, #572]	@ (80039c4 <HAL_ADC_ConfigChannel+0x67c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	f040 8131 	bne.w	80039f0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x46e>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0e9b      	lsrs	r3, r3, #26
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	bf94      	ite	ls
 80037ae:	2301      	movls	r3, #1
 80037b0:	2300      	movhi	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e019      	b.n	80037ea <HAL_ADC_ConfigChannel+0x4a2>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80037c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80037c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80037ce:	2320      	movs	r3, #32
 80037d0:	e003      	b.n	80037da <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80037d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d079      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_ADC_ConfigChannel+0x4c2>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	0e9b      	lsrs	r3, r3, #26
 8003800:	3301      	adds	r3, #1
 8003802:	069b      	lsls	r3, r3, #26
 8003804:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003808:	e015      	b.n	8003836 <HAL_ADC_ConfigChannel+0x4ee>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800381a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800381c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e003      	b.n	800382e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3301      	adds	r3, #1
 8003830:	069b      	lsls	r3, r3, #26
 8003832:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x50e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	3301      	adds	r3, #1
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	e017      	b.n	8003886 <HAL_ADC_ConfigChannel+0x53e>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003866:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	ea42 0103 	orr.w	r1, r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x564>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0e9b      	lsrs	r3, r3, #26
 800389c:	3301      	adds	r3, #1
 800389e:	f003 021f 	and.w	r2, r3, #31
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	051b      	lsls	r3, r3, #20
 80038aa:	e018      	b.n	80038de <HAL_ADC_ConfigChannel+0x596>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80038be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f003 021f 	and.w	r2, r3, #31
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038de:	430b      	orrs	r3, r1
 80038e0:	e081      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x5b6>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0e9b      	lsrs	r3, r3, #26
 80038f4:	3301      	adds	r3, #1
 80038f6:	069b      	lsls	r3, r3, #26
 80038f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038fc:	e015      	b.n	800392a <HAL_ADC_ConfigChannel+0x5e2>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003916:	2320      	movs	r3, #32
 8003918:	e003      	b.n	8003922 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800391a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	3301      	adds	r3, #1
 8003924:	069b      	lsls	r3, r3, #26
 8003926:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_ADC_ConfigChannel+0x602>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	3301      	adds	r3, #1
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f303 	lsl.w	r3, r1, r3
 8003948:	e017      	b.n	800397a <HAL_ADC_ConfigChannel+0x632>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	61bb      	str	r3, [r7, #24]
  return result;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	ea42 0103 	orr.w	r1, r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x65e>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0e9b      	lsrs	r3, r3, #26
 8003990:	3301      	adds	r3, #1
 8003992:	f003 021f 	and.w	r2, r3, #31
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	3b1e      	subs	r3, #30
 800399e:	051b      	lsls	r3, r3, #20
 80039a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039a4:	e01e      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x69c>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	60fb      	str	r3, [r7, #12]
  return result;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e006      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x688>
 80039c2:	bf00      	nop
 80039c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	f003 021f 	and.w	r2, r3, #31
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	3b1e      	subs	r3, #30
 80039de:	051b      	lsls	r3, r3, #20
 80039e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7ff f96a 	bl	8002cc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aec <HAL_ADC_ConfigChannel+0x7a4>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d06c      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039fc:	483c      	ldr	r0, [pc, #240]	@ (8003af0 <HAL_ADC_ConfigChannel+0x7a8>)
 80039fe:	f7ff f8bf 	bl	8002b80 <LL_ADC_GetCommonPathInternalCh>
 8003a02:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a3a      	ldr	r2, [pc, #232]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d127      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d121      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a35      	ldr	r2, [pc, #212]	@ (8003af8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d157      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a2e:	4619      	mov	r1, r3
 8003a30:	482f      	ldr	r0, [pc, #188]	@ (8003af0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003a32:	f7ff f892 	bl	8002b5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a36:	4b31      	ldr	r3, [pc, #196]	@ (8003afc <HAL_ADC_ConfigChannel+0x7b4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	4a30      	ldr	r2, [pc, #192]	@ (8003b00 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a50:	e002      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f9      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a27      	ldr	r2, [pc, #156]	@ (8003b04 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d113      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10d      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003af8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d12a      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4819      	ldr	r0, [pc, #100]	@ (8003af0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003a8c:	f7ff f865 	bl	8002b5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a90:	e021      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d11c      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d111      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aba:	4619      	mov	r1, r3
 8003abc:	480c      	ldr	r0, [pc, #48]	@ (8003af0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003abe:	f7ff f84c 	bl	8002b5a <LL_ADC_SetCommonPathInternalCh>
 8003ac2:	e008      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ade:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	37d8      	adds	r7, #216	@ 0xd8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	80080000 	.word	0x80080000
 8003af0:	50040300 	.word	0x50040300
 8003af4:	c7520000 	.word	0xc7520000
 8003af8:	50040000 	.word	0x50040000
 8003afc:	20000008 	.word	0x20000008
 8003b00:	053e2d63 	.word	0x053e2d63
 8003b04:	cb840000 	.word	0xcb840000
 8003b08:	80000001 	.word	0x80000001

08003b0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff f983 	bl	8002e28 <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d169      	bne.n	8003bfc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	4b36      	ldr	r3, [pc, #216]	@ (8003c08 <ADC_Enable+0xfc>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3a:	f043 0210 	orr.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e055      	b.n	8003bfe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff f952 	bl	8002e00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b5c:	482b      	ldr	r0, [pc, #172]	@ (8003c0c <ADC_Enable+0x100>)
 8003b5e:	f7ff f80f 	bl	8002b80 <LL_ADC_GetCommonPathInternalCh>
 8003b62:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b6c:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <ADC_Enable+0x104>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	4a28      	ldr	r2, [pc, #160]	@ (8003c14 <ADC_Enable+0x108>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b86:	e002      	b.n	8003b8e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f9      	bne.n	8003b88 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b94:	f7fe ff9e 	bl	8002ad4 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b9a:	e028      	b.n	8003bee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff f941 	bl	8002e28 <LL_ADC_IsEnabled>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f925 	bl	8002e00 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bb6:	f7fe ff8d 	bl	8002ad4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d914      	bls.n	8003bee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d00d      	beq.n	8003bee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	f043 0210 	orr.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	f043 0201 	orr.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e007      	b.n	8003bfe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d1cf      	bne.n	8003b9c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	8000003f 	.word	0x8000003f
 8003c0c:	50040300 	.word	0x50040300
 8003c10:	20000008 	.word	0x20000008
 8003c14:	053e2d63 	.word	0x053e2d63

08003c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4a:	4a04      	ldr	r2, [pc, #16]	@ (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	60d3      	str	r3, [r2, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	@ (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	db0a      	blt.n	8003ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	490c      	ldr	r1, [pc, #48]	@ (8003d04 <__NVIC_SetPriority+0x4c>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce0:	e00a      	b.n	8003cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4908      	ldr	r1, [pc, #32]	@ (8003d08 <__NVIC_SetPriority+0x50>)
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	0112      	lsls	r2, r2, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	761a      	strb	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	@ 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	bf28      	it	cs
 8003d2a:	2304      	movcs	r3, #4
 8003d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d902      	bls.n	8003d3c <NVIC_EncodePriority+0x30>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3b03      	subs	r3, #3
 8003d3a:	e000      	b.n	8003d3e <NVIC_EncodePriority+0x32>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	43d9      	mvns	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	4313      	orrs	r3, r2
         );
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	@ 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d84:	d301      	bcc.n	8003d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003db4 <SysTick_Config+0x40>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d92:	210f      	movs	r1, #15
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d98:	f7ff ff8e 	bl	8003cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <SysTick_Config+0x40>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da2:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <SysTick_Config+0x40>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	e000e010 	.word	0xe000e010

08003db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff29 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de0:	f7ff ff3e 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff8e 	bl	8003d0c <NVIC_EncodePriority>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff5d 	bl	8003cb8 <__NVIC_SetPriority>
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff31 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ffa2 	bl	8003d74 <SysTick_Config>
 8003e30:	4603      	mov	r3, r0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d008      	beq.n	8003e64 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2204      	movs	r2, #4
 8003e56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e022      	b.n	8003eaa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 020e 	bic.w	r2, r2, #14
 8003e72:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	f003 021c 	and.w	r2, r3, #28
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f202 	lsl.w	r2, r1, r2
 8003e96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d005      	beq.n	8003eda <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	e029      	b.n	8003f2e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 020e 	bic.w	r2, r2, #14
 8003ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f003 021c 	and.w	r2, r3, #28
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
    }
  }
  return status;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f46:	e148      	b.n	80041da <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	4013      	ands	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 813a 	beq.w	80041d4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d005      	beq.n	8003f78 <HAL_GPIO_Init+0x40>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d130      	bne.n	8003fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fae:	2201      	movs	r2, #1
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f003 0201 	and.w	r2, r3, #1
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d017      	beq.n	8004016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d123      	bne.n	800406a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	08da      	lsrs	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3208      	adds	r2, #8
 800402a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	6939      	ldr	r1, [r7, #16]
 8004066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2203      	movs	r2, #3
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 0203 	and.w	r2, r3, #3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8094 	beq.w	80041d4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ac:	4b52      	ldr	r3, [pc, #328]	@ (80041f8 <HAL_GPIO_Init+0x2c0>)
 80040ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b0:	4a51      	ldr	r2, [pc, #324]	@ (80041f8 <HAL_GPIO_Init+0x2c0>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80040b8:	4b4f      	ldr	r3, [pc, #316]	@ (80041f8 <HAL_GPIO_Init+0x2c0>)
 80040ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040c4:	4a4d      	ldr	r2, [pc, #308]	@ (80041fc <HAL_GPIO_Init+0x2c4>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	220f      	movs	r2, #15
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040ee:	d00d      	beq.n	800410c <HAL_GPIO_Init+0x1d4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a43      	ldr	r2, [pc, #268]	@ (8004200 <HAL_GPIO_Init+0x2c8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <HAL_GPIO_Init+0x1d0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a42      	ldr	r2, [pc, #264]	@ (8004204 <HAL_GPIO_Init+0x2cc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_GPIO_Init+0x1cc>
 8004100:	2302      	movs	r3, #2
 8004102:	e004      	b.n	800410e <HAL_GPIO_Init+0x1d6>
 8004104:	2307      	movs	r3, #7
 8004106:	e002      	b.n	800410e <HAL_GPIO_Init+0x1d6>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_GPIO_Init+0x1d6>
 800410c:	2300      	movs	r3, #0
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	f002 0203 	and.w	r2, r2, #3
 8004114:	0092      	lsls	r2, r2, #2
 8004116:	4093      	lsls	r3, r2
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800411e:	4937      	ldr	r1, [pc, #220]	@ (80041fc <HAL_GPIO_Init+0x2c4>)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	3302      	adds	r3, #2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800412c:	4b36      	ldr	r3, [pc, #216]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	43db      	mvns	r3, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004150:	4a2d      	ldr	r2, [pc, #180]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004156:	4b2c      	ldr	r3, [pc, #176]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800417a:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041a4:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041aa:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004208 <HAL_GPIO_Init+0x2d0>)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3301      	adds	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f47f aeaf 	bne.w	8003f48 <HAL_GPIO_Init+0x10>
  }
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40010000 	.word	0x40010000
 8004200:	48000400 	.word	0x48000400
 8004204:	48000800 	.word	0x48000800
 8004208:	40010400 	.word	0x40010400

0800420c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
 8004218:	4613      	mov	r3, r2
 800421a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800421c:	787b      	ldrb	r3, [r7, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004228:	e002      	b.n	8004230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e08d      	b.n	800436a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fd fd4e 	bl	8001d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	@ 0x24
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800428c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800429c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	e006      	b.n	80042c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d108      	bne.n	80042de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	e007      	b.n	80042ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b20      	cmp	r3, #32
 8004398:	f040 80f9 	bne.w	800458e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x34>
 80043a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0ed      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_I2C_Mem_Write+0x4e>
 80043be:	2302      	movs	r3, #2
 80043c0:	e0e6      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043ca:	f7fe fb83 	bl	8002ad4 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2319      	movs	r3, #25
 80043d6:	2201      	movs	r2, #1
 80043d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fac3 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0d1      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2221      	movs	r2, #33	@ 0x21
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2240      	movs	r2, #64	@ 0x40
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800440c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004414:	88f8      	ldrh	r0, [r7, #6]
 8004416:	893a      	ldrh	r2, [r7, #8]
 8004418:	8979      	ldrh	r1, [r7, #10]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	4603      	mov	r3, r0
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f9d3 	bl	80047d0 <I2C_RequestMemoryWrite>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0a9      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2bff      	cmp	r3, #255	@ 0xff
 8004444:	d90e      	bls.n	8004464 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	22ff      	movs	r2, #255	@ 0xff
 800444a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004450:	b2da      	uxtb	r2, r3
 8004452:	8979      	ldrh	r1, [r7, #10]
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fc47 	bl	8004cf0 <I2C_TransferConfig>
 8004462:	e00f      	b.n	8004484 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004472:	b2da      	uxtb	r2, r3
 8004474:	8979      	ldrh	r1, [r7, #10]
 8004476:	2300      	movs	r3, #0
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fc36 	bl	8004cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fac6 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e07b      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d034      	beq.n	800453c <HAL_I2C_Mem_Write+0x1c8>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d130      	bne.n	800453c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	2200      	movs	r2, #0
 80044e2:	2180      	movs	r1, #128	@ 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa3f 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e04d      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2bff      	cmp	r3, #255	@ 0xff
 80044fc:	d90e      	bls.n	800451c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	22ff      	movs	r2, #255	@ 0xff
 8004502:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004508:	b2da      	uxtb	r2, r3
 800450a:	8979      	ldrh	r1, [r7, #10]
 800450c:	2300      	movs	r3, #0
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fbeb 	bl	8004cf0 <I2C_TransferConfig>
 800451a:	e00f      	b.n	800453c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452a:	b2da      	uxtb	r2, r3
 800452c:	8979      	ldrh	r1, [r7, #10]
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fbda 	bl	8004cf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d19e      	bne.n	8004484 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 faac 	bl	8004aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e01a      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2220      	movs	r2, #32
 8004560:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <HAL_I2C_Mem_Write+0x224>)
 800456e:	400b      	ands	r3, r1
 8004570:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	fe00e800 	.word	0xfe00e800

0800459c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	817b      	strh	r3, [r7, #10]
 80045ae:	460b      	mov	r3, r1
 80045b0:	813b      	strh	r3, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 80fd 	bne.w	80047be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_I2C_Mem_Read+0x34>
 80045ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0f1      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Mem_Read+0x4e>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0ea      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045f2:	f7fe fa6f 	bl	8002ad4 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2319      	movs	r3, #25
 80045fe:	2201      	movs	r2, #1
 8004600:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f9af 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0d5      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2222      	movs	r2, #34	@ 0x22
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	@ 0x40
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800463c:	88f8      	ldrh	r0, [r7, #6]
 800463e:	893a      	ldrh	r2, [r7, #8]
 8004640:	8979      	ldrh	r1, [r7, #10]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4603      	mov	r3, r0
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f913 	bl	8004878 <I2C_RequestMemoryRead>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0ad      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2bff      	cmp	r3, #255	@ 0xff
 800466c:	d90e      	bls.n	800468c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	b2da      	uxtb	r2, r3
 800467a:	8979      	ldrh	r1, [r7, #10]
 800467c:	4b52      	ldr	r3, [pc, #328]	@ (80047c8 <HAL_I2C_Mem_Read+0x22c>)
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fb33 	bl	8004cf0 <I2C_TransferConfig>
 800468a:	e00f      	b.n	80046ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469a:	b2da      	uxtb	r2, r3
 800469c:	8979      	ldrh	r1, [r7, #10]
 800469e:	4b4a      	ldr	r3, [pc, #296]	@ (80047c8 <HAL_I2C_Mem_Read+0x22c>)
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fb22 	bl	8004cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	2200      	movs	r2, #0
 80046b4:	2104      	movs	r1, #4
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f956 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07c      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d034      	beq.n	800476c <HAL_I2C_Mem_Read+0x1d0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d130      	bne.n	800476c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f927 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e04d      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2bff      	cmp	r3, #255	@ 0xff
 800472c:	d90e      	bls.n	800474c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004738:	b2da      	uxtb	r2, r3
 800473a:	8979      	ldrh	r1, [r7, #10]
 800473c:	2300      	movs	r3, #0
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fad3 	bl	8004cf0 <I2C_TransferConfig>
 800474a:	e00f      	b.n	800476c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475a:	b2da      	uxtb	r2, r3
 800475c:	8979      	ldrh	r1, [r7, #10]
 800475e:	2300      	movs	r3, #0
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fac2 	bl	8004cf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d19a      	bne.n	80046ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f994 	bl	8004aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e01a      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2220      	movs	r2, #32
 8004790:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_I2C_Mem_Read+0x230>)
 800479e:	400b      	ands	r3, r1
 80047a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
  }
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	80002400 	.word	0x80002400
 80047cc:	fe00e800 	.word	0xfe00e800

080047d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	4608      	mov	r0, r1
 80047da:	4611      	mov	r1, r2
 80047dc:	461a      	mov	r2, r3
 80047de:	4603      	mov	r3, r0
 80047e0:	817b      	strh	r3, [r7, #10]
 80047e2:	460b      	mov	r3, r1
 80047e4:	813b      	strh	r3, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	8979      	ldrh	r1, [r7, #10]
 80047f0:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <I2C_RequestMemoryWrite+0xa4>)
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fa79 	bl	8004cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f909 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e02c      	b.n	800486c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004818:	893b      	ldrh	r3, [r7, #8]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	629a      	str	r2, [r3, #40]	@ 0x28
 8004822:	e015      	b.n	8004850 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	b29b      	uxth	r3, r3
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8ef 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e012      	b.n	800486c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004846:	893b      	ldrh	r3, [r7, #8]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2200      	movs	r2, #0
 8004858:	2180      	movs	r1, #128	@ 0x80
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f884 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	80002000 	.word	0x80002000

08004878 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	461a      	mov	r2, r3
 8004886:	4603      	mov	r3, r0
 8004888:	817b      	strh	r3, [r7, #10]
 800488a:	460b      	mov	r3, r1
 800488c:	813b      	strh	r3, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	8979      	ldrh	r1, [r7, #10]
 8004898:	4b20      	ldr	r3, [pc, #128]	@ (800491c <I2C_RequestMemoryRead+0xa4>)
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa26 	bl	8004cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f8b6 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e02c      	b.n	8004912 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048be:	893b      	ldrh	r3, [r7, #8]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048c8:	e015      	b.n	80048f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048ca:	893b      	ldrh	r3, [r7, #8]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	69b9      	ldr	r1, [r7, #24]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f89c 	bl	8004a1a <I2C_WaitOnTXISFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e012      	b.n	8004912 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2140      	movs	r1, #64	@ 0x40
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f831 	bl	8004968 <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	80002000 	.word	0x80002000

08004920 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d103      	bne.n	800493e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d007      	beq.n	800495c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	619a      	str	r2, [r3, #24]
  }
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004978:	e03b      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f8d6 	bl	8004b30 <I2C_IsErrorOccurred>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e041      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004994:	d02d      	beq.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fe f89d 	bl	8002ad4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d122      	bne.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4013      	ands	r3, r2
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d113      	bne.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00f      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4013      	ands	r3, r2
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	bf0c      	ite	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	2300      	movne	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d0b4      	beq.n	800497a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a26:	e033      	b.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f87f 	bl	8004b30 <I2C_IsErrorOccurred>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e031      	b.n	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a42:	d025      	beq.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a44:	f7fe f846 	bl	8002ad4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d11a      	bne.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d013      	beq.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e007      	b.n	8004aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d1c4      	bne.n	8004a28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ab4:	e02f      	b.n	8004b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f838 	bl	8004b30 <I2C_IsErrorOccurred>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e02d      	b.n	8004b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fe f803 	bl	8002ad4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d11a      	bne.n	8004b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d013      	beq.n	8004b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e007      	b.n	8004b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d1c8      	bne.n	8004ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	@ 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d068      	beq.n	8004c2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2210      	movs	r2, #16
 8004b62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b64:	e049      	b.n	8004bfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b6c:	d045      	beq.n	8004bfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fd ffb1 	bl	8002ad4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_IsErrorOccurred+0x54>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d13a      	bne.n	8004bfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba6:	d121      	bne.n	8004bec <I2C_IsErrorOccurred+0xbc>
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bae:	d01d      	beq.n	8004bec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d01a      	beq.n	8004bec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004bc6:	f7fd ff85 	bl	8002ad4 <HAL_GetTick>
 8004bca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bcc:	e00e      	b.n	8004bec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bce:	f7fd ff81 	bl	8002ad4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b19      	cmp	r3, #25
 8004bda:	d907      	bls.n	8004bec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	f043 0320 	orr.w	r3, r3, #32
 8004be2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004bea:	e006      	b.n	8004bfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d1e9      	bne.n	8004bce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d003      	beq.n	8004c10 <I2C_IsErrorOccurred+0xe0>
 8004c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0aa      	beq.n	8004b66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f043 0304 	orr.w	r3, r3, #4
 8004c26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f043 0308 	orr.w	r3, r3, #8
 8004c68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00b      	beq.n	8004c9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f043 0302 	orr.w	r3, r3, #2
 8004c8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01c      	beq.n	8004cde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff fe3b 	bl	8004920 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <I2C_IsErrorOccurred+0x1bc>)
 8004cb6:	400b      	ands	r3, r1
 8004cb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004cde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3728      	adds	r7, #40	@ 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	fe00e800 	.word	0xfe00e800

08004cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d02:	897b      	ldrh	r3, [r7, #10]
 8004d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d08:	7a7b      	ldrb	r3, [r7, #9]
 8004d0a:	041b      	lsls	r3, r3, #16
 8004d0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	0d5b      	lsrs	r3, r3, #21
 8004d2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d2e:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <I2C_TransferConfig+0x60>)
 8004d30:	430b      	orrs	r3, r1
 8004d32:	43db      	mvns	r3, r3
 8004d34:	ea02 0103 	and.w	r1, r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	03ff63ff 	.word	0x03ff63ff

08004d54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d138      	bne.n	8004ddc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e032      	b.n	8004dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	@ 0x24
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004da6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6819      	ldr	r1, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e000      	b.n	8004dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d139      	bne.n	8004e74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e033      	b.n	8004e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2224      	movs	r2, #36	@ 0x24
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e88:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e92:	6013      	str	r3, [r2, #0]
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40007000 	.word	0x40007000

08004ea4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <HAL_PWREx_GetVoltageRange+0x18>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40007000 	.word	0x40007000

08004ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ece:	d130      	bne.n	8004f32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ed0:	4b23      	ldr	r3, [pc, #140]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004edc:	d038      	beq.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ede:	4b20      	ldr	r3, [pc, #128]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eee:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2232      	movs	r2, #50	@ 0x32
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0c9b      	lsrs	r3, r3, #18
 8004f00:	3301      	adds	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f04:	e002      	b.n	8004f0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0c:	4b14      	ldr	r3, [pc, #80]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f18:	d102      	bne.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f2      	bne.n	8004f06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f20:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2c:	d110      	bne.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f32:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3e:	d007      	beq.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f40:	4b07      	ldr	r3, [pc, #28]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f48:	4a05      	ldr	r2, [pc, #20]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40007000 	.word	0x40007000
 8004f64:	20000008 	.word	0x20000008
 8004f68:	431bde83 	.word	0x431bde83

08004f6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f000 bc02 	b.w	8005784 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f80:	4b96      	ldr	r3, [pc, #600]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f8a:	4b94      	ldr	r3, [pc, #592]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80e4 	beq.w	800516a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4c>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	f040 808b 	bne.w	80050c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	f040 8087 	bne.w	80050c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fb8:	4b88      	ldr	r3, [pc, #544]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x64>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e3d9      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1a      	ldr	r2, [r3, #32]
 8004fd4:	4b81      	ldr	r3, [pc, #516]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <HAL_RCC_OscConfig+0x7e>
 8004fe0:	4b7e      	ldr	r3, [pc, #504]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCC_OscConfig+0x8a>
 8004fea:	4b7c      	ldr	r3, [pc, #496]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8004fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d223      	bcs.n	8005042 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fd8c 	bl	8005b1c <RCC_SetFlashLatencyFromMSIRange>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e3ba      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800500e:	4b73      	ldr	r3, [pc, #460]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a72      	ldr	r2, [pc, #456]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005014:	f043 0308 	orr.w	r3, r3, #8
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b70      	ldr	r3, [pc, #448]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	496d      	ldr	r1, [pc, #436]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800502c:	4b6b      	ldr	r3, [pc, #428]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	4968      	ldr	r1, [pc, #416]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	e025      	b.n	800508e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005042:	4b66      	ldr	r3, [pc, #408]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a65      	ldr	r2, [pc, #404]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005048:	f043 0308 	orr.w	r3, r3, #8
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b63      	ldr	r3, [pc, #396]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4960      	ldr	r1, [pc, #384]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005060:	4b5e      	ldr	r3, [pc, #376]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	495b      	ldr	r1, [pc, #364]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd4c 	bl	8005b1c <RCC_SetFlashLatencyFromMSIRange>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e37a      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800508e:	f000 fc81 	bl	8005994 <HAL_RCC_GetSysClockFreq>
 8005092:	4602      	mov	r2, r0
 8005094:	4b51      	ldr	r3, [pc, #324]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	4950      	ldr	r1, [pc, #320]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050a0:	5ccb      	ldrb	r3, [r1, r3]
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	fa22 f303 	lsr.w	r3, r2, r3
 80050aa:	4a4e      	ldr	r2, [pc, #312]	@ (80051e4 <HAL_RCC_OscConfig+0x278>)
 80050ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050ae:	4b4e      	ldr	r3, [pc, #312]	@ (80051e8 <HAL_RCC_OscConfig+0x27c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fd fcbe 	bl	8002a34 <HAL_InitTick>
 80050b8:	4603      	mov	r3, r0
 80050ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d052      	beq.n	8005168 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	e35e      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d032      	beq.n	8005134 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050ce:	4b43      	ldr	r3, [pc, #268]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a42      	ldr	r2, [pc, #264]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050da:	f7fd fcfb 	bl	8002ad4 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050e2:	f7fd fcf7 	bl	8002ad4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e347      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050f4:	4b39      	ldr	r3, [pc, #228]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005100:	4b36      	ldr	r3, [pc, #216]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a35      	ldr	r2, [pc, #212]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005106:	f043 0308 	orr.w	r3, r3, #8
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b33      	ldr	r3, [pc, #204]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	4930      	ldr	r1, [pc, #192]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800511e:	4b2f      	ldr	r3, [pc, #188]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	492b      	ldr	r1, [pc, #172]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800512e:	4313      	orrs	r3, r2
 8005130:	604b      	str	r3, [r1, #4]
 8005132:	e01a      	b.n	800516a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005134:	4b29      	ldr	r3, [pc, #164]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a28      	ldr	r2, [pc, #160]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005140:	f7fd fcc8 	bl	8002ad4 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005148:	f7fd fcc4 	bl	8002ad4 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e314      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800515a:	4b20      	ldr	r3, [pc, #128]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x1dc>
 8005166:	e000      	b.n	800516a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d073      	beq.n	800525e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d005      	beq.n	8005188 <HAL_RCC_OscConfig+0x21c>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d10e      	bne.n	80051a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d10b      	bne.n	80051a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005188:	4b14      	ldr	r3, [pc, #80]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d063      	beq.n	800525c <HAL_RCC_OscConfig+0x2f0>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d15f      	bne.n	800525c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e2f1      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a8:	d106      	bne.n	80051b8 <HAL_RCC_OscConfig+0x24c>
 80051aa:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a0b      	ldr	r2, [pc, #44]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e025      	b.n	8005204 <HAL_RCC_OscConfig+0x298>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051c0:	d114      	bne.n	80051ec <HAL_RCC_OscConfig+0x280>
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a05      	ldr	r2, [pc, #20]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80051c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a02      	ldr	r2, [pc, #8]	@ (80051dc <HAL_RCC_OscConfig+0x270>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e013      	b.n	8005204 <HAL_RCC_OscConfig+0x298>
 80051dc:	40021000 	.word	0x40021000
 80051e0:	0800c760 	.word	0x0800c760
 80051e4:	20000008 	.word	0x20000008
 80051e8:	20000010 	.word	0x20000010
 80051ec:	4ba0      	ldr	r3, [pc, #640]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a9f      	ldr	r2, [pc, #636]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4b9d      	ldr	r3, [pc, #628]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a9c      	ldr	r2, [pc, #624]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd fc62 	bl	8002ad4 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005214:	f7fd fc5e 	bl	8002ad4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	@ 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e2ae      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005226:	4b92      	ldr	r3, [pc, #584]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x2a8>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fd fc4e 	bl	8002ad4 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523c:	f7fd fc4a 	bl	8002ad4 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	@ 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e29a      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800524e:	4b88      	ldr	r3, [pc, #544]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x2d0>
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d060      	beq.n	800532c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d005      	beq.n	800527c <HAL_RCC_OscConfig+0x310>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b0c      	cmp	r3, #12
 8005274:	d119      	bne.n	80052aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d116      	bne.n	80052aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527c:	4b7c      	ldr	r3, [pc, #496]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_OscConfig+0x328>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e277      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005294:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	061b      	lsls	r3, r3, #24
 80052a2:	4973      	ldr	r1, [pc, #460]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052a8:	e040      	b.n	800532c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d023      	beq.n	80052fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fd fc09 	bl	8002ad4 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c6:	f7fd fc05 	bl	8002ad4 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e255      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d8:	4b65      	ldr	r3, [pc, #404]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e4:	4b62      	ldr	r3, [pc, #392]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	495f      	ldr	r1, [pc, #380]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]
 80052f8:	e018      	b.n	800532c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fd fbe5 	bl	8002ad4 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530e:	f7fd fbe1 	bl	8002ad4 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e231      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005320:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f0      	bne.n	800530e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d03c      	beq.n	80053b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01c      	beq.n	800537a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005340:	4b4b      	ldr	r3, [pc, #300]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005346:	4a4a      	ldr	r2, [pc, #296]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fd fbc0 	bl	8002ad4 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005358:	f7fd fbbc 	bl	8002ad4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e20c      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800536a:	4b41      	ldr	r3, [pc, #260]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 800536c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ef      	beq.n	8005358 <HAL_RCC_OscConfig+0x3ec>
 8005378:	e01b      	b.n	80053b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800537a:	4b3d      	ldr	r3, [pc, #244]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 800537c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005380:	4a3b      	ldr	r2, [pc, #236]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538a:	f7fd fba3 	bl	8002ad4 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005392:	f7fd fb9f 	bl	8002ad4 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e1ef      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053a4:	4b32      	ldr	r3, [pc, #200]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80053a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1ef      	bne.n	8005392 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80a6 	beq.w	800550c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c0:	2300      	movs	r3, #0
 80053c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80053c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80053c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10d      	bne.n	80053ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d0:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d4:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80053d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053da:	6593      	str	r3, [r2, #88]	@ 0x58
 80053dc:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e8:	2301      	movs	r3, #1
 80053ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ec:	4b21      	ldr	r3, [pc, #132]	@ (8005474 <HAL_RCC_OscConfig+0x508>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d118      	bne.n	800542a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_RCC_OscConfig+0x508>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <HAL_RCC_OscConfig+0x508>)
 80053fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005404:	f7fd fb66 	bl	8002ad4 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540c:	f7fd fb62 	bl	8002ad4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1b2      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <HAL_RCC_OscConfig+0x508>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d108      	bne.n	8005444 <HAL_RCC_OscConfig+0x4d8>
 8005432:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005438:	4a0d      	ldr	r2, [pc, #52]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005442:	e029      	b.n	8005498 <HAL_RCC_OscConfig+0x52c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b05      	cmp	r3, #5
 800544a:	d115      	bne.n	8005478 <HAL_RCC_OscConfig+0x50c>
 800544c:	4b08      	ldr	r3, [pc, #32]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005452:	4a07      	ldr	r2, [pc, #28]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005454:	f043 0304 	orr.w	r3, r3, #4
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800545c:	4b04      	ldr	r3, [pc, #16]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005462:	4a03      	ldr	r2, [pc, #12]	@ (8005470 <HAL_RCC_OscConfig+0x504>)
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800546c:	e014      	b.n	8005498 <HAL_RCC_OscConfig+0x52c>
 800546e:	bf00      	nop
 8005470:	40021000 	.word	0x40021000
 8005474:	40007000 	.word	0x40007000
 8005478:	4b9a      	ldr	r3, [pc, #616]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	4a99      	ldr	r2, [pc, #612]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005488:	4b96      	ldr	r3, [pc, #600]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548e:	4a95      	ldr	r2, [pc, #596]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005490:	f023 0304 	bic.w	r3, r3, #4
 8005494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d016      	beq.n	80054ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a0:	f7fd fb18 	bl	8002ad4 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a6:	e00a      	b.n	80054be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a8:	f7fd fb14 	bl	8002ad4 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e162      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054be:	4b89      	ldr	r3, [pc, #548]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0ed      	beq.n	80054a8 <HAL_RCC_OscConfig+0x53c>
 80054cc:	e015      	b.n	80054fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ce:	f7fd fb01 	bl	8002ad4 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d4:	e00a      	b.n	80054ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d6:	f7fd fafd 	bl	8002ad4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e14b      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054ec:	4b7d      	ldr	r3, [pc, #500]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ed      	bne.n	80054d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054fa:	7ffb      	ldrb	r3, [r7, #31]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d105      	bne.n	800550c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005500:	4b78      	ldr	r3, [pc, #480]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005504:	4a77      	ldr	r2, [pc, #476]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800550a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d03c      	beq.n	8005592 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01c      	beq.n	800555a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005520:	4b70      	ldr	r3, [pc, #448]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005526:	4a6f      	ldr	r2, [pc, #444]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fd fad0 	bl	8002ad4 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005538:	f7fd facc 	bl	8002ad4 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e11c      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800554a:	4b66      	ldr	r3, [pc, #408]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800554c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <HAL_RCC_OscConfig+0x5cc>
 8005558:	e01b      	b.n	8005592 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800555a:	4b62      	ldr	r3, [pc, #392]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800555c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005560:	4a60      	ldr	r2, [pc, #384]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fd fab3 	bl	8002ad4 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005572:	f7fd faaf 	bl	8002ad4 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0ff      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005584:	4b57      	ldr	r3, [pc, #348]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1ef      	bne.n	8005572 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80f3 	beq.w	8005782 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	f040 80c9 	bne.w	8005738 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055a6:	4b4f      	ldr	r3, [pc, #316]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0203 	and.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d12c      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c4:	3b01      	subs	r3, #1
 80055c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d123      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d11b      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d113      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d109      	bne.n	8005614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	3b01      	subs	r3, #1
 800560e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d06b      	beq.n	80056ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d062      	beq.n	80056e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800561a:	4b32      	ldr	r3, [pc, #200]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0ac      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800562a:	4b2e      	ldr	r3, [pc, #184]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a2d      	ldr	r2, [pc, #180]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005630:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005634:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005636:	f7fd fa4d 	bl	8002ad4 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563e:	f7fd fa49 	bl	8002ad4 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e099      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005650:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800565c:	4b21      	ldr	r3, [pc, #132]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	4b21      	ldr	r3, [pc, #132]	@ (80056e8 <HAL_RCC_OscConfig+0x77c>)
 8005662:	4013      	ands	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800566c:	3a01      	subs	r2, #1
 800566e:	0112      	lsls	r2, r2, #4
 8005670:	4311      	orrs	r1, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005676:	0212      	lsls	r2, r2, #8
 8005678:	4311      	orrs	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800567e:	0852      	lsrs	r2, r2, #1
 8005680:	3a01      	subs	r2, #1
 8005682:	0552      	lsls	r2, r2, #21
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800568a:	0852      	lsrs	r2, r2, #1
 800568c:	3a01      	subs	r2, #1
 800568e:	0652      	lsls	r2, r2, #25
 8005690:	4311      	orrs	r1, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005696:	06d2      	lsls	r2, r2, #27
 8005698:	430a      	orrs	r2, r1
 800569a:	4912      	ldr	r1, [pc, #72]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 800569c:	4313      	orrs	r3, r2
 800569e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056a0:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0f      	ldr	r2, [pc, #60]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80056a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056ac:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	4a0c      	ldr	r2, [pc, #48]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80056b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056b8:	f7fd fa0c 	bl	8002ad4 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c0:	f7fd fa08 	bl	8002ad4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e058      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056d2:	4b04      	ldr	r3, [pc, #16]	@ (80056e4 <HAL_RCC_OscConfig+0x778>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056de:	e050      	b.n	8005782 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e04f      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
 80056e4:	40021000 	.word	0x40021000
 80056e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ec:	4b27      	ldr	r3, [pc, #156]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d144      	bne.n	8005782 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056f8:	4b24      	ldr	r3, [pc, #144]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a23      	ldr	r2, [pc, #140]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 80056fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005702:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005704:	4b21      	ldr	r3, [pc, #132]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a20      	ldr	r2, [pc, #128]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 800570a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800570e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005710:	f7fd f9e0 	bl	8002ad4 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005718:	f7fd f9dc 	bl	8002ad4 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e02c      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572a:	4b18      	ldr	r3, [pc, #96]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x7ac>
 8005736:	e024      	b.n	8005782 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d01f      	beq.n	800577e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573e:	4b13      	ldr	r3, [pc, #76]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a12      	ldr	r2, [pc, #72]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 8005744:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574a:	f7fd f9c3 	bl	8002ad4 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005752:	f7fd f9bf 	bl	8002ad4 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e00f      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005764:	4b09      	ldr	r3, [pc, #36]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005770:	4b06      	ldr	r3, [pc, #24]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	4905      	ldr	r1, [pc, #20]	@ (800578c <HAL_RCC_OscConfig+0x820>)
 8005776:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <HAL_RCC_OscConfig+0x824>)
 8005778:	4013      	ands	r3, r2
 800577a:	60cb      	str	r3, [r1, #12]
 800577c:	e001      	b.n	8005782 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	feeefffc 	.word	0xfeeefffc

08005794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0e7      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057a8:	4b75      	ldr	r3, [pc, #468]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d910      	bls.n	80057d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b72      	ldr	r3, [pc, #456]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 0207 	bic.w	r2, r3, #7
 80057be:	4970      	ldr	r1, [pc, #448]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0cf      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	4b66      	ldr	r3, [pc, #408]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d908      	bls.n	8005806 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f4:	4b63      	ldr	r3, [pc, #396]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4960      	ldr	r1, [pc, #384]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d04c      	beq.n	80058ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800581a:	4b5a      	ldr	r3, [pc, #360]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d121      	bne.n	800586a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e0a6      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d107      	bne.n	8005842 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005832:	4b54      	ldr	r3, [pc, #336]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d115      	bne.n	800586a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e09a      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d107      	bne.n	800585a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800584a:	4b4e      	ldr	r3, [pc, #312]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e08e      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800585a:	4b4a      	ldr	r3, [pc, #296]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e086      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800586a:	4b46      	ldr	r3, [pc, #280]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f023 0203 	bic.w	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4943      	ldr	r1, [pc, #268]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005878:	4313      	orrs	r3, r2
 800587a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587c:	f7fd f92a 	bl	8002ad4 <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005882:	e00a      	b.n	800589a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005884:	f7fd f926 	bl	8002ad4 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d901      	bls.n	800589a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e06e      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589a:	4b3a      	ldr	r3, [pc, #232]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 020c 	and.w	r2, r3, #12
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d1eb      	bne.n	8005884 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d010      	beq.n	80058da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	4b31      	ldr	r3, [pc, #196]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d208      	bcs.n	80058da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	492b      	ldr	r1, [pc, #172]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058da:	4b29      	ldr	r3, [pc, #164]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d210      	bcs.n	800590a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e8:	4b25      	ldr	r3, [pc, #148]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f023 0207 	bic.w	r2, r3, #7
 80058f0:	4923      	ldr	r1, [pc, #140]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f8:	4b21      	ldr	r3, [pc, #132]	@ (8005980 <HAL_RCC_ClockConfig+0x1ec>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d001      	beq.n	800590a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e036      	b.n	8005978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005916:	4b1b      	ldr	r3, [pc, #108]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	4918      	ldr	r1, [pc, #96]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005934:	4b13      	ldr	r3, [pc, #76]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4910      	ldr	r1, [pc, #64]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005944:	4313      	orrs	r3, r2
 8005946:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005948:	f000 f824 	bl	8005994 <HAL_RCC_GetSysClockFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b0d      	ldr	r3, [pc, #52]	@ (8005984 <HAL_RCC_ClockConfig+0x1f0>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	091b      	lsrs	r3, r3, #4
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	490b      	ldr	r1, [pc, #44]	@ (8005988 <HAL_RCC_ClockConfig+0x1f4>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
 8005964:	4a09      	ldr	r2, [pc, #36]	@ (800598c <HAL_RCC_ClockConfig+0x1f8>)
 8005966:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005968:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <HAL_RCC_ClockConfig+0x1fc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd f861 	bl	8002a34 <HAL_InitTick>
 8005972:	4603      	mov	r3, r0
 8005974:	72fb      	strb	r3, [r7, #11]

  return status;
 8005976:	7afb      	ldrb	r3, [r7, #11]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40022000 	.word	0x40022000
 8005984:	40021000 	.word	0x40021000
 8005988:	0800c760 	.word	0x0800c760
 800598c:	20000008 	.word	0x20000008
 8005990:	20000010 	.word	0x20000010

08005994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	@ 0x24
 8005998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a2:	4b3e      	ldr	r3, [pc, #248]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
 80059aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ac:	4b3b      	ldr	r3, [pc, #236]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x34>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b0c      	cmp	r3, #12
 80059c0:	d121      	bne.n	8005a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d11e      	bne.n	8005a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059c8:	4b34      	ldr	r3, [pc, #208]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d107      	bne.n	80059e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059d4:	4b31      	ldr	r3, [pc, #196]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80059d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059da:	0a1b      	lsrs	r3, r3, #8
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e005      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059e4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	091b      	lsrs	r3, r3, #4
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059f0:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10d      	bne.n	8005a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a04:	e00a      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d102      	bne.n	8005a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a0c:	4b25      	ldr	r3, [pc, #148]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	e004      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a18:	4b23      	ldr	r3, [pc, #140]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b0c      	cmp	r3, #12
 8005a20:	d134      	bne.n	8005a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a22:	4b1e      	ldr	r3, [pc, #120]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d003      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0xac>
 8005a38:	e005      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a3c:	617b      	str	r3, [r7, #20]
      break;
 8005a3e:	e005      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a40:	4b19      	ldr	r3, [pc, #100]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a42:	617b      	str	r3, [r7, #20]
      break;
 8005a44:	e002      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	617b      	str	r3, [r7, #20]
      break;
 8005a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a4c:	4b13      	ldr	r3, [pc, #76]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	3301      	adds	r3, #1
 8005a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a5a:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	fb03 f202 	mul.w	r2, r3, r2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	0e5b      	lsrs	r3, r3, #25
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3724      	adds	r7, #36	@ 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	0800c778 	.word	0x0800c778
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	007a1200 	.word	0x007a1200

08005aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	@ (8005ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000008 	.word	0x20000008

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ac8:	f7ff fff0 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4904      	ldr	r1, [pc, #16]	@ (8005aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	0800c770 	.word	0x0800c770

08005af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005af4:	f7ff ffda 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	0adb      	lsrs	r3, r3, #11
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4904      	ldr	r1, [pc, #16]	@ (8005b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000
 8005b18:	0800c770 	.word	0x0800c770

08005b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b28:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b34:	f7ff f9b6 	bl	8004ea4 <HAL_PWREx_GetVoltageRange>
 8005b38:	6178      	str	r0, [r7, #20]
 8005b3a:	e014      	b.n	8005b66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b3c:	4b25      	ldr	r3, [pc, #148]	@ (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b40:	4a24      	ldr	r2, [pc, #144]	@ (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b48:	4b22      	ldr	r3, [pc, #136]	@ (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b54:	f7ff f9a6 	bl	8004ea4 <HAL_PWREx_GetVoltageRange>
 8005b58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b6c:	d10b      	bne.n	8005b86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b80      	cmp	r3, #128	@ 0x80
 8005b72:	d919      	bls.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b78:	d902      	bls.n	8005b80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e013      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b80:	2301      	movs	r3, #1
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	e010      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b80      	cmp	r3, #128	@ 0x80
 8005b8a:	d902      	bls.n	8005b92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	e00a      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b80      	cmp	r3, #128	@ 0x80
 8005b96:	d102      	bne.n	8005b9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b98:	2302      	movs	r3, #2
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	e004      	b.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b70      	cmp	r3, #112	@ 0x70
 8005ba2:	d101      	bne.n	8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 0207 	bic.w	r2, r3, #7
 8005bb0:	4909      	ldr	r1, [pc, #36]	@ (8005bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005bb8:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d001      	beq.n	8005bca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	40022000 	.word	0x40022000

08005bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005be4:	2300      	movs	r3, #0
 8005be6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005be8:	2300      	movs	r3, #0
 8005bea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d031      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c00:	d01a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005c02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c06:	d814      	bhi.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c10:	d10f      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005c12:	4b5d      	ldr	r3, [pc, #372]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4a5c      	ldr	r2, [pc, #368]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c1e:	e00c      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f9de 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	74fb      	strb	r3, [r7, #19]
      break;
 8005c36:	e000      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c3a:	7cfb      	ldrb	r3, [r7, #19]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c40:	4b51      	ldr	r3, [pc, #324]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	494e      	ldr	r1, [pc, #312]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005c56:	e001      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 809e 	beq.w	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c6e:	4b46      	ldr	r3, [pc, #280]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00d      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c84:	4b40      	ldr	r3, [pc, #256]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c88:	4a3f      	ldr	r2, [pc, #252]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c90:	4b3d      	ldr	r3, [pc, #244]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a39      	ldr	r2, [pc, #228]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005caa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cac:	f7fc ff12 	bl	8002ad4 <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005cb2:	e009      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb4:	f7fc ff0e 	bl	8002ad4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d902      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	74fb      	strb	r3, [r7, #19]
        break;
 8005cc6:	e005      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005cc8:	4b30      	ldr	r3, [pc, #192]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ef      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005cd4:	7cfb      	ldrb	r3, [r7, #19]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d15a      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cda:	4b2b      	ldr	r3, [pc, #172]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01e      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d019      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cf6:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d02:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d08:	4a1f      	ldr	r2, [pc, #124]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d12:	4b1d      	ldr	r3, [pc, #116]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d18:	4a1b      	ldr	r2, [pc, #108]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d22:	4a19      	ldr	r2, [pc, #100]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d016      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d34:	f7fc fece 	bl	8002ad4 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3a:	e00b      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3c:	f7fc feca 	bl	8002ad4 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d902      	bls.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	74fb      	strb	r3, [r7, #19]
            break;
 8005d52:	e006      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d54:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0ec      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005d62:	7cfb      	ldrb	r3, [r7, #19]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d68:	4b07      	ldr	r3, [pc, #28]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d76:	4904      	ldr	r1, [pc, #16]	@ (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d7e:	e009      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d80:	7cfb      	ldrb	r3, [r7, #19]
 8005d82:	74bb      	strb	r3, [r7, #18]
 8005d84:	e006      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	7cfb      	ldrb	r3, [r7, #19]
 8005d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d94:	7c7b      	ldrb	r3, [r7, #17]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d105      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d9a:	4b8a      	ldr	r3, [pc, #552]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	4a89      	ldr	r2, [pc, #548]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005db2:	4b84      	ldr	r3, [pc, #528]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f023 0203 	bic.w	r2, r3, #3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	4980      	ldr	r1, [pc, #512]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dd4:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dda:	f023 020c 	bic.w	r2, r3, #12
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	4978      	ldr	r1, [pc, #480]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005df6:	4b73      	ldr	r3, [pc, #460]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	496f      	ldr	r1, [pc, #444]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e18:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e26:	4967      	ldr	r1, [pc, #412]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e3a:	4b62      	ldr	r3, [pc, #392]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e48:	495e      	ldr	r1, [pc, #376]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e5c:	4b59      	ldr	r3, [pc, #356]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	4956      	ldr	r1, [pc, #344]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e7e:	4b51      	ldr	r3, [pc, #324]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8c:	494d      	ldr	r1, [pc, #308]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d028      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea0:	4b48      	ldr	r3, [pc, #288]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	4945      	ldr	r1, [pc, #276]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ebe:	d106      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec0:	4b40      	ldr	r3, [pc, #256]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a3f      	ldr	r2, [pc, #252]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eca:	60d3      	str	r3, [r2, #12]
 8005ecc:	e011      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f882 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005eee:	7cfb      	ldrb	r3, [r7, #19]
 8005ef0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d028      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005efe:	4b31      	ldr	r3, [pc, #196]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0c:	492d      	ldr	r1, [pc, #180]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f1c:	d106      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1e:	4b29      	ldr	r3, [pc, #164]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4a28      	ldr	r2, [pc, #160]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f28:	60d3      	str	r3, [r2, #12]
 8005f2a:	e011      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 f853 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01c      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f5c:	4b19      	ldr	r3, [pc, #100]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6a:	4916      	ldr	r1, [pc, #88]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f7a:	d10c      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	2102      	movs	r1, #2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f830 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fa2:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb0:	4904      	ldr	r1, [pc, #16]	@ (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000

08005fc8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a04      	ldr	r2, [pc, #16]	@ (8005fe4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005fd2:	f043 0304 	orr.w	r3, r3, #4
 8005fd6:	6013      	str	r3, [r2, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000

08005fe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ff6:	4b74      	ldr	r3, [pc, #464]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006002:	4b71      	ldr	r3, [pc, #452]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0203 	and.w	r2, r3, #3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d10d      	bne.n	800602e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
       ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800601a:	4b6b      	ldr	r3, [pc, #428]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	091b      	lsrs	r3, r3, #4
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
       ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d047      	beq.n	80060be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	e044      	b.n	80060be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d018      	beq.n	800606e <RCCEx_PLLSAI1_Config+0x86>
 800603c:	2b03      	cmp	r3, #3
 800603e:	d825      	bhi.n	800608c <RCCEx_PLLSAI1_Config+0xa4>
 8006040:	2b01      	cmp	r3, #1
 8006042:	d002      	beq.n	800604a <RCCEx_PLLSAI1_Config+0x62>
 8006044:	2b02      	cmp	r3, #2
 8006046:	d009      	beq.n	800605c <RCCEx_PLLSAI1_Config+0x74>
 8006048:	e020      	b.n	800608c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800604a:	4b5f      	ldr	r3, [pc, #380]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d11d      	bne.n	8006092 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800605a:	e01a      	b.n	8006092 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800605c:	4b5a      	ldr	r3, [pc, #360]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006064:	2b00      	cmp	r3, #0
 8006066:	d116      	bne.n	8006096 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800606c:	e013      	b.n	8006096 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800606e:	4b56      	ldr	r3, [pc, #344]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800607a:	4b53      	ldr	r3, [pc, #332]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800608a:	e006      	b.n	800609a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e004      	b.n	800609c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800609a:	bf00      	nop
    }

    if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060a2:	4b49      	ldr	r3, [pc, #292]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6819      	ldr	r1, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	430b      	orrs	r3, r1
 80060b8:	4943      	ldr	r1, [pc, #268]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d17c      	bne.n	80061be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060c4:	4b40      	ldr	r3, [pc, #256]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3f      	ldr	r2, [pc, #252]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d0:	f7fc fd00 	bl	8002ad4 <HAL_GetTick>
 80060d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060d6:	e009      	b.n	80060ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060d8:	f7fc fcfc 	bl	8002ad4 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d902      	bls.n	80060ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ea:	e005      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060ec:	4b36      	ldr	r3, [pc, #216]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1ef      	bne.n	80060d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d15f      	bne.n	80061be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d110      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006104:	4b30      	ldr	r3, [pc, #192]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800610c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6892      	ldr	r2, [r2, #8]
 8006114:	0211      	lsls	r1, r2, #8
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	06d2      	lsls	r2, r2, #27
 800611c:	430a      	orrs	r2, r1
 800611e:	492a      	ldr	r1, [pc, #168]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006120:	4313      	orrs	r3, r2
 8006122:	610b      	str	r3, [r1, #16]
 8006124:	e027      	b.n	8006176 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d112      	bne.n	8006152 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800612c:	4b26      	ldr	r3, [pc, #152]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006134:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6892      	ldr	r2, [r2, #8]
 800613c:	0211      	lsls	r1, r2, #8
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6912      	ldr	r2, [r2, #16]
 8006142:	0852      	lsrs	r2, r2, #1
 8006144:	3a01      	subs	r2, #1
 8006146:	0552      	lsls	r2, r2, #21
 8006148:	430a      	orrs	r2, r1
 800614a:	491f      	ldr	r1, [pc, #124]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800614c:	4313      	orrs	r3, r2
 800614e:	610b      	str	r3, [r1, #16]
 8006150:	e011      	b.n	8006176 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006152:	4b1d      	ldr	r3, [pc, #116]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800615a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6892      	ldr	r2, [r2, #8]
 8006162:	0211      	lsls	r1, r2, #8
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6952      	ldr	r2, [r2, #20]
 8006168:	0852      	lsrs	r2, r2, #1
 800616a:	3a01      	subs	r2, #1
 800616c:	0652      	lsls	r2, r2, #25
 800616e:	430a      	orrs	r2, r1
 8006170:	4915      	ldr	r1, [pc, #84]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006176:	4b14      	ldr	r3, [pc, #80]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a13      	ldr	r2, [pc, #76]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800617c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006180:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006182:	f7fc fca7 	bl	8002ad4 <HAL_GetTick>
 8006186:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006188:	e009      	b.n	800619e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800618a:	f7fc fca3 	bl	8002ad4 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d902      	bls.n	800619e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	73fb      	strb	r3, [r7, #15]
          break;
 800619c:	e005      	b.n	80061aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800619e:	4b0a      	ldr	r3, [pc, #40]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0ef      	beq.n	800618a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061b0:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4903      	ldr	r1, [pc, #12]	@ (80061c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40021000 	.word	0x40021000

080061cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e049      	b.n	8006272 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fc f920 	bl	8002438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f000 fb5e 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	d001      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e03b      	b.n	800630c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a19      	ldr	r2, [pc, #100]	@ (8006318 <HAL_TIM_Base_Start_IT+0x9c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_TIM_Base_Start_IT+0x4e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d004      	beq.n	80062ca <HAL_TIM_Base_Start_IT+0x4e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a15      	ldr	r2, [pc, #84]	@ (800631c <HAL_TIM_Base_Start_IT+0xa0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d115      	bne.n	80062f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	4b13      	ldr	r3, [pc, #76]	@ (8006320 <HAL_TIM_Base_Start_IT+0xa4>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d015      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x8c>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e2:	d011      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	e008      	b.n	8006308 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e000      	b.n	800630a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40014000 	.word	0x40014000
 8006320:	00010007 	.word	0x00010007

08006324 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e049      	b.n	80063ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f841 	bl	80063d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fab2 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d020      	beq.n	800644a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0202 	mvn.w	r2, #2
 800641a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fa2c 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 8006436:	e005      	b.n	8006444 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa1e 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa2f 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d020      	beq.n	8006496 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01b      	beq.n	8006496 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f06f 0204 	mvn.w	r2, #4
 8006466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fa06 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 8006482:	e005      	b.n	8006490 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f9f8 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa09 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d020      	beq.n	80064e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01b      	beq.n	80064e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f06f 0208 	mvn.w	r2, #8
 80064b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2204      	movs	r2, #4
 80064b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f9e0 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 80064ce:	e005      	b.n	80064dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f9d2 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9e3 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d020      	beq.n	800652e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01b      	beq.n	800652e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0210 	mvn.w	r2, #16
 80064fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2208      	movs	r2, #8
 8006504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f9ba 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 800651a:	e005      	b.n	8006528 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f9ac 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9bd 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00c      	beq.n	8006552 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f06f 0201 	mvn.w	r2, #1
 800654a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fb ffcb 	bl	80024e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00c      	beq.n	8006580 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fd9e 	bl	80070bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fd96 	bl	80070d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f977 	bl	80068b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00c      	beq.n	80065ec <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0220 	mvn.w	r2, #32
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fd5e 	bl	80070a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_TIM_OC_ConfigChannel+0x1e>
 800660e:	2302      	movs	r3, #2
 8006610:	e066      	b.n	80066e0 <HAL_TIM_OC_ConfigChannel+0xec>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b14      	cmp	r3, #20
 800661e:	d857      	bhi.n	80066d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006620:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	0800667d 	.word	0x0800667d
 800662c:	080066d1 	.word	0x080066d1
 8006630:	080066d1 	.word	0x080066d1
 8006634:	080066d1 	.word	0x080066d1
 8006638:	0800668b 	.word	0x0800668b
 800663c:	080066d1 	.word	0x080066d1
 8006640:	080066d1 	.word	0x080066d1
 8006644:	080066d1 	.word	0x080066d1
 8006648:	08006699 	.word	0x08006699
 800664c:	080066d1 	.word	0x080066d1
 8006650:	080066d1 	.word	0x080066d1
 8006654:	080066d1 	.word	0x080066d1
 8006658:	080066a7 	.word	0x080066a7
 800665c:	080066d1 	.word	0x080066d1
 8006660:	080066d1 	.word	0x080066d1
 8006664:	080066d1 	.word	0x080066d1
 8006668:	080066b5 	.word	0x080066b5
 800666c:	080066d1 	.word	0x080066d1
 8006670:	080066d1 	.word	0x080066d1
 8006674:	080066d1 	.word	0x080066d1
 8006678:	080066c3 	.word	0x080066c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f992 	bl	80069ac <TIM_OC1_SetConfig>
      break;
 8006688:	e025      	b.n	80066d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fa07 	bl	8006aa4 <TIM_OC2_SetConfig>
      break;
 8006696:	e01e      	b.n	80066d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa7a 	bl	8006b98 <TIM_OC3_SetConfig>
      break;
 80066a4:	e017      	b.n	80066d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 faeb 	bl	8006c88 <TIM_OC4_SetConfig>
      break;
 80066b2:	e010      	b.n	80066d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fb42 	bl	8006d44 <TIM_OC5_SetConfig>
      break;
 80066c0:	e009      	b.n	80066d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fb93 	bl	8006df4 <TIM_OC6_SetConfig>
      break;
 80066ce:	e002      	b.n	80066d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	75fb      	strb	r3, [r7, #23]
      break;
 80066d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_ConfigClockSource+0x1c>
 8006700:	2302      	movs	r3, #2
 8006702:	e0b6      	b.n	8006872 <HAL_TIM_ConfigClockSource+0x18a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006722:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800672e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006740:	d03e      	beq.n	80067c0 <HAL_TIM_ConfigClockSource+0xd8>
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006746:	f200 8087 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x170>
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674e:	f000 8086 	beq.w	800685e <HAL_TIM_ConfigClockSource+0x176>
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006756:	d87f      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
 8006758:	2b70      	cmp	r3, #112	@ 0x70
 800675a:	d01a      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0xaa>
 800675c:	2b70      	cmp	r3, #112	@ 0x70
 800675e:	d87b      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
 8006760:	2b60      	cmp	r3, #96	@ 0x60
 8006762:	d050      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x11e>
 8006764:	2b60      	cmp	r3, #96	@ 0x60
 8006766:	d877      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
 8006768:	2b50      	cmp	r3, #80	@ 0x50
 800676a:	d03c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0xfe>
 800676c:	2b50      	cmp	r3, #80	@ 0x50
 800676e:	d873      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
 8006770:	2b40      	cmp	r3, #64	@ 0x40
 8006772:	d058      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x13e>
 8006774:	2b40      	cmp	r3, #64	@ 0x40
 8006776:	d86f      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
 8006778:	2b30      	cmp	r3, #48	@ 0x30
 800677a:	d064      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x15e>
 800677c:	2b30      	cmp	r3, #48	@ 0x30
 800677e:	d86b      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d060      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x15e>
 8006784:	2b20      	cmp	r3, #32
 8006786:	d867      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d05c      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x15e>
 800678c:	2b10      	cmp	r3, #16
 800678e:	d05a      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x15e>
 8006790:	e062      	b.n	8006858 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067a2:	f000 fbfb 	bl	8006f9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	609a      	str	r2, [r3, #8]
      break;
 80067be:	e04f      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067d0:	f000 fbe4 	bl	8006f9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067e2:	609a      	str	r2, [r3, #8]
      break;
 80067e4:	e03c      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f2:	461a      	mov	r2, r3
 80067f4:	f000 fb58 	bl	8006ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2150      	movs	r1, #80	@ 0x50
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fbb1 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 8006804:	e02c      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006812:	461a      	mov	r2, r3
 8006814:	f000 fb77 	bl	8006f06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2160      	movs	r1, #96	@ 0x60
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fba1 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 8006824:	e01c      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006832:	461a      	mov	r2, r3
 8006834:	f000 fb38 	bl	8006ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2140      	movs	r1, #64	@ 0x40
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fb91 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 8006844:	e00c      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f000 fb88 	bl	8006f66 <TIM_ITRx_SetConfig>
      break;
 8006856:	e003      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	e000      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800685e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a30      	ldr	r2, [pc, #192]	@ (80069a0 <TIM_Base_SetConfig+0xd4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0x20>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ea:	d108      	bne.n	80068fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a27      	ldr	r2, [pc, #156]	@ (80069a0 <TIM_Base_SetConfig+0xd4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00b      	beq.n	800691e <TIM_Base_SetConfig+0x52>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690c:	d007      	beq.n	800691e <TIM_Base_SetConfig+0x52>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a24      	ldr	r2, [pc, #144]	@ (80069a4 <TIM_Base_SetConfig+0xd8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_Base_SetConfig+0x52>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a23      	ldr	r2, [pc, #140]	@ (80069a8 <TIM_Base_SetConfig+0xdc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a12      	ldr	r2, [pc, #72]	@ (80069a0 <TIM_Base_SetConfig+0xd4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_Base_SetConfig+0xa0>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a11      	ldr	r2, [pc, #68]	@ (80069a4 <TIM_Base_SetConfig+0xd8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_Base_SetConfig+0xa0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a10      	ldr	r2, [pc, #64]	@ (80069a8 <TIM_Base_SetConfig+0xdc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d103      	bne.n	8006974 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d105      	bne.n	8006992 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f023 0201 	bic.w	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	611a      	str	r2, [r3, #16]
  }
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40012c00 	.word	0x40012c00
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400

080069ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f023 0201 	bic.w	r2, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0303 	bic.w	r3, r3, #3
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f023 0302 	bic.w	r3, r3, #2
 80069f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a24      	ldr	r2, [pc, #144]	@ (8006a98 <TIM_OC1_SetConfig+0xec>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_OC1_SetConfig+0x70>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a23      	ldr	r2, [pc, #140]	@ (8006a9c <TIM_OC1_SetConfig+0xf0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_OC1_SetConfig+0x70>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a22      	ldr	r2, [pc, #136]	@ (8006aa0 <TIM_OC1_SetConfig+0xf4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d10c      	bne.n	8006a36 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 0308 	bic.w	r3, r3, #8
 8006a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 0304 	bic.w	r3, r3, #4
 8006a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a17      	ldr	r2, [pc, #92]	@ (8006a98 <TIM_OC1_SetConfig+0xec>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_OC1_SetConfig+0xa2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <TIM_OC1_SetConfig+0xf0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_OC1_SetConfig+0xa2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a15      	ldr	r2, [pc, #84]	@ (8006aa0 <TIM_OC1_SetConfig+0xf4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d111      	bne.n	8006a72 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	621a      	str	r2, [r3, #32]
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40014400 	.word	0x40014400

08006aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f023 0210 	bic.w	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0320 	bic.w	r3, r3, #32
 8006af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a22      	ldr	r2, [pc, #136]	@ (8006b8c <TIM_OC2_SetConfig+0xe8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10d      	bne.n	8006b24 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a19      	ldr	r2, [pc, #100]	@ (8006b8c <TIM_OC2_SetConfig+0xe8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d007      	beq.n	8006b3c <TIM_OC2_SetConfig+0x98>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a18      	ldr	r2, [pc, #96]	@ (8006b90 <TIM_OC2_SetConfig+0xec>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_OC2_SetConfig+0x98>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a17      	ldr	r2, [pc, #92]	@ (8006b94 <TIM_OC2_SetConfig+0xf0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d113      	bne.n	8006b64 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	621a      	str	r2, [r3, #32]
}
 8006b7e:	bf00      	nop
 8006b80:	371c      	adds	r7, #28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40014000 	.word	0x40014000
 8006b94:	40014400 	.word	0x40014400

08006b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a21      	ldr	r2, [pc, #132]	@ (8006c7c <TIM_OC3_SetConfig+0xe4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10d      	bne.n	8006c16 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a18      	ldr	r2, [pc, #96]	@ (8006c7c <TIM_OC3_SetConfig+0xe4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_OC3_SetConfig+0x96>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a17      	ldr	r2, [pc, #92]	@ (8006c80 <TIM_OC3_SetConfig+0xe8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_OC3_SetConfig+0x96>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a16      	ldr	r2, [pc, #88]	@ (8006c84 <TIM_OC3_SetConfig+0xec>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d113      	bne.n	8006c56 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	621a      	str	r2, [r3, #32]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400

08006c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	031b      	lsls	r3, r3, #12
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a14      	ldr	r2, [pc, #80]	@ (8006d38 <TIM_OC4_SetConfig+0xb0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d007      	beq.n	8006cfc <TIM_OC4_SetConfig+0x74>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a13      	ldr	r2, [pc, #76]	@ (8006d3c <TIM_OC4_SetConfig+0xb4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_OC4_SetConfig+0x74>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a12      	ldr	r2, [pc, #72]	@ (8006d40 <TIM_OC4_SetConfig+0xb8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d109      	bne.n	8006d10 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	019b      	lsls	r3, r3, #6
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40014000 	.word	0x40014000
 8006d40:	40014400 	.word	0x40014400

08006d44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a13      	ldr	r2, [pc, #76]	@ (8006de8 <TIM_OC5_SetConfig+0xa4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d007      	beq.n	8006dae <TIM_OC5_SetConfig+0x6a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a12      	ldr	r2, [pc, #72]	@ (8006dec <TIM_OC5_SetConfig+0xa8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_OC5_SetConfig+0x6a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a11      	ldr	r2, [pc, #68]	@ (8006df0 <TIM_OC5_SetConfig+0xac>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d109      	bne.n	8006dc2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	021b      	lsls	r3, r3, #8
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	621a      	str	r2, [r3, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400

08006df4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	051b      	lsls	r3, r3, #20
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a14      	ldr	r2, [pc, #80]	@ (8006e9c <TIM_OC6_SetConfig+0xa8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_OC6_SetConfig+0x6c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a13      	ldr	r2, [pc, #76]	@ (8006ea0 <TIM_OC6_SetConfig+0xac>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC6_SetConfig+0x6c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a12      	ldr	r2, [pc, #72]	@ (8006ea4 <TIM_OC6_SetConfig+0xb0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d109      	bne.n	8006e74 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400

08006ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0201 	bic.w	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 030a 	bic.w	r3, r3, #10
 8006ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b087      	sub	sp, #28
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f023 0210 	bic.w	r2, r3, #16
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	031b      	lsls	r3, r3, #12
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f043 0307 	orr.w	r3, r3, #7
 8006f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	609a      	str	r2, [r3, #8]
}
 8006f90:	bf00      	nop
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	021a      	lsls	r2, r3, #8
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	609a      	str	r2, [r3, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e04f      	b.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a21      	ldr	r2, [pc, #132]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d108      	bne.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a14      	ldr	r2, [pc, #80]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d009      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d004      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a10      	ldr	r2, [pc, #64]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10c      	bne.n	8007082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800706e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4313      	orrs	r3, r2
 8007078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40014000 	.word	0x40014000

080070a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e040      	b.n	8007178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fb fa76 	bl	80025f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2224      	movs	r2, #36	@ 0x24
 8007110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fe9a 	bl	8007e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc6b 	bl	8007a0c <UART_SetConfig>
 8007136:	4603      	mov	r3, r0
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e01b      	b.n	8007178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800714e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800715e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 ff19 	bl	8007fa8 <UART_CheckIdleState>
 8007176:	4603      	mov	r3, r0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	@ 0x28
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007194:	2b20      	cmp	r3, #32
 8007196:	d177      	bne.n	8007288 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_UART_Transmit+0x24>
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e070      	b.n	800728a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2221      	movs	r2, #33	@ 0x21
 80071b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071b6:	f7fb fc8d 	bl	8002ad4 <HAL_GetTick>
 80071ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d4:	d108      	bne.n	80071e8 <HAL_UART_Transmit+0x68>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	e003      	b.n	80071f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071f0:	e02f      	b.n	8007252 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2200      	movs	r2, #0
 80071fa:	2180      	movs	r1, #128	@ 0x80
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 ff7b 	bl	80080f8 <UART_WaitOnFlagUntilTimeout>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e03b      	b.n	800728a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007224:	b292      	uxth	r2, r2
 8007226:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	3302      	adds	r3, #2
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	e007      	b.n	8007240 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3301      	adds	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1c9      	bne.n	80071f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	2140      	movs	r1, #64	@ 0x40
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 ff45 	bl	80080f8 <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2220      	movs	r2, #32
 8007278:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e005      	b.n	800728a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007288:	2302      	movs	r3, #2
  }
}
 800728a:	4618      	mov	r0, r3
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007294:	b480      	push	{r7}
 8007296:	b08b      	sub	sp, #44	@ 0x2c
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d147      	bne.n	800733a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_UART_Transmit_IT+0x22>
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e040      	b.n	800733c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2221      	movs	r2, #33	@ 0x21
 80072e2:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ec:	d107      	bne.n	80072fe <HAL_UART_Transmit_IT+0x6a>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4a13      	ldr	r2, [pc, #76]	@ (8007348 <HAL_UART_Transmit_IT+0xb4>)
 80072fa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80072fc:	e002      	b.n	8007304 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a12      	ldr	r2, [pc, #72]	@ (800734c <HAL_UART_Transmit_IT+0xb8>)
 8007302:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	613b      	str	r3, [r7, #16]
   return(result);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	623b      	str	r3, [r7, #32]
 8007324:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	69f9      	ldr	r1, [r7, #28]
 8007328:	6a3a      	ldr	r2, [r7, #32]
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e6      	bne.n	8007304 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e000      	b.n	800733c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800733a:	2302      	movs	r3, #2
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	372c      	adds	r7, #44	@ 0x2c
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	0800850b 	.word	0x0800850b
 800734c:	08008455 	.word	0x08008455

08007350 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	@ 0x28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007364:	2b20      	cmp	r3, #32
 8007366:	d137      	bne.n	80073d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <HAL_UART_Receive_IT+0x24>
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e030      	b.n	80073da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a18      	ldr	r2, [pc, #96]	@ (80073e4 <HAL_UART_Receive_IT+0x94>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d01f      	beq.n	80073c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d018      	beq.n	80073c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	613b      	str	r3, [r7, #16]
   return(result);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	623b      	str	r3, [r7, #32]
 80073b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	69f9      	ldr	r1, [r7, #28]
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e6      	bne.n	8007396 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073c8:	88fb      	ldrh	r3, [r7, #6]
 80073ca:	461a      	mov	r2, r3
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 ff00 	bl	80081d4 <UART_Start_Receive_IT>
 80073d4:	4603      	mov	r3, r0
 80073d6:	e000      	b.n	80073da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3728      	adds	r7, #40	@ 0x28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40008000 	.word	0x40008000

080073e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b0ba      	sub	sp, #232	@ 0xe8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800740e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007412:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007416:	4013      	ands	r3, r2
 8007418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800741c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d115      	bne.n	8007450 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 82ca 	beq.w	80079da <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
      }
      return;
 800744e:	e2c4      	b.n	80079da <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8117 	beq.w	8007688 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800745a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007466:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800746a:	4b85      	ldr	r3, [pc, #532]	@ (8007680 <HAL_UART_IRQHandler+0x298>)
 800746c:	4013      	ands	r3, r2
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 810a 	beq.w	8007688 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d011      	beq.n	80074a4 <HAL_UART_IRQHandler+0xbc>
 8007480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00b      	beq.n	80074a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2201      	movs	r2, #1
 8007492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800749a:	f043 0201 	orr.w	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d011      	beq.n	80074d4 <HAL_UART_IRQHandler+0xec>
 80074b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2202      	movs	r2, #2
 80074c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074ca:	f043 0204 	orr.w	r2, r3, #4
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d011      	beq.n	8007504 <HAL_UART_IRQHandler+0x11c>
 80074e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2204      	movs	r2, #4
 80074f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074fa:	f043 0202 	orr.w	r2, r3, #2
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d017      	beq.n	8007540 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d105      	bne.n	8007528 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007520:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2208      	movs	r2, #8
 800752e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007536:	f043 0208 	orr.w	r2, r3, #8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007548:	2b00      	cmp	r3, #0
 800754a:	d012      	beq.n	8007572 <HAL_UART_IRQHandler+0x18a>
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007550:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00c      	beq.n	8007572 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8230 	beq.w	80079de <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00d      	beq.n	80075a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800758a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ba:	2b40      	cmp	r3, #64	@ 0x40
 80075bc:	d005      	beq.n	80075ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d04f      	beq.n	800766a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fec8 	bl	8008360 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075da:	2b40      	cmp	r3, #64	@ 0x40
 80075dc:	d141      	bne.n	8007662 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800760a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800760e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1d9      	bne.n	80075de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800762e:	2b00      	cmp	r3, #0
 8007630:	d013      	beq.n	800765a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007636:	4a13      	ldr	r2, [pc, #76]	@ (8007684 <HAL_UART_IRQHandler+0x29c>)
 8007638:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800763e:	4618      	mov	r0, r3
 8007640:	f7fc fc39 	bl	8003eb6 <HAL_DMA_Abort_IT>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d017      	beq.n	800767a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007658:	e00f      	b.n	800767a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fb f8d4 	bl	8002808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	e00b      	b.n	800767a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7fb f8d0 	bl	8002808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	e007      	b.n	800767a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fb f8cc 	bl	8002808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007678:	e1b1      	b.n	80079de <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767a:	bf00      	nop
    return;
 800767c:	e1af      	b.n	80079de <HAL_UART_IRQHandler+0x5f6>
 800767e:	bf00      	nop
 8007680:	04000120 	.word	0x04000120
 8007684:	08008429 	.word	0x08008429

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800768c:	2b01      	cmp	r3, #1
 800768e:	f040 816a 	bne.w	8007966 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007696:	f003 0310 	and.w	r3, r3, #16
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8163 	beq.w	8007966 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 815c 	beq.w	8007966 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2210      	movs	r2, #16
 80076b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c0:	2b40      	cmp	r3, #64	@ 0x40
 80076c2:	f040 80d4 	bne.w	800786e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 80ad 	beq.w	8007836 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076e6:	429a      	cmp	r2, r3
 80076e8:	f080 80a5 	bcs.w	8007836 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 8086 	bne.w	8007814 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800771c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007736:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800773e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800774a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1da      	bne.n	8007708 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007776:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800777a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800777e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e1      	bne.n	8007752 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800779e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e3      	bne.n	800778e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077e4:	f023 0310 	bic.w	r3, r3, #16
 80077e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e4      	bne.n	80077d4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc fb13 	bl	8003e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007826:	b29b      	uxth	r3, r3
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	b29b      	uxth	r3, r3
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f8e0 	bl	80079f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007834:	e0d5      	b.n	80079e2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800783c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007840:	429a      	cmp	r2, r3
 8007842:	f040 80ce 	bne.w	80079e2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b20      	cmp	r3, #32
 8007854:	f040 80c5 	bne.w	80079e2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f8c4 	bl	80079f4 <HAL_UARTEx_RxEventCallback>
      return;
 800786c:	e0b9      	b.n	80079e2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800787a:	b29b      	uxth	r3, r3
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 80ab 	beq.w	80079e6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80a6 	beq.w	80079e6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e4      	bne.n	800789a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	623b      	str	r3, [r7, #32]
   return(result);
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80078f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80078f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e3      	bne.n	80078d0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	60fb      	str	r3, [r7, #12]
   return(result);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f023 0310 	bic.w	r3, r3, #16
 8007930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	69b9      	ldr	r1, [r7, #24]
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	617b      	str	r3, [r7, #20]
   return(result);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e4      	bne.n	800791c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2202      	movs	r2, #2
 8007956:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f848 	bl	80079f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007964:	e03f      	b.n	80079e6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800796a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <HAL_UART_IRQHandler+0x5a8>
 8007972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007986:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 f805 	bl	8008998 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800798e:	e02d      	b.n	80079ec <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00e      	beq.n	80079ba <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d008      	beq.n	80079ba <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01c      	beq.n	80079ea <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
    }
    return;
 80079b8:	e017      	b.n	80079ea <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d012      	beq.n	80079ec <HAL_UART_IRQHandler+0x604>
 80079c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fdf9 	bl	80085ca <UART_EndTransmit_IT>
    return;
 80079d8:	e008      	b.n	80079ec <HAL_UART_IRQHandler+0x604>
      return;
 80079da:	bf00      	nop
 80079dc:	e006      	b.n	80079ec <HAL_UART_IRQHandler+0x604>
    return;
 80079de:	bf00      	nop
 80079e0:	e004      	b.n	80079ec <HAL_UART_IRQHandler+0x604>
      return;
 80079e2:	bf00      	nop
 80079e4:	e002      	b.n	80079ec <HAL_UART_IRQHandler+0x604>
      return;
 80079e6:	bf00      	nop
 80079e8:	e000      	b.n	80079ec <HAL_UART_IRQHandler+0x604>
    return;
 80079ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80079ec:	37e8      	adds	r7, #232	@ 0xe8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop

080079f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a10:	b08a      	sub	sp, #40	@ 0x28
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4bb4      	ldr	r3, [pc, #720]	@ (8007d0c <UART_SetConfig+0x300>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4aa9      	ldr	r2, [pc, #676]	@ (8007d10 <UART_SetConfig+0x304>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d004      	beq.n	8007a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a74:	4313      	orrs	r3, r2
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4aa0      	ldr	r2, [pc, #640]	@ (8007d14 <UART_SetConfig+0x308>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d126      	bne.n	8007ae4 <UART_SetConfig+0xd8>
 8007a96:	4ba0      	ldr	r3, [pc, #640]	@ (8007d18 <UART_SetConfig+0x30c>)
 8007a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d81b      	bhi.n	8007adc <UART_SetConfig+0xd0>
 8007aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007aac <UART_SetConfig+0xa0>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007acd 	.word	0x08007acd
 8007ab4:	08007ac5 	.word	0x08007ac5
 8007ab8:	08007ad5 	.word	0x08007ad5
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac2:	e080      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aca:	e07c      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007acc:	2304      	movs	r3, #4
 8007ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad2:	e078      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ada:	e074      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007adc:	2310      	movs	r3, #16
 8007ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ae2:	e070      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a8c      	ldr	r2, [pc, #560]	@ (8007d1c <UART_SetConfig+0x310>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d138      	bne.n	8007b60 <UART_SetConfig+0x154>
 8007aee:	4b8a      	ldr	r3, [pc, #552]	@ (8007d18 <UART_SetConfig+0x30c>)
 8007af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af4:	f003 030c 	and.w	r3, r3, #12
 8007af8:	2b0c      	cmp	r3, #12
 8007afa:	d82d      	bhi.n	8007b58 <UART_SetConfig+0x14c>
 8007afc:	a201      	add	r2, pc, #4	@ (adr r2, 8007b04 <UART_SetConfig+0xf8>)
 8007afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b02:	bf00      	nop
 8007b04:	08007b39 	.word	0x08007b39
 8007b08:	08007b59 	.word	0x08007b59
 8007b0c:	08007b59 	.word	0x08007b59
 8007b10:	08007b59 	.word	0x08007b59
 8007b14:	08007b49 	.word	0x08007b49
 8007b18:	08007b59 	.word	0x08007b59
 8007b1c:	08007b59 	.word	0x08007b59
 8007b20:	08007b59 	.word	0x08007b59
 8007b24:	08007b41 	.word	0x08007b41
 8007b28:	08007b59 	.word	0x08007b59
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	08007b59 	.word	0x08007b59
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b3e:	e042      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b46:	e03e      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b4e:	e03a      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b56:	e036      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5e:	e032      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a6a      	ldr	r2, [pc, #424]	@ (8007d10 <UART_SetConfig+0x304>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d12a      	bne.n	8007bc0 <UART_SetConfig+0x1b4>
 8007b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8007d18 <UART_SetConfig+0x30c>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b78:	d01a      	beq.n	8007bb0 <UART_SetConfig+0x1a4>
 8007b7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b7e:	d81b      	bhi.n	8007bb8 <UART_SetConfig+0x1ac>
 8007b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b84:	d00c      	beq.n	8007ba0 <UART_SetConfig+0x194>
 8007b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b8a:	d815      	bhi.n	8007bb8 <UART_SetConfig+0x1ac>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <UART_SetConfig+0x18c>
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b94:	d008      	beq.n	8007ba8 <UART_SetConfig+0x19c>
 8007b96:	e00f      	b.n	8007bb8 <UART_SetConfig+0x1ac>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b9e:	e012      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ba6:	e00e      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007ba8:	2304      	movs	r3, #4
 8007baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bae:	e00a      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bb6:	e006      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007bb8:	2310      	movs	r3, #16
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bbe:	e002      	b.n	8007bc6 <UART_SetConfig+0x1ba>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a51      	ldr	r2, [pc, #324]	@ (8007d10 <UART_SetConfig+0x304>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d17a      	bne.n	8007cc6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d824      	bhi.n	8007c22 <UART_SetConfig+0x216>
 8007bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <UART_SetConfig+0x1d4>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c05 	.word	0x08007c05
 8007be4:	08007c23 	.word	0x08007c23
 8007be8:	08007c0d 	.word	0x08007c0d
 8007bec:	08007c23 	.word	0x08007c23
 8007bf0:	08007c13 	.word	0x08007c13
 8007bf4:	08007c23 	.word	0x08007c23
 8007bf8:	08007c23 	.word	0x08007c23
 8007bfc:	08007c23 	.word	0x08007c23
 8007c00:	08007c1b 	.word	0x08007c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c04:	f7fd ff5e 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8007c08:	61f8      	str	r0, [r7, #28]
        break;
 8007c0a:	e010      	b.n	8007c2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c0c:	4b44      	ldr	r3, [pc, #272]	@ (8007d20 <UART_SetConfig+0x314>)
 8007c0e:	61fb      	str	r3, [r7, #28]
        break;
 8007c10:	e00d      	b.n	8007c2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c12:	f7fd febf 	bl	8005994 <HAL_RCC_GetSysClockFreq>
 8007c16:	61f8      	str	r0, [r7, #28]
        break;
 8007c18:	e009      	b.n	8007c2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c1e:	61fb      	str	r3, [r7, #28]
        break;
 8007c20:	e005      	b.n	8007c2e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8107 	beq.w	8007e44 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	4413      	add	r3, r2
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d305      	bcc.n	8007c52 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c4c:	69fa      	ldr	r2, [r7, #28]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d903      	bls.n	8007c5a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c58:	e0f4      	b.n	8007e44 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	461c      	mov	r4, r3
 8007c60:	4615      	mov	r5, r2
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	022b      	lsls	r3, r5, #8
 8007c6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c70:	0222      	lsls	r2, r4, #8
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	6849      	ldr	r1, [r1, #4]
 8007c76:	0849      	lsrs	r1, r1, #1
 8007c78:	2000      	movs	r0, #0
 8007c7a:	4688      	mov	r8, r1
 8007c7c:	4681      	mov	r9, r0
 8007c7e:	eb12 0a08 	adds.w	sl, r2, r8
 8007c82:	eb43 0b09 	adc.w	fp, r3, r9
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	4650      	mov	r0, sl
 8007c96:	4659      	mov	r1, fp
 8007c98:	f7f8 ffe0 	bl	8000c5c <__aeabi_uldivmod>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007caa:	d308      	bcc.n	8007cbe <UART_SetConfig+0x2b2>
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cb2:	d204      	bcs.n	8007cbe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	60da      	str	r2, [r3, #12]
 8007cbc:	e0c2      	b.n	8007e44 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007cc4:	e0be      	b.n	8007e44 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cce:	d16a      	bne.n	8007da6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d834      	bhi.n	8007d42 <UART_SetConfig+0x336>
 8007cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce0 <UART_SetConfig+0x2d4>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d2d 	.word	0x08007d2d
 8007cec:	08007d43 	.word	0x08007d43
 8007cf0:	08007d33 	.word	0x08007d33
 8007cf4:	08007d43 	.word	0x08007d43
 8007cf8:	08007d43 	.word	0x08007d43
 8007cfc:	08007d43 	.word	0x08007d43
 8007d00:	08007d3b 	.word	0x08007d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d04:	f7fd fede 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8007d08:	61f8      	str	r0, [r7, #28]
        break;
 8007d0a:	e020      	b.n	8007d4e <UART_SetConfig+0x342>
 8007d0c:	efff69f3 	.word	0xefff69f3
 8007d10:	40008000 	.word	0x40008000
 8007d14:	40013800 	.word	0x40013800
 8007d18:	40021000 	.word	0x40021000
 8007d1c:	40004400 	.word	0x40004400
 8007d20:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d24:	f7fd fee4 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 8007d28:	61f8      	str	r0, [r7, #28]
        break;
 8007d2a:	e010      	b.n	8007d4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8007e60 <UART_SetConfig+0x454>)
 8007d2e:	61fb      	str	r3, [r7, #28]
        break;
 8007d30:	e00d      	b.n	8007d4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d32:	f7fd fe2f 	bl	8005994 <HAL_RCC_GetSysClockFreq>
 8007d36:	61f8      	str	r0, [r7, #28]
        break;
 8007d38:	e009      	b.n	8007d4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d3e:	61fb      	str	r3, [r7, #28]
        break;
 8007d40:	e005      	b.n	8007d4e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d077      	beq.n	8007e44 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	005a      	lsls	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	085b      	lsrs	r3, r3, #1
 8007d5e:	441a      	add	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b0f      	cmp	r3, #15
 8007d6e:	d916      	bls.n	8007d9e <UART_SetConfig+0x392>
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d76:	d212      	bcs.n	8007d9e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f023 030f 	bic.w	r3, r3, #15
 8007d80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	8afb      	ldrh	r3, [r7, #22]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	8afa      	ldrh	r2, [r7, #22]
 8007d9a:	60da      	str	r2, [r3, #12]
 8007d9c:	e052      	b.n	8007e44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007da4:	e04e      	b.n	8007e44 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007da6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	d827      	bhi.n	8007dfe <UART_SetConfig+0x3f2>
 8007dae:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <UART_SetConfig+0x3a8>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	08007dff 	.word	0x08007dff
 8007dc4:	08007def 	.word	0x08007def
 8007dc8:	08007dff 	.word	0x08007dff
 8007dcc:	08007dff 	.word	0x08007dff
 8007dd0:	08007dff 	.word	0x08007dff
 8007dd4:	08007df7 	.word	0x08007df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd8:	f7fd fe74 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8007ddc:	61f8      	str	r0, [r7, #28]
        break;
 8007dde:	e014      	b.n	8007e0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de0:	f7fd fe86 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 8007de4:	61f8      	str	r0, [r7, #28]
        break;
 8007de6:	e010      	b.n	8007e0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007de8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e60 <UART_SetConfig+0x454>)
 8007dea:	61fb      	str	r3, [r7, #28]
        break;
 8007dec:	e00d      	b.n	8007e0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dee:	f7fd fdd1 	bl	8005994 <HAL_RCC_GetSysClockFreq>
 8007df2:	61f8      	str	r0, [r7, #28]
        break;
 8007df4:	e009      	b.n	8007e0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dfa:	61fb      	str	r3, [r7, #28]
        break;
 8007dfc:	e005      	b.n	8007e0a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e08:	bf00      	nop
    }

    if (pclk != 0U)
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d019      	beq.n	8007e44 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	085a      	lsrs	r2, r3, #1
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	441a      	add	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b0f      	cmp	r3, #15
 8007e28:	d909      	bls.n	8007e3e <UART_SetConfig+0x432>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e30:	d205      	bcs.n	8007e3e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60da      	str	r2, [r3, #12]
 8007e3c:	e002      	b.n	8007e44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3728      	adds	r7, #40	@ 0x28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e5e:	bf00      	nop
 8007e60:	00f42400 	.word	0x00f42400

08007e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	f003 0308 	and.w	r3, r3, #8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed6:	f003 0304 	and.w	r3, r3, #4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01a      	beq.n	8007f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f62:	d10a      	bne.n	8007f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	605a      	str	r2, [r3, #4]
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b098      	sub	sp, #96	@ 0x60
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fb8:	f7fa fd8c 	bl	8002ad4 <HAL_GetTick>
 8007fbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d12e      	bne.n	800802a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f88c 	bl	80080f8 <UART_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d021      	beq.n	800802a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008004:	647b      	str	r3, [r7, #68]	@ 0x44
 8008006:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800800a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e6      	bne.n	8007fe6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e062      	b.n	80080f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d149      	bne.n	80080cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008038:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008040:	2200      	movs	r2, #0
 8008042:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f856 	bl	80080f8 <UART_WaitOnFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d03c      	beq.n	80080cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	623b      	str	r3, [r7, #32]
   return(result);
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008070:	633b      	str	r3, [r7, #48]	@ 0x30
 8008072:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	60fb      	str	r3, [r7, #12]
   return(result);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3308      	adds	r3, #8
 80080a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080a4:	61fa      	str	r2, [r7, #28]
 80080a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	69b9      	ldr	r1, [r7, #24]
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	617b      	str	r3, [r7, #20]
   return(result);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e011      	b.n	80080f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3758      	adds	r7, #88	@ 0x58
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	4613      	mov	r3, r2
 8008106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008108:	e04f      	b.n	80081aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008110:	d04b      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008112:	f7fa fcdf 	bl	8002ad4 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <UART_WaitOnFlagUntilTimeout+0x30>
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e04e      	b.n	80081ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	d037      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b80      	cmp	r3, #128	@ 0x80
 800813e:	d034      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b40      	cmp	r3, #64	@ 0x40
 8008144:	d031      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b08      	cmp	r3, #8
 8008152:	d110      	bne.n	8008176 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2208      	movs	r2, #8
 800815a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f8ff 	bl	8008360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2208      	movs	r2, #8
 8008166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e029      	b.n	80081ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008184:	d111      	bne.n	80081aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800818e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f8e5 	bl	8008360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e00f      	b.n	80081ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69da      	ldr	r2, [r3, #28]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4013      	ands	r3, r2
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	bf0c      	ite	eq
 80081ba:	2301      	moveq	r3, #1
 80081bc:	2300      	movne	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d0a0      	beq.n	800810a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b097      	sub	sp, #92	@ 0x5c
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	88fa      	ldrh	r2, [r7, #6]
 80081ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	88fa      	ldrh	r2, [r7, #6]
 80081f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008206:	d10e      	bne.n	8008226 <UART_Start_Receive_IT+0x52>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d105      	bne.n	800821c <UART_Start_Receive_IT+0x48>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008216:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800821a:	e02d      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	22ff      	movs	r2, #255	@ 0xff
 8008220:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008224:	e028      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10d      	bne.n	800824a <UART_Start_Receive_IT+0x76>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <UART_Start_Receive_IT+0x6c>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	22ff      	movs	r2, #255	@ 0xff
 800823a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800823e:	e01b      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	227f      	movs	r2, #127	@ 0x7f
 8008244:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008248:	e016      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008252:	d10d      	bne.n	8008270 <UART_Start_Receive_IT+0x9c>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <UART_Start_Receive_IT+0x92>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	227f      	movs	r2, #127	@ 0x7f
 8008260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008264:	e008      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	223f      	movs	r2, #63	@ 0x3f
 800826a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800826e:	e003      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2222      	movs	r2, #34	@ 0x22
 8008284:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	657b      	str	r3, [r7, #84]	@ 0x54
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80082aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80082b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c4:	d107      	bne.n	80082d6 <UART_Start_Receive_IT+0x102>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a21      	ldr	r2, [pc, #132]	@ (8008358 <UART_Start_Receive_IT+0x184>)
 80082d2:	669a      	str	r2, [r3, #104]	@ 0x68
 80082d4:	e002      	b.n	80082dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4a20      	ldr	r2, [pc, #128]	@ (800835c <UART_Start_Receive_IT+0x188>)
 80082da:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d019      	beq.n	8008318 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80082f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
 8008304:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e6      	bne.n	80082e4 <UART_Start_Receive_IT+0x110>
 8008316:	e018      	b.n	800834a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	613b      	str	r3, [r7, #16]
   return(result);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f043 0320 	orr.w	r3, r3, #32
 800832c:	653b      	str	r3, [r7, #80]	@ 0x50
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008336:	623b      	str	r3, [r7, #32]
 8008338:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	69f9      	ldr	r1, [r7, #28]
 800833c:	6a3a      	ldr	r2, [r7, #32]
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	61bb      	str	r3, [r7, #24]
   return(result);
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e6      	bne.n	8008318 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	375c      	adds	r7, #92	@ 0x5c
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	080087dd 	.word	0x080087dd
 800835c:	08008621 	.word	0x08008621

08008360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b095      	sub	sp, #84	@ 0x54
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800837c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008386:	643b      	str	r3, [r7, #64]	@ 0x40
 8008388:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800838c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e6      	bne.n	8008368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e5      	bne.n	800839a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d118      	bne.n	8008408 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f023 0310 	bic.w	r3, r3, #16
 80083ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6979      	ldr	r1, [r7, #20]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	613b      	str	r3, [r7, #16]
   return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e6      	bne.n	80083d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800841c:	bf00      	nop
 800841e:	3754      	adds	r7, #84	@ 0x54
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7fa f9de 	bl	8002808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b08f      	sub	sp, #60	@ 0x3c
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008460:	2b21      	cmp	r3, #33	@ 0x21
 8008462:	d14c      	bne.n	80084fe <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d132      	bne.n	80084d6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	61fb      	str	r3, [r7, #28]
   return(result);
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008484:	637b      	str	r3, [r7, #52]	@ 0x34
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008490:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e6      	bne.n	8008470 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6979      	ldr	r1, [r7, #20]
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	613b      	str	r3, [r7, #16]
   return(result);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e6      	bne.n	80084a2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80084d4:	e013      	b.n	80084fe <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80084fe:	bf00      	nop
 8008500:	373c      	adds	r7, #60	@ 0x3c
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800850a:	b480      	push	{r7}
 800850c:	b091      	sub	sp, #68	@ 0x44
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008516:	2b21      	cmp	r3, #33	@ 0x21
 8008518:	d151      	bne.n	80085be <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d132      	bne.n	800858c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	623b      	str	r3, [r7, #32]
   return(result);
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800853a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008544:	633b      	str	r3, [r7, #48]	@ 0x30
 8008546:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800854a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e6      	bne.n	8008526 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	60fb      	str	r3, [r7, #12]
   return(result);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800856c:	637b      	str	r3, [r7, #52]	@ 0x34
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	69b9      	ldr	r1, [r7, #24]
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	617b      	str	r3, [r7, #20]
   return(result);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e6      	bne.n	8008558 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800858a:	e018      	b.n	80085be <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008590:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008594:	881a      	ldrh	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800859e:	b292      	uxth	r2, r2
 80085a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085a6:	1c9a      	adds	r2, r3, #2
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80085be:	bf00      	nop
 80085c0:	3744      	adds	r7, #68	@ 0x44
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b088      	sub	sp, #32
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	60bb      	str	r3, [r7, #8]
   return(result);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6979      	ldr	r1, [r7, #20]
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	613b      	str	r3, [r7, #16]
   return(result);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e6      	bne.n	80085d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7fa f8ad 	bl	8002770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008616:	bf00      	nop
 8008618:	3720      	adds	r7, #32
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b09c      	sub	sp, #112	@ 0x70
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800862e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008638:	2b22      	cmp	r3, #34	@ 0x22
 800863a:	f040 80be 	bne.w	80087ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008644:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008648:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800864c:	b2d9      	uxtb	r1, r3
 800864e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008652:	b2da      	uxtb	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008658:	400a      	ands	r2, r1
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 80a3 	bne.w	80087ce <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800869c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e6      	bne.n	8008688 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80086da:	647a      	str	r2, [r7, #68]	@ 0x44
 80086dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e5      	bne.n	80086ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a34      	ldr	r2, [pc, #208]	@ (80087d8 <UART_RxISR_8BIT+0x1b8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d01f      	beq.n	800874c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d018      	beq.n	800874c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	623b      	str	r3, [r7, #32]
   return(result);
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800872e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008738:	633b      	str	r3, [r7, #48]	@ 0x30
 800873a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800873e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008740:	e841 2300 	strex	r3, r2, [r1]
 8008744:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e6      	bne.n	800871a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008750:	2b01      	cmp	r3, #1
 8008752:	d12e      	bne.n	80087b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	60fb      	str	r3, [r7, #12]
   return(result);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0310 	bic.w	r3, r3, #16
 800876e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008778:	61fb      	str	r3, [r7, #28]
 800877a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	69b9      	ldr	r1, [r7, #24]
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	617b      	str	r3, [r7, #20]
   return(result);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e6      	bne.n	800875a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f003 0310 	and.w	r3, r3, #16
 8008796:	2b10      	cmp	r3, #16
 8008798:	d103      	bne.n	80087a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2210      	movs	r2, #16
 80087a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff f922 	bl	80079f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087b0:	e00d      	b.n	80087ce <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7f9 fffa 	bl	80027ac <HAL_UART_RxCpltCallback>
}
 80087b8:	e009      	b.n	80087ce <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	8b1b      	ldrh	r3, [r3, #24]
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0208 	orr.w	r2, r2, #8
 80087ca:	b292      	uxth	r2, r2
 80087cc:	831a      	strh	r2, [r3, #24]
}
 80087ce:	bf00      	nop
 80087d0:	3770      	adds	r7, #112	@ 0x70
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40008000 	.word	0x40008000

080087dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b09c      	sub	sp, #112	@ 0x70
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f4:	2b22      	cmp	r3, #34	@ 0x22
 80087f6:	f040 80be 	bne.w	8008976 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008800:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008808:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800880a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800880e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008812:	4013      	ands	r3, r2
 8008814:	b29a      	uxth	r2, r3
 8008816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008818:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	f040 80a3 	bne.w	800898a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008858:	667b      	str	r3, [r7, #100]	@ 0x64
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008862:	657b      	str	r3, [r7, #84]	@ 0x54
 8008864:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008868:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	663b      	str	r3, [r7, #96]	@ 0x60
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008896:	643a      	str	r2, [r7, #64]	@ 0x40
 8008898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800889c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e5      	bne.n	8008876 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a34      	ldr	r2, [pc, #208]	@ (8008994 <UART_RxISR_16BIT+0x1b8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d01f      	beq.n	8008908 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d018      	beq.n	8008908 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e6      	bne.n	80088d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800890c:	2b01      	cmp	r3, #1
 800890e:	d12e      	bne.n	800896e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	60bb      	str	r3, [r7, #8]
   return(result);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f023 0310 	bic.w	r3, r3, #16
 800892a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6979      	ldr	r1, [r7, #20]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	613b      	str	r3, [r7, #16]
   return(result);
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e6      	bne.n	8008916 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	f003 0310 	and.w	r3, r3, #16
 8008952:	2b10      	cmp	r3, #16
 8008954:	d103      	bne.n	800895e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2210      	movs	r2, #16
 800895c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff f844 	bl	80079f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800896c:	e00d      	b.n	800898a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7f9 ff1c 	bl	80027ac <HAL_UART_RxCpltCallback>
}
 8008974:	e009      	b.n	800898a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	8b1b      	ldrh	r3, [r3, #24]
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0208 	orr.w	r2, r2, #8
 8008986:	b292      	uxth	r2, r2
 8008988:	831a      	strh	r2, [r3, #24]
}
 800898a:	bf00      	nop
 800898c:	3770      	adds	r7, #112	@ 0x70
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	40008000 	.word	0x40008000

08008998 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <__assert_func>:
 80089ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ae:	4614      	mov	r4, r2
 80089b0:	461a      	mov	r2, r3
 80089b2:	4b09      	ldr	r3, [pc, #36]	@ (80089d8 <__assert_func+0x2c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4605      	mov	r5, r0
 80089b8:	68d8      	ldr	r0, [r3, #12]
 80089ba:	b954      	cbnz	r4, 80089d2 <__assert_func+0x26>
 80089bc:	4b07      	ldr	r3, [pc, #28]	@ (80089dc <__assert_func+0x30>)
 80089be:	461c      	mov	r4, r3
 80089c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089c4:	9100      	str	r1, [sp, #0]
 80089c6:	462b      	mov	r3, r5
 80089c8:	4905      	ldr	r1, [pc, #20]	@ (80089e0 <__assert_func+0x34>)
 80089ca:	f000 fd3d 	bl	8009448 <fiprintf>
 80089ce:	f000 fdd4 	bl	800957a <abort>
 80089d2:	4b04      	ldr	r3, [pc, #16]	@ (80089e4 <__assert_func+0x38>)
 80089d4:	e7f4      	b.n	80089c0 <__assert_func+0x14>
 80089d6:	bf00      	nop
 80089d8:	20000024 	.word	0x20000024
 80089dc:	0800c7e3 	.word	0x0800c7e3
 80089e0:	0800c7b5 	.word	0x0800c7b5
 80089e4:	0800c7a8 	.word	0x0800c7a8

080089e8 <__cvt>:
 80089e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089ec:	ec57 6b10 	vmov	r6, r7, d0
 80089f0:	2f00      	cmp	r7, #0
 80089f2:	460c      	mov	r4, r1
 80089f4:	4619      	mov	r1, r3
 80089f6:	463b      	mov	r3, r7
 80089f8:	bfbb      	ittet	lt
 80089fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80089fe:	461f      	movlt	r7, r3
 8008a00:	2300      	movge	r3, #0
 8008a02:	232d      	movlt	r3, #45	@ 0x2d
 8008a04:	700b      	strb	r3, [r1, #0]
 8008a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008a0c:	4691      	mov	r9, r2
 8008a0e:	f023 0820 	bic.w	r8, r3, #32
 8008a12:	bfbc      	itt	lt
 8008a14:	4632      	movlt	r2, r6
 8008a16:	4616      	movlt	r6, r2
 8008a18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a1c:	d005      	beq.n	8008a2a <__cvt+0x42>
 8008a1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008a22:	d100      	bne.n	8008a26 <__cvt+0x3e>
 8008a24:	3401      	adds	r4, #1
 8008a26:	2102      	movs	r1, #2
 8008a28:	e000      	b.n	8008a2c <__cvt+0x44>
 8008a2a:	2103      	movs	r1, #3
 8008a2c:	ab03      	add	r3, sp, #12
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	ab02      	add	r3, sp, #8
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	ec47 6b10 	vmov	d0, r6, r7
 8008a38:	4653      	mov	r3, sl
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	f000 fe2c 	bl	8009698 <_dtoa_r>
 8008a40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008a44:	4605      	mov	r5, r0
 8008a46:	d119      	bne.n	8008a7c <__cvt+0x94>
 8008a48:	f019 0f01 	tst.w	r9, #1
 8008a4c:	d00e      	beq.n	8008a6c <__cvt+0x84>
 8008a4e:	eb00 0904 	add.w	r9, r0, r4
 8008a52:	2200      	movs	r2, #0
 8008a54:	2300      	movs	r3, #0
 8008a56:	4630      	mov	r0, r6
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f8 f83f 	bl	8000adc <__aeabi_dcmpeq>
 8008a5e:	b108      	cbz	r0, 8008a64 <__cvt+0x7c>
 8008a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a64:	2230      	movs	r2, #48	@ 0x30
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	454b      	cmp	r3, r9
 8008a6a:	d31e      	bcc.n	8008aaa <__cvt+0xc2>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a70:	1b5b      	subs	r3, r3, r5
 8008a72:	4628      	mov	r0, r5
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	b004      	add	sp, #16
 8008a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a80:	eb00 0904 	add.w	r9, r0, r4
 8008a84:	d1e5      	bne.n	8008a52 <__cvt+0x6a>
 8008a86:	7803      	ldrb	r3, [r0, #0]
 8008a88:	2b30      	cmp	r3, #48	@ 0x30
 8008a8a:	d10a      	bne.n	8008aa2 <__cvt+0xba>
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2300      	movs	r3, #0
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f8 f822 	bl	8000adc <__aeabi_dcmpeq>
 8008a98:	b918      	cbnz	r0, 8008aa2 <__cvt+0xba>
 8008a9a:	f1c4 0401 	rsb	r4, r4, #1
 8008a9e:	f8ca 4000 	str.w	r4, [sl]
 8008aa2:	f8da 3000 	ldr.w	r3, [sl]
 8008aa6:	4499      	add	r9, r3
 8008aa8:	e7d3      	b.n	8008a52 <__cvt+0x6a>
 8008aaa:	1c59      	adds	r1, r3, #1
 8008aac:	9103      	str	r1, [sp, #12]
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	e7d9      	b.n	8008a66 <__cvt+0x7e>

08008ab2 <__exponent>:
 8008ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	bfba      	itte	lt
 8008ab8:	4249      	neglt	r1, r1
 8008aba:	232d      	movlt	r3, #45	@ 0x2d
 8008abc:	232b      	movge	r3, #43	@ 0x2b
 8008abe:	2909      	cmp	r1, #9
 8008ac0:	7002      	strb	r2, [r0, #0]
 8008ac2:	7043      	strb	r3, [r0, #1]
 8008ac4:	dd29      	ble.n	8008b1a <__exponent+0x68>
 8008ac6:	f10d 0307 	add.w	r3, sp, #7
 8008aca:	461d      	mov	r5, r3
 8008acc:	270a      	movs	r7, #10
 8008ace:	461a      	mov	r2, r3
 8008ad0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ad4:	fb07 1416 	mls	r4, r7, r6, r1
 8008ad8:	3430      	adds	r4, #48	@ 0x30
 8008ada:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ade:	460c      	mov	r4, r1
 8008ae0:	2c63      	cmp	r4, #99	@ 0x63
 8008ae2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	dcf1      	bgt.n	8008ace <__exponent+0x1c>
 8008aea:	3130      	adds	r1, #48	@ 0x30
 8008aec:	1e94      	subs	r4, r2, #2
 8008aee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008af2:	1c41      	adds	r1, r0, #1
 8008af4:	4623      	mov	r3, r4
 8008af6:	42ab      	cmp	r3, r5
 8008af8:	d30a      	bcc.n	8008b10 <__exponent+0x5e>
 8008afa:	f10d 0309 	add.w	r3, sp, #9
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	42ac      	cmp	r4, r5
 8008b02:	bf88      	it	hi
 8008b04:	2300      	movhi	r3, #0
 8008b06:	3302      	adds	r3, #2
 8008b08:	4403      	add	r3, r0
 8008b0a:	1a18      	subs	r0, r3, r0
 8008b0c:	b003      	add	sp, #12
 8008b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b18:	e7ed      	b.n	8008af6 <__exponent+0x44>
 8008b1a:	2330      	movs	r3, #48	@ 0x30
 8008b1c:	3130      	adds	r1, #48	@ 0x30
 8008b1e:	7083      	strb	r3, [r0, #2]
 8008b20:	70c1      	strb	r1, [r0, #3]
 8008b22:	1d03      	adds	r3, r0, #4
 8008b24:	e7f1      	b.n	8008b0a <__exponent+0x58>
	...

08008b28 <_printf_float>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	b08d      	sub	sp, #52	@ 0x34
 8008b2e:	460c      	mov	r4, r1
 8008b30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b34:	4616      	mov	r6, r2
 8008b36:	461f      	mov	r7, r3
 8008b38:	4605      	mov	r5, r0
 8008b3a:	f000 fcd7 	bl	80094ec <_localeconv_r>
 8008b3e:	6803      	ldr	r3, [r0, #0]
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7f7 fb94 	bl	8000270 <strlen>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b50:	9005      	str	r0, [sp, #20]
 8008b52:	3307      	adds	r3, #7
 8008b54:	f023 0307 	bic.w	r3, r3, #7
 8008b58:	f103 0208 	add.w	r2, r3, #8
 8008b5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b60:	f8d4 b000 	ldr.w	fp, [r4]
 8008b64:	f8c8 2000 	str.w	r2, [r8]
 8008b68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b70:	9307      	str	r3, [sp, #28]
 8008b72:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8008df0 <_printf_float+0x2c8>)
 8008b80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b84:	f7f7 ffdc 	bl	8000b40 <__aeabi_dcmpun>
 8008b88:	bb70      	cbnz	r0, 8008be8 <_printf_float+0xc0>
 8008b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b8e:	4b98      	ldr	r3, [pc, #608]	@ (8008df0 <_printf_float+0x2c8>)
 8008b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b94:	f7f7 ffb6 	bl	8000b04 <__aeabi_dcmple>
 8008b98:	bb30      	cbnz	r0, 8008be8 <_printf_float+0xc0>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	f7f7 ffa5 	bl	8000af0 <__aeabi_dcmplt>
 8008ba6:	b110      	cbz	r0, 8008bae <_printf_float+0x86>
 8008ba8:	232d      	movs	r3, #45	@ 0x2d
 8008baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bae:	4a91      	ldr	r2, [pc, #580]	@ (8008df4 <_printf_float+0x2cc>)
 8008bb0:	4b91      	ldr	r3, [pc, #580]	@ (8008df8 <_printf_float+0x2d0>)
 8008bb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bb6:	bf94      	ite	ls
 8008bb8:	4690      	movls	r8, r2
 8008bba:	4698      	movhi	r8, r3
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	f02b 0304 	bic.w	r3, fp, #4
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	f04f 0900 	mov.w	r9, #0
 8008bca:	9700      	str	r7, [sp, #0]
 8008bcc:	4633      	mov	r3, r6
 8008bce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f000 f9d2 	bl	8008f7c <_printf_common>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f040 808d 	bne.w	8008cf8 <_printf_float+0x1d0>
 8008bde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008be2:	b00d      	add	sp, #52	@ 0x34
 8008be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	4640      	mov	r0, r8
 8008bee:	4649      	mov	r1, r9
 8008bf0:	f7f7 ffa6 	bl	8000b40 <__aeabi_dcmpun>
 8008bf4:	b140      	cbz	r0, 8008c08 <_printf_float+0xe0>
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bfbc      	itt	lt
 8008bfc:	232d      	movlt	r3, #45	@ 0x2d
 8008bfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c02:	4a7e      	ldr	r2, [pc, #504]	@ (8008dfc <_printf_float+0x2d4>)
 8008c04:	4b7e      	ldr	r3, [pc, #504]	@ (8008e00 <_printf_float+0x2d8>)
 8008c06:	e7d4      	b.n	8008bb2 <_printf_float+0x8a>
 8008c08:	6863      	ldr	r3, [r4, #4]
 8008c0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008c0e:	9206      	str	r2, [sp, #24]
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	d13b      	bne.n	8008c8c <_printf_float+0x164>
 8008c14:	2306      	movs	r3, #6
 8008c16:	6063      	str	r3, [r4, #4]
 8008c18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	6022      	str	r2, [r4, #0]
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008c28:	ab09      	add	r3, sp, #36	@ 0x24
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	6861      	ldr	r1, [r4, #4]
 8008c2e:	ec49 8b10 	vmov	d0, r8, r9
 8008c32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c36:	4628      	mov	r0, r5
 8008c38:	f7ff fed6 	bl	80089e8 <__cvt>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c40:	2b47      	cmp	r3, #71	@ 0x47
 8008c42:	4680      	mov	r8, r0
 8008c44:	d129      	bne.n	8008c9a <_printf_float+0x172>
 8008c46:	1cc8      	adds	r0, r1, #3
 8008c48:	db02      	blt.n	8008c50 <_printf_float+0x128>
 8008c4a:	6863      	ldr	r3, [r4, #4]
 8008c4c:	4299      	cmp	r1, r3
 8008c4e:	dd41      	ble.n	8008cd4 <_printf_float+0x1ac>
 8008c50:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c54:	fa5f fa8a 	uxtb.w	sl, sl
 8008c58:	3901      	subs	r1, #1
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c60:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c62:	f7ff ff26 	bl	8008ab2 <__exponent>
 8008c66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c68:	1813      	adds	r3, r2, r0
 8008c6a:	2a01      	cmp	r2, #1
 8008c6c:	4681      	mov	r9, r0
 8008c6e:	6123      	str	r3, [r4, #16]
 8008c70:	dc02      	bgt.n	8008c78 <_printf_float+0x150>
 8008c72:	6822      	ldr	r2, [r4, #0]
 8008c74:	07d2      	lsls	r2, r2, #31
 8008c76:	d501      	bpl.n	8008c7c <_printf_float+0x154>
 8008c78:	3301      	adds	r3, #1
 8008c7a:	6123      	str	r3, [r4, #16]
 8008c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0a2      	beq.n	8008bca <_printf_float+0xa2>
 8008c84:	232d      	movs	r3, #45	@ 0x2d
 8008c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c8a:	e79e      	b.n	8008bca <_printf_float+0xa2>
 8008c8c:	9a06      	ldr	r2, [sp, #24]
 8008c8e:	2a47      	cmp	r2, #71	@ 0x47
 8008c90:	d1c2      	bne.n	8008c18 <_printf_float+0xf0>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1c0      	bne.n	8008c18 <_printf_float+0xf0>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e7bd      	b.n	8008c16 <_printf_float+0xee>
 8008c9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c9e:	d9db      	bls.n	8008c58 <_printf_float+0x130>
 8008ca0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ca4:	d118      	bne.n	8008cd8 <_printf_float+0x1b0>
 8008ca6:	2900      	cmp	r1, #0
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	dd0b      	ble.n	8008cc4 <_printf_float+0x19c>
 8008cac:	6121      	str	r1, [r4, #16]
 8008cae:	b913      	cbnz	r3, 8008cb6 <_printf_float+0x18e>
 8008cb0:	6822      	ldr	r2, [r4, #0]
 8008cb2:	07d0      	lsls	r0, r2, #31
 8008cb4:	d502      	bpl.n	8008cbc <_printf_float+0x194>
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	440b      	add	r3, r1
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008cbe:	f04f 0900 	mov.w	r9, #0
 8008cc2:	e7db      	b.n	8008c7c <_printf_float+0x154>
 8008cc4:	b913      	cbnz	r3, 8008ccc <_printf_float+0x1a4>
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	07d2      	lsls	r2, r2, #31
 8008cca:	d501      	bpl.n	8008cd0 <_printf_float+0x1a8>
 8008ccc:	3302      	adds	r3, #2
 8008cce:	e7f4      	b.n	8008cba <_printf_float+0x192>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e7f2      	b.n	8008cba <_printf_float+0x192>
 8008cd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cda:	4299      	cmp	r1, r3
 8008cdc:	db05      	blt.n	8008cea <_printf_float+0x1c2>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	6121      	str	r1, [r4, #16]
 8008ce2:	07d8      	lsls	r0, r3, #31
 8008ce4:	d5ea      	bpl.n	8008cbc <_printf_float+0x194>
 8008ce6:	1c4b      	adds	r3, r1, #1
 8008ce8:	e7e7      	b.n	8008cba <_printf_float+0x192>
 8008cea:	2900      	cmp	r1, #0
 8008cec:	bfd4      	ite	le
 8008cee:	f1c1 0202 	rsble	r2, r1, #2
 8008cf2:	2201      	movgt	r2, #1
 8008cf4:	4413      	add	r3, r2
 8008cf6:	e7e0      	b.n	8008cba <_printf_float+0x192>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	055a      	lsls	r2, r3, #21
 8008cfc:	d407      	bmi.n	8008d0e <_printf_float+0x1e6>
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	4642      	mov	r2, r8
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d12b      	bne.n	8008d64 <_printf_float+0x23c>
 8008d0c:	e767      	b.n	8008bde <_printf_float+0xb6>
 8008d0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d12:	f240 80dd 	bls.w	8008ed0 <_printf_float+0x3a8>
 8008d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f7f7 fedd 	bl	8000adc <__aeabi_dcmpeq>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d033      	beq.n	8008d8e <_printf_float+0x266>
 8008d26:	4a37      	ldr	r2, [pc, #220]	@ (8008e04 <_printf_float+0x2dc>)
 8008d28:	2301      	movs	r3, #1
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	47b8      	blx	r7
 8008d30:	3001      	adds	r0, #1
 8008d32:	f43f af54 	beq.w	8008bde <_printf_float+0xb6>
 8008d36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d3a:	4543      	cmp	r3, r8
 8008d3c:	db02      	blt.n	8008d44 <_printf_float+0x21c>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	07d8      	lsls	r0, r3, #31
 8008d42:	d50f      	bpl.n	8008d64 <_printf_float+0x23c>
 8008d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d48:	4631      	mov	r1, r6
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	47b8      	blx	r7
 8008d4e:	3001      	adds	r0, #1
 8008d50:	f43f af45 	beq.w	8008bde <_printf_float+0xb6>
 8008d54:	f04f 0900 	mov.w	r9, #0
 8008d58:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008d5c:	f104 0a1a 	add.w	sl, r4, #26
 8008d60:	45c8      	cmp	r8, r9
 8008d62:	dc09      	bgt.n	8008d78 <_printf_float+0x250>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	079b      	lsls	r3, r3, #30
 8008d68:	f100 8103 	bmi.w	8008f72 <_printf_float+0x44a>
 8008d6c:	68e0      	ldr	r0, [r4, #12]
 8008d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d70:	4298      	cmp	r0, r3
 8008d72:	bfb8      	it	lt
 8008d74:	4618      	movlt	r0, r3
 8008d76:	e734      	b.n	8008be2 <_printf_float+0xba>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4652      	mov	r2, sl
 8008d7c:	4631      	mov	r1, r6
 8008d7e:	4628      	mov	r0, r5
 8008d80:	47b8      	blx	r7
 8008d82:	3001      	adds	r0, #1
 8008d84:	f43f af2b 	beq.w	8008bde <_printf_float+0xb6>
 8008d88:	f109 0901 	add.w	r9, r9, #1
 8008d8c:	e7e8      	b.n	8008d60 <_printf_float+0x238>
 8008d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dc39      	bgt.n	8008e08 <_printf_float+0x2e0>
 8008d94:	4a1b      	ldr	r2, [pc, #108]	@ (8008e04 <_printf_float+0x2dc>)
 8008d96:	2301      	movs	r3, #1
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af1d 	beq.w	8008bde <_printf_float+0xb6>
 8008da4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008da8:	ea59 0303 	orrs.w	r3, r9, r3
 8008dac:	d102      	bne.n	8008db4 <_printf_float+0x28c>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	07d9      	lsls	r1, r3, #31
 8008db2:	d5d7      	bpl.n	8008d64 <_printf_float+0x23c>
 8008db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008db8:	4631      	mov	r1, r6
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b8      	blx	r7
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	f43f af0d 	beq.w	8008bde <_printf_float+0xb6>
 8008dc4:	f04f 0a00 	mov.w	sl, #0
 8008dc8:	f104 0b1a 	add.w	fp, r4, #26
 8008dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dce:	425b      	negs	r3, r3
 8008dd0:	4553      	cmp	r3, sl
 8008dd2:	dc01      	bgt.n	8008dd8 <_printf_float+0x2b0>
 8008dd4:	464b      	mov	r3, r9
 8008dd6:	e793      	b.n	8008d00 <_printf_float+0x1d8>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	465a      	mov	r2, fp
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	f43f aefb 	beq.w	8008bde <_printf_float+0xb6>
 8008de8:	f10a 0a01 	add.w	sl, sl, #1
 8008dec:	e7ee      	b.n	8008dcc <_printf_float+0x2a4>
 8008dee:	bf00      	nop
 8008df0:	7fefffff 	.word	0x7fefffff
 8008df4:	0800c7e4 	.word	0x0800c7e4
 8008df8:	0800c7e8 	.word	0x0800c7e8
 8008dfc:	0800c7ec 	.word	0x0800c7ec
 8008e00:	0800c7f0 	.word	0x0800c7f0
 8008e04:	0800c7f4 	.word	0x0800c7f4
 8008e08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e0e:	4553      	cmp	r3, sl
 8008e10:	bfa8      	it	ge
 8008e12:	4653      	movge	r3, sl
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	4699      	mov	r9, r3
 8008e18:	dc36      	bgt.n	8008e88 <_printf_float+0x360>
 8008e1a:	f04f 0b00 	mov.w	fp, #0
 8008e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e22:	f104 021a 	add.w	r2, r4, #26
 8008e26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e28:	9306      	str	r3, [sp, #24]
 8008e2a:	eba3 0309 	sub.w	r3, r3, r9
 8008e2e:	455b      	cmp	r3, fp
 8008e30:	dc31      	bgt.n	8008e96 <_printf_float+0x36e>
 8008e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e34:	459a      	cmp	sl, r3
 8008e36:	dc3a      	bgt.n	8008eae <_printf_float+0x386>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	07da      	lsls	r2, r3, #31
 8008e3c:	d437      	bmi.n	8008eae <_printf_float+0x386>
 8008e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e40:	ebaa 0903 	sub.w	r9, sl, r3
 8008e44:	9b06      	ldr	r3, [sp, #24]
 8008e46:	ebaa 0303 	sub.w	r3, sl, r3
 8008e4a:	4599      	cmp	r9, r3
 8008e4c:	bfa8      	it	ge
 8008e4e:	4699      	movge	r9, r3
 8008e50:	f1b9 0f00 	cmp.w	r9, #0
 8008e54:	dc33      	bgt.n	8008ebe <_printf_float+0x396>
 8008e56:	f04f 0800 	mov.w	r8, #0
 8008e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5e:	f104 0b1a 	add.w	fp, r4, #26
 8008e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e64:	ebaa 0303 	sub.w	r3, sl, r3
 8008e68:	eba3 0309 	sub.w	r3, r3, r9
 8008e6c:	4543      	cmp	r3, r8
 8008e6e:	f77f af79 	ble.w	8008d64 <_printf_float+0x23c>
 8008e72:	2301      	movs	r3, #1
 8008e74:	465a      	mov	r2, fp
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b8      	blx	r7
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	f43f aeae 	beq.w	8008bde <_printf_float+0xb6>
 8008e82:	f108 0801 	add.w	r8, r8, #1
 8008e86:	e7ec      	b.n	8008e62 <_printf_float+0x33a>
 8008e88:	4642      	mov	r2, r8
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	d1c2      	bne.n	8008e1a <_printf_float+0x2f2>
 8008e94:	e6a3      	b.n	8008bde <_printf_float+0xb6>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	9206      	str	r2, [sp, #24]
 8008e9e:	47b8      	blx	r7
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f43f ae9c 	beq.w	8008bde <_printf_float+0xb6>
 8008ea6:	9a06      	ldr	r2, [sp, #24]
 8008ea8:	f10b 0b01 	add.w	fp, fp, #1
 8008eac:	e7bb      	b.n	8008e26 <_printf_float+0x2fe>
 8008eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	47b8      	blx	r7
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d1c0      	bne.n	8008e3e <_printf_float+0x316>
 8008ebc:	e68f      	b.n	8008bde <_printf_float+0xb6>
 8008ebe:	9a06      	ldr	r2, [sp, #24]
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	4442      	add	r2, r8
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d1c3      	bne.n	8008e56 <_printf_float+0x32e>
 8008ece:	e686      	b.n	8008bde <_printf_float+0xb6>
 8008ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ed4:	f1ba 0f01 	cmp.w	sl, #1
 8008ed8:	dc01      	bgt.n	8008ede <_printf_float+0x3b6>
 8008eda:	07db      	lsls	r3, r3, #31
 8008edc:	d536      	bpl.n	8008f4c <_printf_float+0x424>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b8      	blx	r7
 8008ee8:	3001      	adds	r0, #1
 8008eea:	f43f ae78 	beq.w	8008bde <_printf_float+0xb6>
 8008eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b8      	blx	r7
 8008ef8:	3001      	adds	r0, #1
 8008efa:	f43f ae70 	beq.w	8008bde <_printf_float+0xb6>
 8008efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f02:	2200      	movs	r2, #0
 8008f04:	2300      	movs	r3, #0
 8008f06:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008f0a:	f7f7 fde7 	bl	8000adc <__aeabi_dcmpeq>
 8008f0e:	b9c0      	cbnz	r0, 8008f42 <_printf_float+0x41a>
 8008f10:	4653      	mov	r3, sl
 8008f12:	f108 0201 	add.w	r2, r8, #1
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d10c      	bne.n	8008f3a <_printf_float+0x412>
 8008f20:	e65d      	b.n	8008bde <_printf_float+0xb6>
 8008f22:	2301      	movs	r3, #1
 8008f24:	465a      	mov	r2, fp
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b8      	blx	r7
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	f43f ae56 	beq.w	8008bde <_printf_float+0xb6>
 8008f32:	f108 0801 	add.w	r8, r8, #1
 8008f36:	45d0      	cmp	r8, sl
 8008f38:	dbf3      	blt.n	8008f22 <_printf_float+0x3fa>
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008f40:	e6df      	b.n	8008d02 <_printf_float+0x1da>
 8008f42:	f04f 0800 	mov.w	r8, #0
 8008f46:	f104 0b1a 	add.w	fp, r4, #26
 8008f4a:	e7f4      	b.n	8008f36 <_printf_float+0x40e>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4642      	mov	r2, r8
 8008f50:	e7e1      	b.n	8008f16 <_printf_float+0x3ee>
 8008f52:	2301      	movs	r3, #1
 8008f54:	464a      	mov	r2, r9
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f ae3e 	beq.w	8008bde <_printf_float+0xb6>
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	68e3      	ldr	r3, [r4, #12]
 8008f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f6a:	1a5b      	subs	r3, r3, r1
 8008f6c:	4543      	cmp	r3, r8
 8008f6e:	dcf0      	bgt.n	8008f52 <_printf_float+0x42a>
 8008f70:	e6fc      	b.n	8008d6c <_printf_float+0x244>
 8008f72:	f04f 0800 	mov.w	r8, #0
 8008f76:	f104 0919 	add.w	r9, r4, #25
 8008f7a:	e7f4      	b.n	8008f66 <_printf_float+0x43e>

08008f7c <_printf_common>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	4616      	mov	r6, r2
 8008f82:	4698      	mov	r8, r3
 8008f84:	688a      	ldr	r2, [r1, #8]
 8008f86:	690b      	ldr	r3, [r1, #16]
 8008f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	bfb8      	it	lt
 8008f90:	4613      	movlt	r3, r2
 8008f92:	6033      	str	r3, [r6, #0]
 8008f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f98:	4607      	mov	r7, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	b10a      	cbz	r2, 8008fa2 <_printf_common+0x26>
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	6033      	str	r3, [r6, #0]
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	0699      	lsls	r1, r3, #26
 8008fa6:	bf42      	ittt	mi
 8008fa8:	6833      	ldrmi	r3, [r6, #0]
 8008faa:	3302      	addmi	r3, #2
 8008fac:	6033      	strmi	r3, [r6, #0]
 8008fae:	6825      	ldr	r5, [r4, #0]
 8008fb0:	f015 0506 	ands.w	r5, r5, #6
 8008fb4:	d106      	bne.n	8008fc4 <_printf_common+0x48>
 8008fb6:	f104 0a19 	add.w	sl, r4, #25
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	6832      	ldr	r2, [r6, #0]
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	42ab      	cmp	r3, r5
 8008fc2:	dc26      	bgt.n	8009012 <_printf_common+0x96>
 8008fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fc8:	6822      	ldr	r2, [r4, #0]
 8008fca:	3b00      	subs	r3, #0
 8008fcc:	bf18      	it	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	0692      	lsls	r2, r2, #26
 8008fd2:	d42b      	bmi.n	800902c <_printf_common+0xb0>
 8008fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fd8:	4641      	mov	r1, r8
 8008fda:	4638      	mov	r0, r7
 8008fdc:	47c8      	blx	r9
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d01e      	beq.n	8009020 <_printf_common+0xa4>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	6922      	ldr	r2, [r4, #16]
 8008fe6:	f003 0306 	and.w	r3, r3, #6
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	bf02      	ittt	eq
 8008fee:	68e5      	ldreq	r5, [r4, #12]
 8008ff0:	6833      	ldreq	r3, [r6, #0]
 8008ff2:	1aed      	subeq	r5, r5, r3
 8008ff4:	68a3      	ldr	r3, [r4, #8]
 8008ff6:	bf0c      	ite	eq
 8008ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ffc:	2500      	movne	r5, #0
 8008ffe:	4293      	cmp	r3, r2
 8009000:	bfc4      	itt	gt
 8009002:	1a9b      	subgt	r3, r3, r2
 8009004:	18ed      	addgt	r5, r5, r3
 8009006:	2600      	movs	r6, #0
 8009008:	341a      	adds	r4, #26
 800900a:	42b5      	cmp	r5, r6
 800900c:	d11a      	bne.n	8009044 <_printf_common+0xc8>
 800900e:	2000      	movs	r0, #0
 8009010:	e008      	b.n	8009024 <_printf_common+0xa8>
 8009012:	2301      	movs	r3, #1
 8009014:	4652      	mov	r2, sl
 8009016:	4641      	mov	r1, r8
 8009018:	4638      	mov	r0, r7
 800901a:	47c8      	blx	r9
 800901c:	3001      	adds	r0, #1
 800901e:	d103      	bne.n	8009028 <_printf_common+0xac>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009028:	3501      	adds	r5, #1
 800902a:	e7c6      	b.n	8008fba <_printf_common+0x3e>
 800902c:	18e1      	adds	r1, r4, r3
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	2030      	movs	r0, #48	@ 0x30
 8009032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009036:	4422      	add	r2, r4
 8009038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800903c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009040:	3302      	adds	r3, #2
 8009042:	e7c7      	b.n	8008fd4 <_printf_common+0x58>
 8009044:	2301      	movs	r3, #1
 8009046:	4622      	mov	r2, r4
 8009048:	4641      	mov	r1, r8
 800904a:	4638      	mov	r0, r7
 800904c:	47c8      	blx	r9
 800904e:	3001      	adds	r0, #1
 8009050:	d0e6      	beq.n	8009020 <_printf_common+0xa4>
 8009052:	3601      	adds	r6, #1
 8009054:	e7d9      	b.n	800900a <_printf_common+0x8e>
	...

08009058 <_printf_i>:
 8009058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	7e0f      	ldrb	r7, [r1, #24]
 800905e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009060:	2f78      	cmp	r7, #120	@ 0x78
 8009062:	4691      	mov	r9, r2
 8009064:	4680      	mov	r8, r0
 8009066:	460c      	mov	r4, r1
 8009068:	469a      	mov	sl, r3
 800906a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800906e:	d807      	bhi.n	8009080 <_printf_i+0x28>
 8009070:	2f62      	cmp	r7, #98	@ 0x62
 8009072:	d80a      	bhi.n	800908a <_printf_i+0x32>
 8009074:	2f00      	cmp	r7, #0
 8009076:	f000 80d2 	beq.w	800921e <_printf_i+0x1c6>
 800907a:	2f58      	cmp	r7, #88	@ 0x58
 800907c:	f000 80b9 	beq.w	80091f2 <_printf_i+0x19a>
 8009080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009088:	e03a      	b.n	8009100 <_printf_i+0xa8>
 800908a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800908e:	2b15      	cmp	r3, #21
 8009090:	d8f6      	bhi.n	8009080 <_printf_i+0x28>
 8009092:	a101      	add	r1, pc, #4	@ (adr r1, 8009098 <_printf_i+0x40>)
 8009094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009098:	080090f1 	.word	0x080090f1
 800909c:	08009105 	.word	0x08009105
 80090a0:	08009081 	.word	0x08009081
 80090a4:	08009081 	.word	0x08009081
 80090a8:	08009081 	.word	0x08009081
 80090ac:	08009081 	.word	0x08009081
 80090b0:	08009105 	.word	0x08009105
 80090b4:	08009081 	.word	0x08009081
 80090b8:	08009081 	.word	0x08009081
 80090bc:	08009081 	.word	0x08009081
 80090c0:	08009081 	.word	0x08009081
 80090c4:	08009205 	.word	0x08009205
 80090c8:	0800912f 	.word	0x0800912f
 80090cc:	080091bf 	.word	0x080091bf
 80090d0:	08009081 	.word	0x08009081
 80090d4:	08009081 	.word	0x08009081
 80090d8:	08009227 	.word	0x08009227
 80090dc:	08009081 	.word	0x08009081
 80090e0:	0800912f 	.word	0x0800912f
 80090e4:	08009081 	.word	0x08009081
 80090e8:	08009081 	.word	0x08009081
 80090ec:	080091c7 	.word	0x080091c7
 80090f0:	6833      	ldr	r3, [r6, #0]
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6032      	str	r2, [r6, #0]
 80090f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009100:	2301      	movs	r3, #1
 8009102:	e09d      	b.n	8009240 <_printf_i+0x1e8>
 8009104:	6833      	ldr	r3, [r6, #0]
 8009106:	6820      	ldr	r0, [r4, #0]
 8009108:	1d19      	adds	r1, r3, #4
 800910a:	6031      	str	r1, [r6, #0]
 800910c:	0606      	lsls	r6, r0, #24
 800910e:	d501      	bpl.n	8009114 <_printf_i+0xbc>
 8009110:	681d      	ldr	r5, [r3, #0]
 8009112:	e003      	b.n	800911c <_printf_i+0xc4>
 8009114:	0645      	lsls	r5, r0, #25
 8009116:	d5fb      	bpl.n	8009110 <_printf_i+0xb8>
 8009118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800911c:	2d00      	cmp	r5, #0
 800911e:	da03      	bge.n	8009128 <_printf_i+0xd0>
 8009120:	232d      	movs	r3, #45	@ 0x2d
 8009122:	426d      	negs	r5, r5
 8009124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009128:	4859      	ldr	r0, [pc, #356]	@ (8009290 <_printf_i+0x238>)
 800912a:	230a      	movs	r3, #10
 800912c:	e011      	b.n	8009152 <_printf_i+0xfa>
 800912e:	6821      	ldr	r1, [r4, #0]
 8009130:	6833      	ldr	r3, [r6, #0]
 8009132:	0608      	lsls	r0, r1, #24
 8009134:	f853 5b04 	ldr.w	r5, [r3], #4
 8009138:	d402      	bmi.n	8009140 <_printf_i+0xe8>
 800913a:	0649      	lsls	r1, r1, #25
 800913c:	bf48      	it	mi
 800913e:	b2ad      	uxthmi	r5, r5
 8009140:	2f6f      	cmp	r7, #111	@ 0x6f
 8009142:	4853      	ldr	r0, [pc, #332]	@ (8009290 <_printf_i+0x238>)
 8009144:	6033      	str	r3, [r6, #0]
 8009146:	bf14      	ite	ne
 8009148:	230a      	movne	r3, #10
 800914a:	2308      	moveq	r3, #8
 800914c:	2100      	movs	r1, #0
 800914e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009152:	6866      	ldr	r6, [r4, #4]
 8009154:	60a6      	str	r6, [r4, #8]
 8009156:	2e00      	cmp	r6, #0
 8009158:	bfa2      	ittt	ge
 800915a:	6821      	ldrge	r1, [r4, #0]
 800915c:	f021 0104 	bicge.w	r1, r1, #4
 8009160:	6021      	strge	r1, [r4, #0]
 8009162:	b90d      	cbnz	r5, 8009168 <_printf_i+0x110>
 8009164:	2e00      	cmp	r6, #0
 8009166:	d04b      	beq.n	8009200 <_printf_i+0x1a8>
 8009168:	4616      	mov	r6, r2
 800916a:	fbb5 f1f3 	udiv	r1, r5, r3
 800916e:	fb03 5711 	mls	r7, r3, r1, r5
 8009172:	5dc7      	ldrb	r7, [r0, r7]
 8009174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009178:	462f      	mov	r7, r5
 800917a:	42bb      	cmp	r3, r7
 800917c:	460d      	mov	r5, r1
 800917e:	d9f4      	bls.n	800916a <_printf_i+0x112>
 8009180:	2b08      	cmp	r3, #8
 8009182:	d10b      	bne.n	800919c <_printf_i+0x144>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	07df      	lsls	r7, r3, #31
 8009188:	d508      	bpl.n	800919c <_printf_i+0x144>
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	6861      	ldr	r1, [r4, #4]
 800918e:	4299      	cmp	r1, r3
 8009190:	bfde      	ittt	le
 8009192:	2330      	movle	r3, #48	@ 0x30
 8009194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009198:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800919c:	1b92      	subs	r2, r2, r6
 800919e:	6122      	str	r2, [r4, #16]
 80091a0:	f8cd a000 	str.w	sl, [sp]
 80091a4:	464b      	mov	r3, r9
 80091a6:	aa03      	add	r2, sp, #12
 80091a8:	4621      	mov	r1, r4
 80091aa:	4640      	mov	r0, r8
 80091ac:	f7ff fee6 	bl	8008f7c <_printf_common>
 80091b0:	3001      	adds	r0, #1
 80091b2:	d14a      	bne.n	800924a <_printf_i+0x1f2>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091b8:	b004      	add	sp, #16
 80091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	f043 0320 	orr.w	r3, r3, #32
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	4833      	ldr	r0, [pc, #204]	@ (8009294 <_printf_i+0x23c>)
 80091c8:	2778      	movs	r7, #120	@ 0x78
 80091ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	6831      	ldr	r1, [r6, #0]
 80091d2:	061f      	lsls	r7, r3, #24
 80091d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80091d8:	d402      	bmi.n	80091e0 <_printf_i+0x188>
 80091da:	065f      	lsls	r7, r3, #25
 80091dc:	bf48      	it	mi
 80091de:	b2ad      	uxthmi	r5, r5
 80091e0:	6031      	str	r1, [r6, #0]
 80091e2:	07d9      	lsls	r1, r3, #31
 80091e4:	bf44      	itt	mi
 80091e6:	f043 0320 	orrmi.w	r3, r3, #32
 80091ea:	6023      	strmi	r3, [r4, #0]
 80091ec:	b11d      	cbz	r5, 80091f6 <_printf_i+0x19e>
 80091ee:	2310      	movs	r3, #16
 80091f0:	e7ac      	b.n	800914c <_printf_i+0xf4>
 80091f2:	4827      	ldr	r0, [pc, #156]	@ (8009290 <_printf_i+0x238>)
 80091f4:	e7e9      	b.n	80091ca <_printf_i+0x172>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	f023 0320 	bic.w	r3, r3, #32
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	e7f6      	b.n	80091ee <_printf_i+0x196>
 8009200:	4616      	mov	r6, r2
 8009202:	e7bd      	b.n	8009180 <_printf_i+0x128>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	6825      	ldr	r5, [r4, #0]
 8009208:	6961      	ldr	r1, [r4, #20]
 800920a:	1d18      	adds	r0, r3, #4
 800920c:	6030      	str	r0, [r6, #0]
 800920e:	062e      	lsls	r6, r5, #24
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	d501      	bpl.n	8009218 <_printf_i+0x1c0>
 8009214:	6019      	str	r1, [r3, #0]
 8009216:	e002      	b.n	800921e <_printf_i+0x1c6>
 8009218:	0668      	lsls	r0, r5, #25
 800921a:	d5fb      	bpl.n	8009214 <_printf_i+0x1bc>
 800921c:	8019      	strh	r1, [r3, #0]
 800921e:	2300      	movs	r3, #0
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	4616      	mov	r6, r2
 8009224:	e7bc      	b.n	80091a0 <_printf_i+0x148>
 8009226:	6833      	ldr	r3, [r6, #0]
 8009228:	1d1a      	adds	r2, r3, #4
 800922a:	6032      	str	r2, [r6, #0]
 800922c:	681e      	ldr	r6, [r3, #0]
 800922e:	6862      	ldr	r2, [r4, #4]
 8009230:	2100      	movs	r1, #0
 8009232:	4630      	mov	r0, r6
 8009234:	f7f6 ffcc 	bl	80001d0 <memchr>
 8009238:	b108      	cbz	r0, 800923e <_printf_i+0x1e6>
 800923a:	1b80      	subs	r0, r0, r6
 800923c:	6060      	str	r0, [r4, #4]
 800923e:	6863      	ldr	r3, [r4, #4]
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	2300      	movs	r3, #0
 8009244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009248:	e7aa      	b.n	80091a0 <_printf_i+0x148>
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	4632      	mov	r2, r6
 800924e:	4649      	mov	r1, r9
 8009250:	4640      	mov	r0, r8
 8009252:	47d0      	blx	sl
 8009254:	3001      	adds	r0, #1
 8009256:	d0ad      	beq.n	80091b4 <_printf_i+0x15c>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	079b      	lsls	r3, r3, #30
 800925c:	d413      	bmi.n	8009286 <_printf_i+0x22e>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	4298      	cmp	r0, r3
 8009264:	bfb8      	it	lt
 8009266:	4618      	movlt	r0, r3
 8009268:	e7a6      	b.n	80091b8 <_printf_i+0x160>
 800926a:	2301      	movs	r3, #1
 800926c:	4632      	mov	r2, r6
 800926e:	4649      	mov	r1, r9
 8009270:	4640      	mov	r0, r8
 8009272:	47d0      	blx	sl
 8009274:	3001      	adds	r0, #1
 8009276:	d09d      	beq.n	80091b4 <_printf_i+0x15c>
 8009278:	3501      	adds	r5, #1
 800927a:	68e3      	ldr	r3, [r4, #12]
 800927c:	9903      	ldr	r1, [sp, #12]
 800927e:	1a5b      	subs	r3, r3, r1
 8009280:	42ab      	cmp	r3, r5
 8009282:	dcf2      	bgt.n	800926a <_printf_i+0x212>
 8009284:	e7eb      	b.n	800925e <_printf_i+0x206>
 8009286:	2500      	movs	r5, #0
 8009288:	f104 0619 	add.w	r6, r4, #25
 800928c:	e7f5      	b.n	800927a <_printf_i+0x222>
 800928e:	bf00      	nop
 8009290:	0800c7f6 	.word	0x0800c7f6
 8009294:	0800c807 	.word	0x0800c807

08009298 <sniprintf>:
 8009298:	b40c      	push	{r2, r3}
 800929a:	b530      	push	{r4, r5, lr}
 800929c:	4b17      	ldr	r3, [pc, #92]	@ (80092fc <sniprintf+0x64>)
 800929e:	1e0c      	subs	r4, r1, #0
 80092a0:	681d      	ldr	r5, [r3, #0]
 80092a2:	b09d      	sub	sp, #116	@ 0x74
 80092a4:	da08      	bge.n	80092b8 <sniprintf+0x20>
 80092a6:	238b      	movs	r3, #139	@ 0x8b
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092ae:	b01d      	add	sp, #116	@ 0x74
 80092b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092b4:	b002      	add	sp, #8
 80092b6:	4770      	bx	lr
 80092b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80092bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092c0:	bf14      	ite	ne
 80092c2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80092c6:	4623      	moveq	r3, r4
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	9307      	str	r3, [sp, #28]
 80092cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092d0:	9002      	str	r0, [sp, #8]
 80092d2:	9006      	str	r0, [sp, #24]
 80092d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092da:	ab21      	add	r3, sp, #132	@ 0x84
 80092dc:	a902      	add	r1, sp, #8
 80092de:	4628      	mov	r0, r5
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f000 fff9 	bl	800a2d8 <_svfiprintf_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	bfbc      	itt	lt
 80092ea:	238b      	movlt	r3, #139	@ 0x8b
 80092ec:	602b      	strlt	r3, [r5, #0]
 80092ee:	2c00      	cmp	r4, #0
 80092f0:	d0dd      	beq.n	80092ae <sniprintf+0x16>
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	e7d9      	b.n	80092ae <sniprintf+0x16>
 80092fa:	bf00      	nop
 80092fc:	20000024 	.word	0x20000024

08009300 <std>:
 8009300:	2300      	movs	r3, #0
 8009302:	b510      	push	{r4, lr}
 8009304:	4604      	mov	r4, r0
 8009306:	e9c0 3300 	strd	r3, r3, [r0]
 800930a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800930e:	6083      	str	r3, [r0, #8]
 8009310:	8181      	strh	r1, [r0, #12]
 8009312:	6643      	str	r3, [r0, #100]	@ 0x64
 8009314:	81c2      	strh	r2, [r0, #14]
 8009316:	6183      	str	r3, [r0, #24]
 8009318:	4619      	mov	r1, r3
 800931a:	2208      	movs	r2, #8
 800931c:	305c      	adds	r0, #92	@ 0x5c
 800931e:	f000 f8dd 	bl	80094dc <memset>
 8009322:	4b0d      	ldr	r3, [pc, #52]	@ (8009358 <std+0x58>)
 8009324:	6263      	str	r3, [r4, #36]	@ 0x24
 8009326:	4b0d      	ldr	r3, [pc, #52]	@ (800935c <std+0x5c>)
 8009328:	62a3      	str	r3, [r4, #40]	@ 0x28
 800932a:	4b0d      	ldr	r3, [pc, #52]	@ (8009360 <std+0x60>)
 800932c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800932e:	4b0d      	ldr	r3, [pc, #52]	@ (8009364 <std+0x64>)
 8009330:	6323      	str	r3, [r4, #48]	@ 0x30
 8009332:	4b0d      	ldr	r3, [pc, #52]	@ (8009368 <std+0x68>)
 8009334:	6224      	str	r4, [r4, #32]
 8009336:	429c      	cmp	r4, r3
 8009338:	d006      	beq.n	8009348 <std+0x48>
 800933a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800933e:	4294      	cmp	r4, r2
 8009340:	d002      	beq.n	8009348 <std+0x48>
 8009342:	33d0      	adds	r3, #208	@ 0xd0
 8009344:	429c      	cmp	r4, r3
 8009346:	d105      	bne.n	8009354 <std+0x54>
 8009348:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800934c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009350:	f000 b8fa 	b.w	8009548 <__retarget_lock_init_recursive>
 8009354:	bd10      	pop	{r4, pc}
 8009356:	bf00      	nop
 8009358:	0800b11d 	.word	0x0800b11d
 800935c:	0800b13f 	.word	0x0800b13f
 8009360:	0800b177 	.word	0x0800b177
 8009364:	0800b19b 	.word	0x0800b19b
 8009368:	20000a1c 	.word	0x20000a1c

0800936c <stdio_exit_handler>:
 800936c:	4a02      	ldr	r2, [pc, #8]	@ (8009378 <stdio_exit_handler+0xc>)
 800936e:	4903      	ldr	r1, [pc, #12]	@ (800937c <stdio_exit_handler+0x10>)
 8009370:	4803      	ldr	r0, [pc, #12]	@ (8009380 <stdio_exit_handler+0x14>)
 8009372:	f000 b87b 	b.w	800946c <_fwalk_sglue>
 8009376:	bf00      	nop
 8009378:	20000018 	.word	0x20000018
 800937c:	0800a9b1 	.word	0x0800a9b1
 8009380:	20000028 	.word	0x20000028

08009384 <cleanup_stdio>:
 8009384:	6841      	ldr	r1, [r0, #4]
 8009386:	4b0c      	ldr	r3, [pc, #48]	@ (80093b8 <cleanup_stdio+0x34>)
 8009388:	4299      	cmp	r1, r3
 800938a:	b510      	push	{r4, lr}
 800938c:	4604      	mov	r4, r0
 800938e:	d001      	beq.n	8009394 <cleanup_stdio+0x10>
 8009390:	f001 fb0e 	bl	800a9b0 <_fflush_r>
 8009394:	68a1      	ldr	r1, [r4, #8]
 8009396:	4b09      	ldr	r3, [pc, #36]	@ (80093bc <cleanup_stdio+0x38>)
 8009398:	4299      	cmp	r1, r3
 800939a:	d002      	beq.n	80093a2 <cleanup_stdio+0x1e>
 800939c:	4620      	mov	r0, r4
 800939e:	f001 fb07 	bl	800a9b0 <_fflush_r>
 80093a2:	68e1      	ldr	r1, [r4, #12]
 80093a4:	4b06      	ldr	r3, [pc, #24]	@ (80093c0 <cleanup_stdio+0x3c>)
 80093a6:	4299      	cmp	r1, r3
 80093a8:	d004      	beq.n	80093b4 <cleanup_stdio+0x30>
 80093aa:	4620      	mov	r0, r4
 80093ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b0:	f001 bafe 	b.w	800a9b0 <_fflush_r>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	bf00      	nop
 80093b8:	20000a1c 	.word	0x20000a1c
 80093bc:	20000a84 	.word	0x20000a84
 80093c0:	20000aec 	.word	0x20000aec

080093c4 <global_stdio_init.part.0>:
 80093c4:	b510      	push	{r4, lr}
 80093c6:	4b0b      	ldr	r3, [pc, #44]	@ (80093f4 <global_stdio_init.part.0+0x30>)
 80093c8:	4c0b      	ldr	r4, [pc, #44]	@ (80093f8 <global_stdio_init.part.0+0x34>)
 80093ca:	4a0c      	ldr	r2, [pc, #48]	@ (80093fc <global_stdio_init.part.0+0x38>)
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	4620      	mov	r0, r4
 80093d0:	2200      	movs	r2, #0
 80093d2:	2104      	movs	r1, #4
 80093d4:	f7ff ff94 	bl	8009300 <std>
 80093d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80093dc:	2201      	movs	r2, #1
 80093de:	2109      	movs	r1, #9
 80093e0:	f7ff ff8e 	bl	8009300 <std>
 80093e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80093e8:	2202      	movs	r2, #2
 80093ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ee:	2112      	movs	r1, #18
 80093f0:	f7ff bf86 	b.w	8009300 <std>
 80093f4:	20000b54 	.word	0x20000b54
 80093f8:	20000a1c 	.word	0x20000a1c
 80093fc:	0800936d 	.word	0x0800936d

08009400 <__sfp_lock_acquire>:
 8009400:	4801      	ldr	r0, [pc, #4]	@ (8009408 <__sfp_lock_acquire+0x8>)
 8009402:	f000 b8a2 	b.w	800954a <__retarget_lock_acquire_recursive>
 8009406:	bf00      	nop
 8009408:	20000b59 	.word	0x20000b59

0800940c <__sfp_lock_release>:
 800940c:	4801      	ldr	r0, [pc, #4]	@ (8009414 <__sfp_lock_release+0x8>)
 800940e:	f000 b89d 	b.w	800954c <__retarget_lock_release_recursive>
 8009412:	bf00      	nop
 8009414:	20000b59 	.word	0x20000b59

08009418 <__sinit>:
 8009418:	b510      	push	{r4, lr}
 800941a:	4604      	mov	r4, r0
 800941c:	f7ff fff0 	bl	8009400 <__sfp_lock_acquire>
 8009420:	6a23      	ldr	r3, [r4, #32]
 8009422:	b11b      	cbz	r3, 800942c <__sinit+0x14>
 8009424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009428:	f7ff bff0 	b.w	800940c <__sfp_lock_release>
 800942c:	4b04      	ldr	r3, [pc, #16]	@ (8009440 <__sinit+0x28>)
 800942e:	6223      	str	r3, [r4, #32]
 8009430:	4b04      	ldr	r3, [pc, #16]	@ (8009444 <__sinit+0x2c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1f5      	bne.n	8009424 <__sinit+0xc>
 8009438:	f7ff ffc4 	bl	80093c4 <global_stdio_init.part.0>
 800943c:	e7f2      	b.n	8009424 <__sinit+0xc>
 800943e:	bf00      	nop
 8009440:	08009385 	.word	0x08009385
 8009444:	20000b54 	.word	0x20000b54

08009448 <fiprintf>:
 8009448:	b40e      	push	{r1, r2, r3}
 800944a:	b503      	push	{r0, r1, lr}
 800944c:	4601      	mov	r1, r0
 800944e:	ab03      	add	r3, sp, #12
 8009450:	4805      	ldr	r0, [pc, #20]	@ (8009468 <fiprintf+0x20>)
 8009452:	f853 2b04 	ldr.w	r2, [r3], #4
 8009456:	6800      	ldr	r0, [r0, #0]
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	f001 f863 	bl	800a524 <_vfiprintf_r>
 800945e:	b002      	add	sp, #8
 8009460:	f85d eb04 	ldr.w	lr, [sp], #4
 8009464:	b003      	add	sp, #12
 8009466:	4770      	bx	lr
 8009468:	20000024 	.word	0x20000024

0800946c <_fwalk_sglue>:
 800946c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009470:	4607      	mov	r7, r0
 8009472:	4688      	mov	r8, r1
 8009474:	4614      	mov	r4, r2
 8009476:	2600      	movs	r6, #0
 8009478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800947c:	f1b9 0901 	subs.w	r9, r9, #1
 8009480:	d505      	bpl.n	800948e <_fwalk_sglue+0x22>
 8009482:	6824      	ldr	r4, [r4, #0]
 8009484:	2c00      	cmp	r4, #0
 8009486:	d1f7      	bne.n	8009478 <_fwalk_sglue+0xc>
 8009488:	4630      	mov	r0, r6
 800948a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d907      	bls.n	80094a4 <_fwalk_sglue+0x38>
 8009494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009498:	3301      	adds	r3, #1
 800949a:	d003      	beq.n	80094a4 <_fwalk_sglue+0x38>
 800949c:	4629      	mov	r1, r5
 800949e:	4638      	mov	r0, r7
 80094a0:	47c0      	blx	r8
 80094a2:	4306      	orrs	r6, r0
 80094a4:	3568      	adds	r5, #104	@ 0x68
 80094a6:	e7e9      	b.n	800947c <_fwalk_sglue+0x10>

080094a8 <memmove>:
 80094a8:	4288      	cmp	r0, r1
 80094aa:	b510      	push	{r4, lr}
 80094ac:	eb01 0402 	add.w	r4, r1, r2
 80094b0:	d902      	bls.n	80094b8 <memmove+0x10>
 80094b2:	4284      	cmp	r4, r0
 80094b4:	4623      	mov	r3, r4
 80094b6:	d807      	bhi.n	80094c8 <memmove+0x20>
 80094b8:	1e43      	subs	r3, r0, #1
 80094ba:	42a1      	cmp	r1, r4
 80094bc:	d008      	beq.n	80094d0 <memmove+0x28>
 80094be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094c6:	e7f8      	b.n	80094ba <memmove+0x12>
 80094c8:	4402      	add	r2, r0
 80094ca:	4601      	mov	r1, r0
 80094cc:	428a      	cmp	r2, r1
 80094ce:	d100      	bne.n	80094d2 <memmove+0x2a>
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094da:	e7f7      	b.n	80094cc <memmove+0x24>

080094dc <memset>:
 80094dc:	4402      	add	r2, r0
 80094de:	4603      	mov	r3, r0
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d100      	bne.n	80094e6 <memset+0xa>
 80094e4:	4770      	bx	lr
 80094e6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ea:	e7f9      	b.n	80094e0 <memset+0x4>

080094ec <_localeconv_r>:
 80094ec:	4800      	ldr	r0, [pc, #0]	@ (80094f0 <_localeconv_r+0x4>)
 80094ee:	4770      	bx	lr
 80094f0:	20000164 	.word	0x20000164

080094f4 <__errno>:
 80094f4:	4b01      	ldr	r3, [pc, #4]	@ (80094fc <__errno+0x8>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20000024 	.word	0x20000024

08009500 <__libc_init_array>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4d0d      	ldr	r5, [pc, #52]	@ (8009538 <__libc_init_array+0x38>)
 8009504:	4c0d      	ldr	r4, [pc, #52]	@ (800953c <__libc_init_array+0x3c>)
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	2600      	movs	r6, #0
 800950c:	42a6      	cmp	r6, r4
 800950e:	d109      	bne.n	8009524 <__libc_init_array+0x24>
 8009510:	4d0b      	ldr	r5, [pc, #44]	@ (8009540 <__libc_init_array+0x40>)
 8009512:	4c0c      	ldr	r4, [pc, #48]	@ (8009544 <__libc_init_array+0x44>)
 8009514:	f002 f8ac 	bl	800b670 <_init>
 8009518:	1b64      	subs	r4, r4, r5
 800951a:	10a4      	asrs	r4, r4, #2
 800951c:	2600      	movs	r6, #0
 800951e:	42a6      	cmp	r6, r4
 8009520:	d105      	bne.n	800952e <__libc_init_array+0x2e>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f855 3b04 	ldr.w	r3, [r5], #4
 8009528:	4798      	blx	r3
 800952a:	3601      	adds	r6, #1
 800952c:	e7ee      	b.n	800950c <__libc_init_array+0xc>
 800952e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009532:	4798      	blx	r3
 8009534:	3601      	adds	r6, #1
 8009536:	e7f2      	b.n	800951e <__libc_init_array+0x1e>
 8009538:	0800cb24 	.word	0x0800cb24
 800953c:	0800cb24 	.word	0x0800cb24
 8009540:	0800cb24 	.word	0x0800cb24
 8009544:	0800cb28 	.word	0x0800cb28

08009548 <__retarget_lock_init_recursive>:
 8009548:	4770      	bx	lr

0800954a <__retarget_lock_acquire_recursive>:
 800954a:	4770      	bx	lr

0800954c <__retarget_lock_release_recursive>:
 800954c:	4770      	bx	lr

0800954e <memcpy>:
 800954e:	440a      	add	r2, r1
 8009550:	4291      	cmp	r1, r2
 8009552:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009556:	d100      	bne.n	800955a <memcpy+0xc>
 8009558:	4770      	bx	lr
 800955a:	b510      	push	{r4, lr}
 800955c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009564:	4291      	cmp	r1, r2
 8009566:	d1f9      	bne.n	800955c <memcpy+0xe>
 8009568:	bd10      	pop	{r4, pc}

0800956a <strcpy>:
 800956a:	4603      	mov	r3, r0
 800956c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009570:	f803 2b01 	strb.w	r2, [r3], #1
 8009574:	2a00      	cmp	r2, #0
 8009576:	d1f9      	bne.n	800956c <strcpy+0x2>
 8009578:	4770      	bx	lr

0800957a <abort>:
 800957a:	b508      	push	{r3, lr}
 800957c:	2006      	movs	r0, #6
 800957e:	f001 ffa1 	bl	800b4c4 <raise>
 8009582:	2001      	movs	r0, #1
 8009584:	f7f8 fe20 	bl	80021c8 <_exit>

08009588 <quorem>:
 8009588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	6903      	ldr	r3, [r0, #16]
 800958e:	690c      	ldr	r4, [r1, #16]
 8009590:	42a3      	cmp	r3, r4
 8009592:	4607      	mov	r7, r0
 8009594:	db7e      	blt.n	8009694 <quorem+0x10c>
 8009596:	3c01      	subs	r4, #1
 8009598:	f101 0814 	add.w	r8, r1, #20
 800959c:	00a3      	lsls	r3, r4, #2
 800959e:	f100 0514 	add.w	r5, r0, #20
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095b2:	3301      	adds	r3, #1
 80095b4:	429a      	cmp	r2, r3
 80095b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80095be:	d32e      	bcc.n	800961e <quorem+0x96>
 80095c0:	f04f 0a00 	mov.w	sl, #0
 80095c4:	46c4      	mov	ip, r8
 80095c6:	46ae      	mov	lr, r5
 80095c8:	46d3      	mov	fp, sl
 80095ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095ce:	b298      	uxth	r0, r3
 80095d0:	fb06 a000 	mla	r0, r6, r0, sl
 80095d4:	0c02      	lsrs	r2, r0, #16
 80095d6:	0c1b      	lsrs	r3, r3, #16
 80095d8:	fb06 2303 	mla	r3, r6, r3, r2
 80095dc:	f8de 2000 	ldr.w	r2, [lr]
 80095e0:	b280      	uxth	r0, r0
 80095e2:	b292      	uxth	r2, r2
 80095e4:	1a12      	subs	r2, r2, r0
 80095e6:	445a      	add	r2, fp
 80095e8:	f8de 0000 	ldr.w	r0, [lr]
 80095ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095fa:	b292      	uxth	r2, r2
 80095fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009600:	45e1      	cmp	r9, ip
 8009602:	f84e 2b04 	str.w	r2, [lr], #4
 8009606:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800960a:	d2de      	bcs.n	80095ca <quorem+0x42>
 800960c:	9b00      	ldr	r3, [sp, #0]
 800960e:	58eb      	ldr	r3, [r5, r3]
 8009610:	b92b      	cbnz	r3, 800961e <quorem+0x96>
 8009612:	9b01      	ldr	r3, [sp, #4]
 8009614:	3b04      	subs	r3, #4
 8009616:	429d      	cmp	r5, r3
 8009618:	461a      	mov	r2, r3
 800961a:	d32f      	bcc.n	800967c <quorem+0xf4>
 800961c:	613c      	str	r4, [r7, #16]
 800961e:	4638      	mov	r0, r7
 8009620:	f001 fc74 	bl	800af0c <__mcmp>
 8009624:	2800      	cmp	r0, #0
 8009626:	db25      	blt.n	8009674 <quorem+0xec>
 8009628:	4629      	mov	r1, r5
 800962a:	2000      	movs	r0, #0
 800962c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009630:	f8d1 c000 	ldr.w	ip, [r1]
 8009634:	fa1f fe82 	uxth.w	lr, r2
 8009638:	fa1f f38c 	uxth.w	r3, ip
 800963c:	eba3 030e 	sub.w	r3, r3, lr
 8009640:	4403      	add	r3, r0
 8009642:	0c12      	lsrs	r2, r2, #16
 8009644:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009648:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800964c:	b29b      	uxth	r3, r3
 800964e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009652:	45c1      	cmp	r9, r8
 8009654:	f841 3b04 	str.w	r3, [r1], #4
 8009658:	ea4f 4022 	mov.w	r0, r2, asr #16
 800965c:	d2e6      	bcs.n	800962c <quorem+0xa4>
 800965e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009666:	b922      	cbnz	r2, 8009672 <quorem+0xea>
 8009668:	3b04      	subs	r3, #4
 800966a:	429d      	cmp	r5, r3
 800966c:	461a      	mov	r2, r3
 800966e:	d30b      	bcc.n	8009688 <quorem+0x100>
 8009670:	613c      	str	r4, [r7, #16]
 8009672:	3601      	adds	r6, #1
 8009674:	4630      	mov	r0, r6
 8009676:	b003      	add	sp, #12
 8009678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967c:	6812      	ldr	r2, [r2, #0]
 800967e:	3b04      	subs	r3, #4
 8009680:	2a00      	cmp	r2, #0
 8009682:	d1cb      	bne.n	800961c <quorem+0x94>
 8009684:	3c01      	subs	r4, #1
 8009686:	e7c6      	b.n	8009616 <quorem+0x8e>
 8009688:	6812      	ldr	r2, [r2, #0]
 800968a:	3b04      	subs	r3, #4
 800968c:	2a00      	cmp	r2, #0
 800968e:	d1ef      	bne.n	8009670 <quorem+0xe8>
 8009690:	3c01      	subs	r4, #1
 8009692:	e7ea      	b.n	800966a <quorem+0xe2>
 8009694:	2000      	movs	r0, #0
 8009696:	e7ee      	b.n	8009676 <quorem+0xee>

08009698 <_dtoa_r>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	69c7      	ldr	r7, [r0, #28]
 800969e:	b099      	sub	sp, #100	@ 0x64
 80096a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80096a4:	ec55 4b10 	vmov	r4, r5, d0
 80096a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80096aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80096ac:	4683      	mov	fp, r0
 80096ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80096b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096b2:	b97f      	cbnz	r7, 80096d4 <_dtoa_r+0x3c>
 80096b4:	2010      	movs	r0, #16
 80096b6:	f001 f84d 	bl	800a754 <malloc>
 80096ba:	4602      	mov	r2, r0
 80096bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80096c0:	b920      	cbnz	r0, 80096cc <_dtoa_r+0x34>
 80096c2:	4ba7      	ldr	r3, [pc, #668]	@ (8009960 <_dtoa_r+0x2c8>)
 80096c4:	21ef      	movs	r1, #239	@ 0xef
 80096c6:	48a7      	ldr	r0, [pc, #668]	@ (8009964 <_dtoa_r+0x2cc>)
 80096c8:	f7ff f970 	bl	80089ac <__assert_func>
 80096cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80096d0:	6007      	str	r7, [r0, #0]
 80096d2:	60c7      	str	r7, [r0, #12]
 80096d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096d8:	6819      	ldr	r1, [r3, #0]
 80096da:	b159      	cbz	r1, 80096f4 <_dtoa_r+0x5c>
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	604a      	str	r2, [r1, #4]
 80096e0:	2301      	movs	r3, #1
 80096e2:	4093      	lsls	r3, r2
 80096e4:	608b      	str	r3, [r1, #8]
 80096e6:	4658      	mov	r0, fp
 80096e8:	f001 f9d6 	bl	800aa98 <_Bfree>
 80096ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096f0:	2200      	movs	r2, #0
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	1e2b      	subs	r3, r5, #0
 80096f6:	bfb9      	ittee	lt
 80096f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096fc:	9303      	strlt	r3, [sp, #12]
 80096fe:	2300      	movge	r3, #0
 8009700:	6033      	strge	r3, [r6, #0]
 8009702:	9f03      	ldr	r7, [sp, #12]
 8009704:	4b98      	ldr	r3, [pc, #608]	@ (8009968 <_dtoa_r+0x2d0>)
 8009706:	bfbc      	itt	lt
 8009708:	2201      	movlt	r2, #1
 800970a:	6032      	strlt	r2, [r6, #0]
 800970c:	43bb      	bics	r3, r7
 800970e:	d112      	bne.n	8009736 <_dtoa_r+0x9e>
 8009710:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009712:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800971c:	4323      	orrs	r3, r4
 800971e:	f000 854d 	beq.w	800a1bc <_dtoa_r+0xb24>
 8009722:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009724:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800997c <_dtoa_r+0x2e4>
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 854f 	beq.w	800a1cc <_dtoa_r+0xb34>
 800972e:	f10a 0303 	add.w	r3, sl, #3
 8009732:	f000 bd49 	b.w	800a1c8 <_dtoa_r+0xb30>
 8009736:	ed9d 7b02 	vldr	d7, [sp, #8]
 800973a:	2200      	movs	r2, #0
 800973c:	ec51 0b17 	vmov	r0, r1, d7
 8009740:	2300      	movs	r3, #0
 8009742:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009746:	f7f7 f9c9 	bl	8000adc <__aeabi_dcmpeq>
 800974a:	4680      	mov	r8, r0
 800974c:	b158      	cbz	r0, 8009766 <_dtoa_r+0xce>
 800974e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009750:	2301      	movs	r3, #1
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009756:	b113      	cbz	r3, 800975e <_dtoa_r+0xc6>
 8009758:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800975a:	4b84      	ldr	r3, [pc, #528]	@ (800996c <_dtoa_r+0x2d4>)
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009980 <_dtoa_r+0x2e8>
 8009762:	f000 bd33 	b.w	800a1cc <_dtoa_r+0xb34>
 8009766:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800976a:	aa16      	add	r2, sp, #88	@ 0x58
 800976c:	a917      	add	r1, sp, #92	@ 0x5c
 800976e:	4658      	mov	r0, fp
 8009770:	f001 fc7c 	bl	800b06c <__d2b>
 8009774:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009778:	4681      	mov	r9, r0
 800977a:	2e00      	cmp	r6, #0
 800977c:	d077      	beq.n	800986e <_dtoa_r+0x1d6>
 800977e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009780:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800978c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009790:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009794:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009798:	4619      	mov	r1, r3
 800979a:	2200      	movs	r2, #0
 800979c:	4b74      	ldr	r3, [pc, #464]	@ (8009970 <_dtoa_r+0x2d8>)
 800979e:	f7f6 fd7d 	bl	800029c <__aeabi_dsub>
 80097a2:	a369      	add	r3, pc, #420	@ (adr r3, 8009948 <_dtoa_r+0x2b0>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 ff30 	bl	800060c <__aeabi_dmul>
 80097ac:	a368      	add	r3, pc, #416	@ (adr r3, 8009950 <_dtoa_r+0x2b8>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f7f6 fd75 	bl	80002a0 <__adddf3>
 80097b6:	4604      	mov	r4, r0
 80097b8:	4630      	mov	r0, r6
 80097ba:	460d      	mov	r5, r1
 80097bc:	f7f6 febc 	bl	8000538 <__aeabi_i2d>
 80097c0:	a365      	add	r3, pc, #404	@ (adr r3, 8009958 <_dtoa_r+0x2c0>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7f6 ff21 	bl	800060c <__aeabi_dmul>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f6 fd65 	bl	80002a0 <__adddf3>
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	f7f7 f9c7 	bl	8000b6c <__aeabi_d2iz>
 80097de:	2200      	movs	r2, #0
 80097e0:	4607      	mov	r7, r0
 80097e2:	2300      	movs	r3, #0
 80097e4:	4620      	mov	r0, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	f7f7 f982 	bl	8000af0 <__aeabi_dcmplt>
 80097ec:	b140      	cbz	r0, 8009800 <_dtoa_r+0x168>
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7f6 fea2 	bl	8000538 <__aeabi_i2d>
 80097f4:	4622      	mov	r2, r4
 80097f6:	462b      	mov	r3, r5
 80097f8:	f7f7 f970 	bl	8000adc <__aeabi_dcmpeq>
 80097fc:	b900      	cbnz	r0, 8009800 <_dtoa_r+0x168>
 80097fe:	3f01      	subs	r7, #1
 8009800:	2f16      	cmp	r7, #22
 8009802:	d851      	bhi.n	80098a8 <_dtoa_r+0x210>
 8009804:	4b5b      	ldr	r3, [pc, #364]	@ (8009974 <_dtoa_r+0x2dc>)
 8009806:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009812:	f7f7 f96d 	bl	8000af0 <__aeabi_dcmplt>
 8009816:	2800      	cmp	r0, #0
 8009818:	d048      	beq.n	80098ac <_dtoa_r+0x214>
 800981a:	3f01      	subs	r7, #1
 800981c:	2300      	movs	r3, #0
 800981e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009820:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009822:	1b9b      	subs	r3, r3, r6
 8009824:	1e5a      	subs	r2, r3, #1
 8009826:	bf44      	itt	mi
 8009828:	f1c3 0801 	rsbmi	r8, r3, #1
 800982c:	2300      	movmi	r3, #0
 800982e:	9208      	str	r2, [sp, #32]
 8009830:	bf54      	ite	pl
 8009832:	f04f 0800 	movpl.w	r8, #0
 8009836:	9308      	strmi	r3, [sp, #32]
 8009838:	2f00      	cmp	r7, #0
 800983a:	db39      	blt.n	80098b0 <_dtoa_r+0x218>
 800983c:	9b08      	ldr	r3, [sp, #32]
 800983e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009840:	443b      	add	r3, r7
 8009842:	9308      	str	r3, [sp, #32]
 8009844:	2300      	movs	r3, #0
 8009846:	930a      	str	r3, [sp, #40]	@ 0x28
 8009848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800984a:	2b09      	cmp	r3, #9
 800984c:	d864      	bhi.n	8009918 <_dtoa_r+0x280>
 800984e:	2b05      	cmp	r3, #5
 8009850:	bfc4      	itt	gt
 8009852:	3b04      	subgt	r3, #4
 8009854:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009858:	f1a3 0302 	sub.w	r3, r3, #2
 800985c:	bfcc      	ite	gt
 800985e:	2400      	movgt	r4, #0
 8009860:	2401      	movle	r4, #1
 8009862:	2b03      	cmp	r3, #3
 8009864:	d863      	bhi.n	800992e <_dtoa_r+0x296>
 8009866:	e8df f003 	tbb	[pc, r3]
 800986a:	372a      	.short	0x372a
 800986c:	5535      	.short	0x5535
 800986e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009872:	441e      	add	r6, r3
 8009874:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009878:	2b20      	cmp	r3, #32
 800987a:	bfc1      	itttt	gt
 800987c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009880:	409f      	lslgt	r7, r3
 8009882:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009886:	fa24 f303 	lsrgt.w	r3, r4, r3
 800988a:	bfd6      	itet	le
 800988c:	f1c3 0320 	rsble	r3, r3, #32
 8009890:	ea47 0003 	orrgt.w	r0, r7, r3
 8009894:	fa04 f003 	lslle.w	r0, r4, r3
 8009898:	f7f6 fe3e 	bl	8000518 <__aeabi_ui2d>
 800989c:	2201      	movs	r2, #1
 800989e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80098a2:	3e01      	subs	r6, #1
 80098a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80098a6:	e777      	b.n	8009798 <_dtoa_r+0x100>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e7b8      	b.n	800981e <_dtoa_r+0x186>
 80098ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80098ae:	e7b7      	b.n	8009820 <_dtoa_r+0x188>
 80098b0:	427b      	negs	r3, r7
 80098b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b4:	2300      	movs	r3, #0
 80098b6:	eba8 0807 	sub.w	r8, r8, r7
 80098ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098bc:	e7c4      	b.n	8009848 <_dtoa_r+0x1b0>
 80098be:	2300      	movs	r3, #0
 80098c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dc35      	bgt.n	8009934 <_dtoa_r+0x29c>
 80098c8:	2301      	movs	r3, #1
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	9307      	str	r3, [sp, #28]
 80098ce:	461a      	mov	r2, r3
 80098d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80098d2:	e00b      	b.n	80098ec <_dtoa_r+0x254>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e7f3      	b.n	80098c0 <_dtoa_r+0x228>
 80098d8:	2300      	movs	r3, #0
 80098da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098de:	18fb      	adds	r3, r7, r3
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	9307      	str	r3, [sp, #28]
 80098e8:	bfb8      	it	lt
 80098ea:	2301      	movlt	r3, #1
 80098ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80098f0:	2100      	movs	r1, #0
 80098f2:	2204      	movs	r2, #4
 80098f4:	f102 0514 	add.w	r5, r2, #20
 80098f8:	429d      	cmp	r5, r3
 80098fa:	d91f      	bls.n	800993c <_dtoa_r+0x2a4>
 80098fc:	6041      	str	r1, [r0, #4]
 80098fe:	4658      	mov	r0, fp
 8009900:	f001 f88a 	bl	800aa18 <_Balloc>
 8009904:	4682      	mov	sl, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	d13c      	bne.n	8009984 <_dtoa_r+0x2ec>
 800990a:	4b1b      	ldr	r3, [pc, #108]	@ (8009978 <_dtoa_r+0x2e0>)
 800990c:	4602      	mov	r2, r0
 800990e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009912:	e6d8      	b.n	80096c6 <_dtoa_r+0x2e>
 8009914:	2301      	movs	r3, #1
 8009916:	e7e0      	b.n	80098da <_dtoa_r+0x242>
 8009918:	2401      	movs	r4, #1
 800991a:	2300      	movs	r3, #0
 800991c:	9309      	str	r3, [sp, #36]	@ 0x24
 800991e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	9307      	str	r3, [sp, #28]
 8009928:	2200      	movs	r2, #0
 800992a:	2312      	movs	r3, #18
 800992c:	e7d0      	b.n	80098d0 <_dtoa_r+0x238>
 800992e:	2301      	movs	r3, #1
 8009930:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009932:	e7f5      	b.n	8009920 <_dtoa_r+0x288>
 8009934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	9307      	str	r3, [sp, #28]
 800993a:	e7d7      	b.n	80098ec <_dtoa_r+0x254>
 800993c:	3101      	adds	r1, #1
 800993e:	0052      	lsls	r2, r2, #1
 8009940:	e7d8      	b.n	80098f4 <_dtoa_r+0x25c>
 8009942:	bf00      	nop
 8009944:	f3af 8000 	nop.w
 8009948:	636f4361 	.word	0x636f4361
 800994c:	3fd287a7 	.word	0x3fd287a7
 8009950:	8b60c8b3 	.word	0x8b60c8b3
 8009954:	3fc68a28 	.word	0x3fc68a28
 8009958:	509f79fb 	.word	0x509f79fb
 800995c:	3fd34413 	.word	0x3fd34413
 8009960:	0800c825 	.word	0x0800c825
 8009964:	0800c83c 	.word	0x0800c83c
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	0800c7f5 	.word	0x0800c7f5
 8009970:	3ff80000 	.word	0x3ff80000
 8009974:	0800c948 	.word	0x0800c948
 8009978:	0800c894 	.word	0x0800c894
 800997c:	0800c821 	.word	0x0800c821
 8009980:	0800c7f4 	.word	0x0800c7f4
 8009984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009988:	6018      	str	r0, [r3, #0]
 800998a:	9b07      	ldr	r3, [sp, #28]
 800998c:	2b0e      	cmp	r3, #14
 800998e:	f200 80a4 	bhi.w	8009ada <_dtoa_r+0x442>
 8009992:	2c00      	cmp	r4, #0
 8009994:	f000 80a1 	beq.w	8009ada <_dtoa_r+0x442>
 8009998:	2f00      	cmp	r7, #0
 800999a:	dd33      	ble.n	8009a04 <_dtoa_r+0x36c>
 800999c:	4bad      	ldr	r3, [pc, #692]	@ (8009c54 <_dtoa_r+0x5bc>)
 800999e:	f007 020f 	and.w	r2, r7, #15
 80099a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099a6:	ed93 7b00 	vldr	d7, [r3]
 80099aa:	05f8      	lsls	r0, r7, #23
 80099ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80099b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80099b4:	d516      	bpl.n	80099e4 <_dtoa_r+0x34c>
 80099b6:	4ba8      	ldr	r3, [pc, #672]	@ (8009c58 <_dtoa_r+0x5c0>)
 80099b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099c0:	f7f6 ff4e 	bl	8000860 <__aeabi_ddiv>
 80099c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099c8:	f004 040f 	and.w	r4, r4, #15
 80099cc:	2603      	movs	r6, #3
 80099ce:	4da2      	ldr	r5, [pc, #648]	@ (8009c58 <_dtoa_r+0x5c0>)
 80099d0:	b954      	cbnz	r4, 80099e8 <_dtoa_r+0x350>
 80099d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099da:	f7f6 ff41 	bl	8000860 <__aeabi_ddiv>
 80099de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e2:	e028      	b.n	8009a36 <_dtoa_r+0x39e>
 80099e4:	2602      	movs	r6, #2
 80099e6:	e7f2      	b.n	80099ce <_dtoa_r+0x336>
 80099e8:	07e1      	lsls	r1, r4, #31
 80099ea:	d508      	bpl.n	80099fe <_dtoa_r+0x366>
 80099ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099f4:	f7f6 fe0a 	bl	800060c <__aeabi_dmul>
 80099f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099fc:	3601      	adds	r6, #1
 80099fe:	1064      	asrs	r4, r4, #1
 8009a00:	3508      	adds	r5, #8
 8009a02:	e7e5      	b.n	80099d0 <_dtoa_r+0x338>
 8009a04:	f000 80d2 	beq.w	8009bac <_dtoa_r+0x514>
 8009a08:	427c      	negs	r4, r7
 8009a0a:	4b92      	ldr	r3, [pc, #584]	@ (8009c54 <_dtoa_r+0x5bc>)
 8009a0c:	4d92      	ldr	r5, [pc, #584]	@ (8009c58 <_dtoa_r+0x5c0>)
 8009a0e:	f004 020f 	and.w	r2, r4, #15
 8009a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a1e:	f7f6 fdf5 	bl	800060c <__aeabi_dmul>
 8009a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a26:	1124      	asrs	r4, r4, #4
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2602      	movs	r6, #2
 8009a2c:	2c00      	cmp	r4, #0
 8009a2e:	f040 80b2 	bne.w	8009b96 <_dtoa_r+0x4fe>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1d3      	bne.n	80099de <_dtoa_r+0x346>
 8009a36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 80b7 	beq.w	8009bb0 <_dtoa_r+0x518>
 8009a42:	4b86      	ldr	r3, [pc, #536]	@ (8009c5c <_dtoa_r+0x5c4>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f7 f851 	bl	8000af0 <__aeabi_dcmplt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f000 80ae 	beq.w	8009bb0 <_dtoa_r+0x518>
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80aa 	beq.w	8009bb0 <_dtoa_r+0x518>
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dd37      	ble.n	8009ad2 <_dtoa_r+0x43a>
 8009a62:	1e7b      	subs	r3, r7, #1
 8009a64:	9304      	str	r3, [sp, #16]
 8009a66:	4620      	mov	r0, r4
 8009a68:	4b7d      	ldr	r3, [pc, #500]	@ (8009c60 <_dtoa_r+0x5c8>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	f7f6 fdcd 	bl	800060c <__aeabi_dmul>
 8009a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a76:	9c00      	ldr	r4, [sp, #0]
 8009a78:	3601      	adds	r6, #1
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7f6 fd5c 	bl	8000538 <__aeabi_i2d>
 8009a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a84:	f7f6 fdc2 	bl	800060c <__aeabi_dmul>
 8009a88:	4b76      	ldr	r3, [pc, #472]	@ (8009c64 <_dtoa_r+0x5cc>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f7f6 fc08 	bl	80002a0 <__adddf3>
 8009a90:	4605      	mov	r5, r0
 8009a92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	f040 808d 	bne.w	8009bb6 <_dtoa_r+0x51e>
 8009a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aa0:	4b71      	ldr	r3, [pc, #452]	@ (8009c68 <_dtoa_r+0x5d0>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f7f6 fbfa 	bl	800029c <__aeabi_dsub>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	4633      	mov	r3, r6
 8009ab4:	f7f7 f83a 	bl	8000b2c <__aeabi_dcmpgt>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f040 828b 	bne.w	8009fd4 <_dtoa_r+0x93c>
 8009abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ac2:	462a      	mov	r2, r5
 8009ac4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009ac8:	f7f7 f812 	bl	8000af0 <__aeabi_dcmplt>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f040 8128 	bne.w	8009d22 <_dtoa_r+0x68a>
 8009ad2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009ad6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009ada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f2c0 815a 	blt.w	8009d96 <_dtoa_r+0x6fe>
 8009ae2:	2f0e      	cmp	r7, #14
 8009ae4:	f300 8157 	bgt.w	8009d96 <_dtoa_r+0x6fe>
 8009ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c54 <_dtoa_r+0x5bc>)
 8009aea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009aee:	ed93 7b00 	vldr	d7, [r3]
 8009af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	ed8d 7b00 	vstr	d7, [sp]
 8009afa:	da03      	bge.n	8009b04 <_dtoa_r+0x46c>
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f340 8101 	ble.w	8009d06 <_dtoa_r+0x66e>
 8009b04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b08:	4656      	mov	r6, sl
 8009b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 fea5 	bl	8000860 <__aeabi_ddiv>
 8009b16:	f7f7 f829 	bl	8000b6c <__aeabi_d2iz>
 8009b1a:	4680      	mov	r8, r0
 8009b1c:	f7f6 fd0c 	bl	8000538 <__aeabi_i2d>
 8009b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b24:	f7f6 fd72 	bl	800060c <__aeabi_dmul>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b34:	f7f6 fbb2 	bl	800029c <__aeabi_dsub>
 8009b38:	f806 4b01 	strb.w	r4, [r6], #1
 8009b3c:	9d07      	ldr	r5, [sp, #28]
 8009b3e:	eba6 040a 	sub.w	r4, r6, sl
 8009b42:	42a5      	cmp	r5, r4
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	f040 8117 	bne.w	8009d7a <_dtoa_r+0x6e2>
 8009b4c:	f7f6 fba8 	bl	80002a0 <__adddf3>
 8009b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	f7f6 ffe8 	bl	8000b2c <__aeabi_dcmpgt>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	f040 80f9 	bne.w	8009d54 <_dtoa_r+0x6bc>
 8009b62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7f6 ffb7 	bl	8000adc <__aeabi_dcmpeq>
 8009b6e:	b118      	cbz	r0, 8009b78 <_dtoa_r+0x4e0>
 8009b70:	f018 0f01 	tst.w	r8, #1
 8009b74:	f040 80ee 	bne.w	8009d54 <_dtoa_r+0x6bc>
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4658      	mov	r0, fp
 8009b7c:	f000 ff8c 	bl	800aa98 <_Bfree>
 8009b80:	2300      	movs	r3, #0
 8009b82:	7033      	strb	r3, [r6, #0]
 8009b84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b86:	3701      	adds	r7, #1
 8009b88:	601f      	str	r7, [r3, #0]
 8009b8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 831d 	beq.w	800a1cc <_dtoa_r+0xb34>
 8009b92:	601e      	str	r6, [r3, #0]
 8009b94:	e31a      	b.n	800a1cc <_dtoa_r+0xb34>
 8009b96:	07e2      	lsls	r2, r4, #31
 8009b98:	d505      	bpl.n	8009ba6 <_dtoa_r+0x50e>
 8009b9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b9e:	f7f6 fd35 	bl	800060c <__aeabi_dmul>
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	1064      	asrs	r4, r4, #1
 8009ba8:	3508      	adds	r5, #8
 8009baa:	e73f      	b.n	8009a2c <_dtoa_r+0x394>
 8009bac:	2602      	movs	r6, #2
 8009bae:	e742      	b.n	8009a36 <_dtoa_r+0x39e>
 8009bb0:	9c07      	ldr	r4, [sp, #28]
 8009bb2:	9704      	str	r7, [sp, #16]
 8009bb4:	e761      	b.n	8009a7a <_dtoa_r+0x3e2>
 8009bb6:	4b27      	ldr	r3, [pc, #156]	@ (8009c54 <_dtoa_r+0x5bc>)
 8009bb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009bba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bc2:	4454      	add	r4, sl
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	d053      	beq.n	8009c70 <_dtoa_r+0x5d8>
 8009bc8:	4928      	ldr	r1, [pc, #160]	@ (8009c6c <_dtoa_r+0x5d4>)
 8009bca:	2000      	movs	r0, #0
 8009bcc:	f7f6 fe48 	bl	8000860 <__aeabi_ddiv>
 8009bd0:	4633      	mov	r3, r6
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	f7f6 fb62 	bl	800029c <__aeabi_dsub>
 8009bd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bdc:	4656      	mov	r6, sl
 8009bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be2:	f7f6 ffc3 	bl	8000b6c <__aeabi_d2iz>
 8009be6:	4605      	mov	r5, r0
 8009be8:	f7f6 fca6 	bl	8000538 <__aeabi_i2d>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bf4:	f7f6 fb52 	bl	800029c <__aeabi_dsub>
 8009bf8:	3530      	adds	r5, #48	@ 0x30
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c02:	f806 5b01 	strb.w	r5, [r6], #1
 8009c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c0a:	f7f6 ff71 	bl	8000af0 <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d171      	bne.n	8009cf6 <_dtoa_r+0x65e>
 8009c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c16:	4911      	ldr	r1, [pc, #68]	@ (8009c5c <_dtoa_r+0x5c4>)
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f7f6 fb3f 	bl	800029c <__aeabi_dsub>
 8009c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c22:	f7f6 ff65 	bl	8000af0 <__aeabi_dcmplt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f040 8095 	bne.w	8009d56 <_dtoa_r+0x6be>
 8009c2c:	42a6      	cmp	r6, r4
 8009c2e:	f43f af50 	beq.w	8009ad2 <_dtoa_r+0x43a>
 8009c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c36:	4b0a      	ldr	r3, [pc, #40]	@ (8009c60 <_dtoa_r+0x5c8>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f7f6 fce7 	bl	800060c <__aeabi_dmul>
 8009c3e:	4b08      	ldr	r3, [pc, #32]	@ (8009c60 <_dtoa_r+0x5c8>)
 8009c40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c44:	2200      	movs	r2, #0
 8009c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4a:	f7f6 fcdf 	bl	800060c <__aeabi_dmul>
 8009c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c52:	e7c4      	b.n	8009bde <_dtoa_r+0x546>
 8009c54:	0800c948 	.word	0x0800c948
 8009c58:	0800c920 	.word	0x0800c920
 8009c5c:	3ff00000 	.word	0x3ff00000
 8009c60:	40240000 	.word	0x40240000
 8009c64:	401c0000 	.word	0x401c0000
 8009c68:	40140000 	.word	0x40140000
 8009c6c:	3fe00000 	.word	0x3fe00000
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	f7f6 fcca 	bl	800060c <__aeabi_dmul>
 8009c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c7c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c7e:	4656      	mov	r6, sl
 8009c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c84:	f7f6 ff72 	bl	8000b6c <__aeabi_d2iz>
 8009c88:	4605      	mov	r5, r0
 8009c8a:	f7f6 fc55 	bl	8000538 <__aeabi_i2d>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c96:	f7f6 fb01 	bl	800029c <__aeabi_dsub>
 8009c9a:	3530      	adds	r5, #48	@ 0x30
 8009c9c:	f806 5b01 	strb.w	r5, [r6], #1
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	42a6      	cmp	r6, r4
 8009ca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	d124      	bne.n	8009cfa <_dtoa_r+0x662>
 8009cb0:	4bac      	ldr	r3, [pc, #688]	@ (8009f64 <_dtoa_r+0x8cc>)
 8009cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009cb6:	f7f6 faf3 	bl	80002a0 <__adddf3>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc2:	f7f6 ff33 	bl	8000b2c <__aeabi_dcmpgt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d145      	bne.n	8009d56 <_dtoa_r+0x6be>
 8009cca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cce:	49a5      	ldr	r1, [pc, #660]	@ (8009f64 <_dtoa_r+0x8cc>)
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	f7f6 fae3 	bl	800029c <__aeabi_dsub>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cde:	f7f6 ff07 	bl	8000af0 <__aeabi_dcmplt>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f43f aef5 	beq.w	8009ad2 <_dtoa_r+0x43a>
 8009ce8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009cea:	1e73      	subs	r3, r6, #1
 8009cec:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cf2:	2b30      	cmp	r3, #48	@ 0x30
 8009cf4:	d0f8      	beq.n	8009ce8 <_dtoa_r+0x650>
 8009cf6:	9f04      	ldr	r7, [sp, #16]
 8009cf8:	e73e      	b.n	8009b78 <_dtoa_r+0x4e0>
 8009cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8009f68 <_dtoa_r+0x8d0>)
 8009cfc:	f7f6 fc86 	bl	800060c <__aeabi_dmul>
 8009d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d04:	e7bc      	b.n	8009c80 <_dtoa_r+0x5e8>
 8009d06:	d10c      	bne.n	8009d22 <_dtoa_r+0x68a>
 8009d08:	4b98      	ldr	r3, [pc, #608]	@ (8009f6c <_dtoa_r+0x8d4>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d10:	f7f6 fc7c 	bl	800060c <__aeabi_dmul>
 8009d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d18:	f7f6 fefe 	bl	8000b18 <__aeabi_dcmpge>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f000 8157 	beq.w	8009fd0 <_dtoa_r+0x938>
 8009d22:	2400      	movs	r4, #0
 8009d24:	4625      	mov	r5, r4
 8009d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	4656      	mov	r6, sl
 8009d2e:	2700      	movs	r7, #0
 8009d30:	4621      	mov	r1, r4
 8009d32:	4658      	mov	r0, fp
 8009d34:	f000 feb0 	bl	800aa98 <_Bfree>
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	d0dc      	beq.n	8009cf6 <_dtoa_r+0x65e>
 8009d3c:	b12f      	cbz	r7, 8009d4a <_dtoa_r+0x6b2>
 8009d3e:	42af      	cmp	r7, r5
 8009d40:	d003      	beq.n	8009d4a <_dtoa_r+0x6b2>
 8009d42:	4639      	mov	r1, r7
 8009d44:	4658      	mov	r0, fp
 8009d46:	f000 fea7 	bl	800aa98 <_Bfree>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4658      	mov	r0, fp
 8009d4e:	f000 fea3 	bl	800aa98 <_Bfree>
 8009d52:	e7d0      	b.n	8009cf6 <_dtoa_r+0x65e>
 8009d54:	9704      	str	r7, [sp, #16]
 8009d56:	4633      	mov	r3, r6
 8009d58:	461e      	mov	r6, r3
 8009d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d5e:	2a39      	cmp	r2, #57	@ 0x39
 8009d60:	d107      	bne.n	8009d72 <_dtoa_r+0x6da>
 8009d62:	459a      	cmp	sl, r3
 8009d64:	d1f8      	bne.n	8009d58 <_dtoa_r+0x6c0>
 8009d66:	9a04      	ldr	r2, [sp, #16]
 8009d68:	3201      	adds	r2, #1
 8009d6a:	9204      	str	r2, [sp, #16]
 8009d6c:	2230      	movs	r2, #48	@ 0x30
 8009d6e:	f88a 2000 	strb.w	r2, [sl]
 8009d72:	781a      	ldrb	r2, [r3, #0]
 8009d74:	3201      	adds	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]
 8009d78:	e7bd      	b.n	8009cf6 <_dtoa_r+0x65e>
 8009d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8009f68 <_dtoa_r+0x8d0>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f7f6 fc45 	bl	800060c <__aeabi_dmul>
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	460d      	mov	r5, r1
 8009d8a:	f7f6 fea7 	bl	8000adc <__aeabi_dcmpeq>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f43f aebb 	beq.w	8009b0a <_dtoa_r+0x472>
 8009d94:	e6f0      	b.n	8009b78 <_dtoa_r+0x4e0>
 8009d96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	f000 80db 	beq.w	8009f54 <_dtoa_r+0x8bc>
 8009d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009da0:	2a01      	cmp	r2, #1
 8009da2:	f300 80bf 	bgt.w	8009f24 <_dtoa_r+0x88c>
 8009da6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	f000 80b7 	beq.w	8009f1c <_dtoa_r+0x884>
 8009dae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009db2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009db4:	4646      	mov	r6, r8
 8009db6:	9a08      	ldr	r2, [sp, #32]
 8009db8:	2101      	movs	r1, #1
 8009dba:	441a      	add	r2, r3
 8009dbc:	4658      	mov	r0, fp
 8009dbe:	4498      	add	r8, r3
 8009dc0:	9208      	str	r2, [sp, #32]
 8009dc2:	f000 ff1d 	bl	800ac00 <__i2b>
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	b15e      	cbz	r6, 8009de2 <_dtoa_r+0x74a>
 8009dca:	9b08      	ldr	r3, [sp, #32]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dd08      	ble.n	8009de2 <_dtoa_r+0x74a>
 8009dd0:	42b3      	cmp	r3, r6
 8009dd2:	9a08      	ldr	r2, [sp, #32]
 8009dd4:	bfa8      	it	ge
 8009dd6:	4633      	movge	r3, r6
 8009dd8:	eba8 0803 	sub.w	r8, r8, r3
 8009ddc:	1af6      	subs	r6, r6, r3
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	9308      	str	r3, [sp, #32]
 8009de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de4:	b1f3      	cbz	r3, 8009e24 <_dtoa_r+0x78c>
 8009de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80b7 	beq.w	8009f5c <_dtoa_r+0x8c4>
 8009dee:	b18c      	cbz	r4, 8009e14 <_dtoa_r+0x77c>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4622      	mov	r2, r4
 8009df4:	4658      	mov	r0, fp
 8009df6:	f000 ffc3 	bl	800ad80 <__pow5mult>
 8009dfa:	464a      	mov	r2, r9
 8009dfc:	4601      	mov	r1, r0
 8009dfe:	4605      	mov	r5, r0
 8009e00:	4658      	mov	r0, fp
 8009e02:	f000 ff13 	bl	800ac2c <__multiply>
 8009e06:	4649      	mov	r1, r9
 8009e08:	9004      	str	r0, [sp, #16]
 8009e0a:	4658      	mov	r0, fp
 8009e0c:	f000 fe44 	bl	800aa98 <_Bfree>
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	4699      	mov	r9, r3
 8009e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e16:	1b1a      	subs	r2, r3, r4
 8009e18:	d004      	beq.n	8009e24 <_dtoa_r+0x78c>
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	f000 ffaf 	bl	800ad80 <__pow5mult>
 8009e22:	4681      	mov	r9, r0
 8009e24:	2101      	movs	r1, #1
 8009e26:	4658      	mov	r0, fp
 8009e28:	f000 feea 	bl	800ac00 <__i2b>
 8009e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e2e:	4604      	mov	r4, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 81cf 	beq.w	800a1d4 <_dtoa_r+0xb3c>
 8009e36:	461a      	mov	r2, r3
 8009e38:	4601      	mov	r1, r0
 8009e3a:	4658      	mov	r0, fp
 8009e3c:	f000 ffa0 	bl	800ad80 <__pow5mult>
 8009e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	4604      	mov	r4, r0
 8009e46:	f300 8095 	bgt.w	8009f74 <_dtoa_r+0x8dc>
 8009e4a:	9b02      	ldr	r3, [sp, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f040 8087 	bne.w	8009f60 <_dtoa_r+0x8c8>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f040 8089 	bne.w	8009f70 <_dtoa_r+0x8d8>
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e64:	0d1b      	lsrs	r3, r3, #20
 8009e66:	051b      	lsls	r3, r3, #20
 8009e68:	b12b      	cbz	r3, 8009e76 <_dtoa_r+0x7de>
 8009e6a:	9b08      	ldr	r3, [sp, #32]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	9308      	str	r3, [sp, #32]
 8009e70:	f108 0801 	add.w	r8, r8, #1
 8009e74:	2301      	movs	r3, #1
 8009e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 81b0 	beq.w	800a1e0 <_dtoa_r+0xb48>
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e86:	6918      	ldr	r0, [r3, #16]
 8009e88:	f000 fe6e 	bl	800ab68 <__hi0bits>
 8009e8c:	f1c0 0020 	rsb	r0, r0, #32
 8009e90:	9b08      	ldr	r3, [sp, #32]
 8009e92:	4418      	add	r0, r3
 8009e94:	f010 001f 	ands.w	r0, r0, #31
 8009e98:	d077      	beq.n	8009f8a <_dtoa_r+0x8f2>
 8009e9a:	f1c0 0320 	rsb	r3, r0, #32
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	dd6b      	ble.n	8009f7a <_dtoa_r+0x8e2>
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	f1c0 001c 	rsb	r0, r0, #28
 8009ea8:	4403      	add	r3, r0
 8009eaa:	4480      	add	r8, r0
 8009eac:	4406      	add	r6, r0
 8009eae:	9308      	str	r3, [sp, #32]
 8009eb0:	f1b8 0f00 	cmp.w	r8, #0
 8009eb4:	dd05      	ble.n	8009ec2 <_dtoa_r+0x82a>
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	4642      	mov	r2, r8
 8009eba:	4658      	mov	r0, fp
 8009ebc:	f000 ffba 	bl	800ae34 <__lshift>
 8009ec0:	4681      	mov	r9, r0
 8009ec2:	9b08      	ldr	r3, [sp, #32]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	dd05      	ble.n	8009ed4 <_dtoa_r+0x83c>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4658      	mov	r0, fp
 8009ece:	f000 ffb1 	bl	800ae34 <__lshift>
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d059      	beq.n	8009f8e <_dtoa_r+0x8f6>
 8009eda:	4621      	mov	r1, r4
 8009edc:	4648      	mov	r0, r9
 8009ede:	f001 f815 	bl	800af0c <__mcmp>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	da53      	bge.n	8009f8e <_dtoa_r+0x8f6>
 8009ee6:	1e7b      	subs	r3, r7, #1
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	4649      	mov	r1, r9
 8009eec:	2300      	movs	r3, #0
 8009eee:	220a      	movs	r2, #10
 8009ef0:	4658      	mov	r0, fp
 8009ef2:	f000 fdf3 	bl	800aadc <__multadd>
 8009ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ef8:	4681      	mov	r9, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 8172 	beq.w	800a1e4 <_dtoa_r+0xb4c>
 8009f00:	2300      	movs	r3, #0
 8009f02:	4629      	mov	r1, r5
 8009f04:	220a      	movs	r2, #10
 8009f06:	4658      	mov	r0, fp
 8009f08:	f000 fde8 	bl	800aadc <__multadd>
 8009f0c:	9b00      	ldr	r3, [sp, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	4605      	mov	r5, r0
 8009f12:	dc67      	bgt.n	8009fe4 <_dtoa_r+0x94c>
 8009f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	dc41      	bgt.n	8009f9e <_dtoa_r+0x906>
 8009f1a:	e063      	b.n	8009fe4 <_dtoa_r+0x94c>
 8009f1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f22:	e746      	b.n	8009db2 <_dtoa_r+0x71a>
 8009f24:	9b07      	ldr	r3, [sp, #28]
 8009f26:	1e5c      	subs	r4, r3, #1
 8009f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	bfbf      	itttt	lt
 8009f2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009f32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f34:	1ae3      	sublt	r3, r4, r3
 8009f36:	bfb4      	ite	lt
 8009f38:	18d2      	addlt	r2, r2, r3
 8009f3a:	1b1c      	subge	r4, r3, r4
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	bfbc      	itt	lt
 8009f40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009f42:	2400      	movlt	r4, #0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bfb5      	itete	lt
 8009f48:	eba8 0603 	sublt.w	r6, r8, r3
 8009f4c:	9b07      	ldrge	r3, [sp, #28]
 8009f4e:	2300      	movlt	r3, #0
 8009f50:	4646      	movge	r6, r8
 8009f52:	e730      	b.n	8009db6 <_dtoa_r+0x71e>
 8009f54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f58:	4646      	mov	r6, r8
 8009f5a:	e735      	b.n	8009dc8 <_dtoa_r+0x730>
 8009f5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f5e:	e75c      	b.n	8009e1a <_dtoa_r+0x782>
 8009f60:	2300      	movs	r3, #0
 8009f62:	e788      	b.n	8009e76 <_dtoa_r+0x7de>
 8009f64:	3fe00000 	.word	0x3fe00000
 8009f68:	40240000 	.word	0x40240000
 8009f6c:	40140000 	.word	0x40140000
 8009f70:	9b02      	ldr	r3, [sp, #8]
 8009f72:	e780      	b.n	8009e76 <_dtoa_r+0x7de>
 8009f74:	2300      	movs	r3, #0
 8009f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f78:	e782      	b.n	8009e80 <_dtoa_r+0x7e8>
 8009f7a:	d099      	beq.n	8009eb0 <_dtoa_r+0x818>
 8009f7c:	9a08      	ldr	r2, [sp, #32]
 8009f7e:	331c      	adds	r3, #28
 8009f80:	441a      	add	r2, r3
 8009f82:	4498      	add	r8, r3
 8009f84:	441e      	add	r6, r3
 8009f86:	9208      	str	r2, [sp, #32]
 8009f88:	e792      	b.n	8009eb0 <_dtoa_r+0x818>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	e7f6      	b.n	8009f7c <_dtoa_r+0x8e4>
 8009f8e:	9b07      	ldr	r3, [sp, #28]
 8009f90:	9704      	str	r7, [sp, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dc20      	bgt.n	8009fd8 <_dtoa_r+0x940>
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	dd1e      	ble.n	8009fdc <_dtoa_r+0x944>
 8009f9e:	9b00      	ldr	r3, [sp, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f47f aec0 	bne.w	8009d26 <_dtoa_r+0x68e>
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	2205      	movs	r2, #5
 8009faa:	4658      	mov	r0, fp
 8009fac:	f000 fd96 	bl	800aadc <__multadd>
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	f000 ffa9 	bl	800af0c <__mcmp>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	f77f aeb3 	ble.w	8009d26 <_dtoa_r+0x68e>
 8009fc0:	4656      	mov	r6, sl
 8009fc2:	2331      	movs	r3, #49	@ 0x31
 8009fc4:	f806 3b01 	strb.w	r3, [r6], #1
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	9304      	str	r3, [sp, #16]
 8009fce:	e6ae      	b.n	8009d2e <_dtoa_r+0x696>
 8009fd0:	9c07      	ldr	r4, [sp, #28]
 8009fd2:	9704      	str	r7, [sp, #16]
 8009fd4:	4625      	mov	r5, r4
 8009fd6:	e7f3      	b.n	8009fc0 <_dtoa_r+0x928>
 8009fd8:	9b07      	ldr	r3, [sp, #28]
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 8104 	beq.w	800a1ec <_dtoa_r+0xb54>
 8009fe4:	2e00      	cmp	r6, #0
 8009fe6:	dd05      	ble.n	8009ff4 <_dtoa_r+0x95c>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4632      	mov	r2, r6
 8009fec:	4658      	mov	r0, fp
 8009fee:	f000 ff21 	bl	800ae34 <__lshift>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d05a      	beq.n	800a0b0 <_dtoa_r+0xa18>
 8009ffa:	6869      	ldr	r1, [r5, #4]
 8009ffc:	4658      	mov	r0, fp
 8009ffe:	f000 fd0b 	bl	800aa18 <_Balloc>
 800a002:	4606      	mov	r6, r0
 800a004:	b928      	cbnz	r0, 800a012 <_dtoa_r+0x97a>
 800a006:	4b84      	ldr	r3, [pc, #528]	@ (800a218 <_dtoa_r+0xb80>)
 800a008:	4602      	mov	r2, r0
 800a00a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a00e:	f7ff bb5a 	b.w	80096c6 <_dtoa_r+0x2e>
 800a012:	692a      	ldr	r2, [r5, #16]
 800a014:	3202      	adds	r2, #2
 800a016:	0092      	lsls	r2, r2, #2
 800a018:	f105 010c 	add.w	r1, r5, #12
 800a01c:	300c      	adds	r0, #12
 800a01e:	f7ff fa96 	bl	800954e <memcpy>
 800a022:	2201      	movs	r2, #1
 800a024:	4631      	mov	r1, r6
 800a026:	4658      	mov	r0, fp
 800a028:	f000 ff04 	bl	800ae34 <__lshift>
 800a02c:	f10a 0301 	add.w	r3, sl, #1
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	9b00      	ldr	r3, [sp, #0]
 800a034:	4453      	add	r3, sl
 800a036:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	462f      	mov	r7, r5
 800a040:	930a      	str	r3, [sp, #40]	@ 0x28
 800a042:	4605      	mov	r5, r0
 800a044:	9b07      	ldr	r3, [sp, #28]
 800a046:	4621      	mov	r1, r4
 800a048:	3b01      	subs	r3, #1
 800a04a:	4648      	mov	r0, r9
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	f7ff fa9b 	bl	8009588 <quorem>
 800a052:	4639      	mov	r1, r7
 800a054:	9002      	str	r0, [sp, #8]
 800a056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a05a:	4648      	mov	r0, r9
 800a05c:	f000 ff56 	bl	800af0c <__mcmp>
 800a060:	462a      	mov	r2, r5
 800a062:	9008      	str	r0, [sp, #32]
 800a064:	4621      	mov	r1, r4
 800a066:	4658      	mov	r0, fp
 800a068:	f000 ff6c 	bl	800af44 <__mdiff>
 800a06c:	68c2      	ldr	r2, [r0, #12]
 800a06e:	4606      	mov	r6, r0
 800a070:	bb02      	cbnz	r2, 800a0b4 <_dtoa_r+0xa1c>
 800a072:	4601      	mov	r1, r0
 800a074:	4648      	mov	r0, r9
 800a076:	f000 ff49 	bl	800af0c <__mcmp>
 800a07a:	4602      	mov	r2, r0
 800a07c:	4631      	mov	r1, r6
 800a07e:	4658      	mov	r0, fp
 800a080:	920e      	str	r2, [sp, #56]	@ 0x38
 800a082:	f000 fd09 	bl	800aa98 <_Bfree>
 800a086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a088:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a08a:	9e07      	ldr	r6, [sp, #28]
 800a08c:	ea43 0102 	orr.w	r1, r3, r2
 800a090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a092:	4319      	orrs	r1, r3
 800a094:	d110      	bne.n	800a0b8 <_dtoa_r+0xa20>
 800a096:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a09a:	d029      	beq.n	800a0f0 <_dtoa_r+0xa58>
 800a09c:	9b08      	ldr	r3, [sp, #32]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	dd02      	ble.n	800a0a8 <_dtoa_r+0xa10>
 800a0a2:	9b02      	ldr	r3, [sp, #8]
 800a0a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a0a8:	9b00      	ldr	r3, [sp, #0]
 800a0aa:	f883 8000 	strb.w	r8, [r3]
 800a0ae:	e63f      	b.n	8009d30 <_dtoa_r+0x698>
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	e7bb      	b.n	800a02c <_dtoa_r+0x994>
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	e7e1      	b.n	800a07c <_dtoa_r+0x9e4>
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	db04      	blt.n	800a0c8 <_dtoa_r+0xa30>
 800a0be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	d120      	bne.n	800a10a <_dtoa_r+0xa72>
 800a0c8:	2a00      	cmp	r2, #0
 800a0ca:	dded      	ble.n	800a0a8 <_dtoa_r+0xa10>
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	4658      	mov	r0, fp
 800a0d2:	f000 feaf 	bl	800ae34 <__lshift>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4681      	mov	r9, r0
 800a0da:	f000 ff17 	bl	800af0c <__mcmp>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	dc03      	bgt.n	800a0ea <_dtoa_r+0xa52>
 800a0e2:	d1e1      	bne.n	800a0a8 <_dtoa_r+0xa10>
 800a0e4:	f018 0f01 	tst.w	r8, #1
 800a0e8:	d0de      	beq.n	800a0a8 <_dtoa_r+0xa10>
 800a0ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0ee:	d1d8      	bne.n	800a0a2 <_dtoa_r+0xa0a>
 800a0f0:	9a00      	ldr	r2, [sp, #0]
 800a0f2:	2339      	movs	r3, #57	@ 0x39
 800a0f4:	7013      	strb	r3, [r2, #0]
 800a0f6:	4633      	mov	r3, r6
 800a0f8:	461e      	mov	r6, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a100:	2a39      	cmp	r2, #57	@ 0x39
 800a102:	d052      	beq.n	800a1aa <_dtoa_r+0xb12>
 800a104:	3201      	adds	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	e612      	b.n	8009d30 <_dtoa_r+0x698>
 800a10a:	2a00      	cmp	r2, #0
 800a10c:	dd07      	ble.n	800a11e <_dtoa_r+0xa86>
 800a10e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a112:	d0ed      	beq.n	800a0f0 <_dtoa_r+0xa58>
 800a114:	9a00      	ldr	r2, [sp, #0]
 800a116:	f108 0301 	add.w	r3, r8, #1
 800a11a:	7013      	strb	r3, [r2, #0]
 800a11c:	e608      	b.n	8009d30 <_dtoa_r+0x698>
 800a11e:	9b07      	ldr	r3, [sp, #28]
 800a120:	9a07      	ldr	r2, [sp, #28]
 800a122:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a128:	4293      	cmp	r3, r2
 800a12a:	d028      	beq.n	800a17e <_dtoa_r+0xae6>
 800a12c:	4649      	mov	r1, r9
 800a12e:	2300      	movs	r3, #0
 800a130:	220a      	movs	r2, #10
 800a132:	4658      	mov	r0, fp
 800a134:	f000 fcd2 	bl	800aadc <__multadd>
 800a138:	42af      	cmp	r7, r5
 800a13a:	4681      	mov	r9, r0
 800a13c:	f04f 0300 	mov.w	r3, #0
 800a140:	f04f 020a 	mov.w	r2, #10
 800a144:	4639      	mov	r1, r7
 800a146:	4658      	mov	r0, fp
 800a148:	d107      	bne.n	800a15a <_dtoa_r+0xac2>
 800a14a:	f000 fcc7 	bl	800aadc <__multadd>
 800a14e:	4607      	mov	r7, r0
 800a150:	4605      	mov	r5, r0
 800a152:	9b07      	ldr	r3, [sp, #28]
 800a154:	3301      	adds	r3, #1
 800a156:	9307      	str	r3, [sp, #28]
 800a158:	e774      	b.n	800a044 <_dtoa_r+0x9ac>
 800a15a:	f000 fcbf 	bl	800aadc <__multadd>
 800a15e:	4629      	mov	r1, r5
 800a160:	4607      	mov	r7, r0
 800a162:	2300      	movs	r3, #0
 800a164:	220a      	movs	r2, #10
 800a166:	4658      	mov	r0, fp
 800a168:	f000 fcb8 	bl	800aadc <__multadd>
 800a16c:	4605      	mov	r5, r0
 800a16e:	e7f0      	b.n	800a152 <_dtoa_r+0xaba>
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	bfcc      	ite	gt
 800a176:	461e      	movgt	r6, r3
 800a178:	2601      	movle	r6, #1
 800a17a:	4456      	add	r6, sl
 800a17c:	2700      	movs	r7, #0
 800a17e:	4649      	mov	r1, r9
 800a180:	2201      	movs	r2, #1
 800a182:	4658      	mov	r0, fp
 800a184:	f000 fe56 	bl	800ae34 <__lshift>
 800a188:	4621      	mov	r1, r4
 800a18a:	4681      	mov	r9, r0
 800a18c:	f000 febe 	bl	800af0c <__mcmp>
 800a190:	2800      	cmp	r0, #0
 800a192:	dcb0      	bgt.n	800a0f6 <_dtoa_r+0xa5e>
 800a194:	d102      	bne.n	800a19c <_dtoa_r+0xb04>
 800a196:	f018 0f01 	tst.w	r8, #1
 800a19a:	d1ac      	bne.n	800a0f6 <_dtoa_r+0xa5e>
 800a19c:	4633      	mov	r3, r6
 800a19e:	461e      	mov	r6, r3
 800a1a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1a4:	2a30      	cmp	r2, #48	@ 0x30
 800a1a6:	d0fa      	beq.n	800a19e <_dtoa_r+0xb06>
 800a1a8:	e5c2      	b.n	8009d30 <_dtoa_r+0x698>
 800a1aa:	459a      	cmp	sl, r3
 800a1ac:	d1a4      	bne.n	800a0f8 <_dtoa_r+0xa60>
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	2331      	movs	r3, #49	@ 0x31
 800a1b6:	f88a 3000 	strb.w	r3, [sl]
 800a1ba:	e5b9      	b.n	8009d30 <_dtoa_r+0x698>
 800a1bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a21c <_dtoa_r+0xb84>
 800a1c2:	b11b      	cbz	r3, 800a1cc <_dtoa_r+0xb34>
 800a1c4:	f10a 0308 	add.w	r3, sl, #8
 800a1c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	b019      	add	sp, #100	@ 0x64
 800a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	f77f ae37 	ble.w	8009e4a <_dtoa_r+0x7b2>
 800a1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	e655      	b.n	8009e90 <_dtoa_r+0x7f8>
 800a1e4:	9b00      	ldr	r3, [sp, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f77f aed6 	ble.w	8009f98 <_dtoa_r+0x900>
 800a1ec:	4656      	mov	r6, sl
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4648      	mov	r0, r9
 800a1f2:	f7ff f9c9 	bl	8009588 <quorem>
 800a1f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1fa:	f806 8b01 	strb.w	r8, [r6], #1
 800a1fe:	9b00      	ldr	r3, [sp, #0]
 800a200:	eba6 020a 	sub.w	r2, r6, sl
 800a204:	4293      	cmp	r3, r2
 800a206:	ddb3      	ble.n	800a170 <_dtoa_r+0xad8>
 800a208:	4649      	mov	r1, r9
 800a20a:	2300      	movs	r3, #0
 800a20c:	220a      	movs	r2, #10
 800a20e:	4658      	mov	r0, fp
 800a210:	f000 fc64 	bl	800aadc <__multadd>
 800a214:	4681      	mov	r9, r0
 800a216:	e7ea      	b.n	800a1ee <_dtoa_r+0xb56>
 800a218:	0800c894 	.word	0x0800c894
 800a21c:	0800c818 	.word	0x0800c818

0800a220 <__ssputs_r>:
 800a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	688e      	ldr	r6, [r1, #8]
 800a226:	461f      	mov	r7, r3
 800a228:	42be      	cmp	r6, r7
 800a22a:	680b      	ldr	r3, [r1, #0]
 800a22c:	4682      	mov	sl, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	4690      	mov	r8, r2
 800a232:	d82d      	bhi.n	800a290 <__ssputs_r+0x70>
 800a234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a23c:	d026      	beq.n	800a28c <__ssputs_r+0x6c>
 800a23e:	6965      	ldr	r5, [r4, #20]
 800a240:	6909      	ldr	r1, [r1, #16]
 800a242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a246:	eba3 0901 	sub.w	r9, r3, r1
 800a24a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a24e:	1c7b      	adds	r3, r7, #1
 800a250:	444b      	add	r3, r9
 800a252:	106d      	asrs	r5, r5, #1
 800a254:	429d      	cmp	r5, r3
 800a256:	bf38      	it	cc
 800a258:	461d      	movcc	r5, r3
 800a25a:	0553      	lsls	r3, r2, #21
 800a25c:	d527      	bpl.n	800a2ae <__ssputs_r+0x8e>
 800a25e:	4629      	mov	r1, r5
 800a260:	f000 faa2 	bl	800a7a8 <_malloc_r>
 800a264:	4606      	mov	r6, r0
 800a266:	b360      	cbz	r0, 800a2c2 <__ssputs_r+0xa2>
 800a268:	6921      	ldr	r1, [r4, #16]
 800a26a:	464a      	mov	r2, r9
 800a26c:	f7ff f96f 	bl	800954e <memcpy>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	6126      	str	r6, [r4, #16]
 800a27e:	6165      	str	r5, [r4, #20]
 800a280:	444e      	add	r6, r9
 800a282:	eba5 0509 	sub.w	r5, r5, r9
 800a286:	6026      	str	r6, [r4, #0]
 800a288:	60a5      	str	r5, [r4, #8]
 800a28a:	463e      	mov	r6, r7
 800a28c:	42be      	cmp	r6, r7
 800a28e:	d900      	bls.n	800a292 <__ssputs_r+0x72>
 800a290:	463e      	mov	r6, r7
 800a292:	6820      	ldr	r0, [r4, #0]
 800a294:	4632      	mov	r2, r6
 800a296:	4641      	mov	r1, r8
 800a298:	f7ff f906 	bl	80094a8 <memmove>
 800a29c:	68a3      	ldr	r3, [r4, #8]
 800a29e:	1b9b      	subs	r3, r3, r6
 800a2a0:	60a3      	str	r3, [r4, #8]
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	4433      	add	r3, r6
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	f000 ff77 	bl	800b1a2 <_realloc_r>
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d1e0      	bne.n	800a27c <__ssputs_r+0x5c>
 800a2ba:	6921      	ldr	r1, [r4, #16]
 800a2bc:	4650      	mov	r0, sl
 800a2be:	f001 f965 	bl	800b58c <_free_r>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	f8ca 3000 	str.w	r3, [sl]
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ce:	81a3      	strh	r3, [r4, #12]
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2d4:	e7e9      	b.n	800a2aa <__ssputs_r+0x8a>
	...

0800a2d8 <_svfiprintf_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	4698      	mov	r8, r3
 800a2de:	898b      	ldrh	r3, [r1, #12]
 800a2e0:	061b      	lsls	r3, r3, #24
 800a2e2:	b09d      	sub	sp, #116	@ 0x74
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	d510      	bpl.n	800a30e <_svfiprintf_r+0x36>
 800a2ec:	690b      	ldr	r3, [r1, #16]
 800a2ee:	b973      	cbnz	r3, 800a30e <_svfiprintf_r+0x36>
 800a2f0:	2140      	movs	r1, #64	@ 0x40
 800a2f2:	f000 fa59 	bl	800a7a8 <_malloc_r>
 800a2f6:	6028      	str	r0, [r5, #0]
 800a2f8:	6128      	str	r0, [r5, #16]
 800a2fa:	b930      	cbnz	r0, 800a30a <_svfiprintf_r+0x32>
 800a2fc:	230c      	movs	r3, #12
 800a2fe:	603b      	str	r3, [r7, #0]
 800a300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a304:	b01d      	add	sp, #116	@ 0x74
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	2340      	movs	r3, #64	@ 0x40
 800a30c:	616b      	str	r3, [r5, #20]
 800a30e:	2300      	movs	r3, #0
 800a310:	9309      	str	r3, [sp, #36]	@ 0x24
 800a312:	2320      	movs	r3, #32
 800a314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a318:	f8cd 800c 	str.w	r8, [sp, #12]
 800a31c:	2330      	movs	r3, #48	@ 0x30
 800a31e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4bc <_svfiprintf_r+0x1e4>
 800a322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a326:	f04f 0901 	mov.w	r9, #1
 800a32a:	4623      	mov	r3, r4
 800a32c:	469a      	mov	sl, r3
 800a32e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a332:	b10a      	cbz	r2, 800a338 <_svfiprintf_r+0x60>
 800a334:	2a25      	cmp	r2, #37	@ 0x25
 800a336:	d1f9      	bne.n	800a32c <_svfiprintf_r+0x54>
 800a338:	ebba 0b04 	subs.w	fp, sl, r4
 800a33c:	d00b      	beq.n	800a356 <_svfiprintf_r+0x7e>
 800a33e:	465b      	mov	r3, fp
 800a340:	4622      	mov	r2, r4
 800a342:	4629      	mov	r1, r5
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff ff6b 	bl	800a220 <__ssputs_r>
 800a34a:	3001      	adds	r0, #1
 800a34c:	f000 80a7 	beq.w	800a49e <_svfiprintf_r+0x1c6>
 800a350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a352:	445a      	add	r2, fp
 800a354:	9209      	str	r2, [sp, #36]	@ 0x24
 800a356:	f89a 3000 	ldrb.w	r3, [sl]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 809f 	beq.w	800a49e <_svfiprintf_r+0x1c6>
 800a360:	2300      	movs	r3, #0
 800a362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36a:	f10a 0a01 	add.w	sl, sl, #1
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	9307      	str	r3, [sp, #28]
 800a372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a376:	931a      	str	r3, [sp, #104]	@ 0x68
 800a378:	4654      	mov	r4, sl
 800a37a:	2205      	movs	r2, #5
 800a37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a380:	484e      	ldr	r0, [pc, #312]	@ (800a4bc <_svfiprintf_r+0x1e4>)
 800a382:	f7f5 ff25 	bl	80001d0 <memchr>
 800a386:	9a04      	ldr	r2, [sp, #16]
 800a388:	b9d8      	cbnz	r0, 800a3c2 <_svfiprintf_r+0xea>
 800a38a:	06d0      	lsls	r0, r2, #27
 800a38c:	bf44      	itt	mi
 800a38e:	2320      	movmi	r3, #32
 800a390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a394:	0711      	lsls	r1, r2, #28
 800a396:	bf44      	itt	mi
 800a398:	232b      	movmi	r3, #43	@ 0x2b
 800a39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a39e:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3a4:	d015      	beq.n	800a3d2 <_svfiprintf_r+0xfa>
 800a3a6:	9a07      	ldr	r2, [sp, #28]
 800a3a8:	4654      	mov	r4, sl
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f04f 0c0a 	mov.w	ip, #10
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3b6:	3b30      	subs	r3, #48	@ 0x30
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	d94b      	bls.n	800a454 <_svfiprintf_r+0x17c>
 800a3bc:	b1b0      	cbz	r0, 800a3ec <_svfiprintf_r+0x114>
 800a3be:	9207      	str	r2, [sp, #28]
 800a3c0:	e014      	b.n	800a3ec <_svfiprintf_r+0x114>
 800a3c2:	eba0 0308 	sub.w	r3, r0, r8
 800a3c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	46a2      	mov	sl, r4
 800a3d0:	e7d2      	b.n	800a378 <_svfiprintf_r+0xa0>
 800a3d2:	9b03      	ldr	r3, [sp, #12]
 800a3d4:	1d19      	adds	r1, r3, #4
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	9103      	str	r1, [sp, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bfbb      	ittet	lt
 800a3de:	425b      	neglt	r3, r3
 800a3e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e4:	9307      	strge	r3, [sp, #28]
 800a3e6:	9307      	strlt	r3, [sp, #28]
 800a3e8:	bfb8      	it	lt
 800a3ea:	9204      	strlt	r2, [sp, #16]
 800a3ec:	7823      	ldrb	r3, [r4, #0]
 800a3ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3f0:	d10a      	bne.n	800a408 <_svfiprintf_r+0x130>
 800a3f2:	7863      	ldrb	r3, [r4, #1]
 800a3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3f6:	d132      	bne.n	800a45e <_svfiprintf_r+0x186>
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	1d1a      	adds	r2, r3, #4
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	9203      	str	r2, [sp, #12]
 800a400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a404:	3402      	adds	r4, #2
 800a406:	9305      	str	r3, [sp, #20]
 800a408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4cc <_svfiprintf_r+0x1f4>
 800a40c:	7821      	ldrb	r1, [r4, #0]
 800a40e:	2203      	movs	r2, #3
 800a410:	4650      	mov	r0, sl
 800a412:	f7f5 fedd 	bl	80001d0 <memchr>
 800a416:	b138      	cbz	r0, 800a428 <_svfiprintf_r+0x150>
 800a418:	9b04      	ldr	r3, [sp, #16]
 800a41a:	eba0 000a 	sub.w	r0, r0, sl
 800a41e:	2240      	movs	r2, #64	@ 0x40
 800a420:	4082      	lsls	r2, r0
 800a422:	4313      	orrs	r3, r2
 800a424:	3401      	adds	r4, #1
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a42c:	4824      	ldr	r0, [pc, #144]	@ (800a4c0 <_svfiprintf_r+0x1e8>)
 800a42e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a432:	2206      	movs	r2, #6
 800a434:	f7f5 fecc 	bl	80001d0 <memchr>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d036      	beq.n	800a4aa <_svfiprintf_r+0x1d2>
 800a43c:	4b21      	ldr	r3, [pc, #132]	@ (800a4c4 <_svfiprintf_r+0x1ec>)
 800a43e:	bb1b      	cbnz	r3, 800a488 <_svfiprintf_r+0x1b0>
 800a440:	9b03      	ldr	r3, [sp, #12]
 800a442:	3307      	adds	r3, #7
 800a444:	f023 0307 	bic.w	r3, r3, #7
 800a448:	3308      	adds	r3, #8
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a44e:	4433      	add	r3, r6
 800a450:	9309      	str	r3, [sp, #36]	@ 0x24
 800a452:	e76a      	b.n	800a32a <_svfiprintf_r+0x52>
 800a454:	fb0c 3202 	mla	r2, ip, r2, r3
 800a458:	460c      	mov	r4, r1
 800a45a:	2001      	movs	r0, #1
 800a45c:	e7a8      	b.n	800a3b0 <_svfiprintf_r+0xd8>
 800a45e:	2300      	movs	r3, #0
 800a460:	3401      	adds	r4, #1
 800a462:	9305      	str	r3, [sp, #20]
 800a464:	4619      	mov	r1, r3
 800a466:	f04f 0c0a 	mov.w	ip, #10
 800a46a:	4620      	mov	r0, r4
 800a46c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a470:	3a30      	subs	r2, #48	@ 0x30
 800a472:	2a09      	cmp	r2, #9
 800a474:	d903      	bls.n	800a47e <_svfiprintf_r+0x1a6>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0c6      	beq.n	800a408 <_svfiprintf_r+0x130>
 800a47a:	9105      	str	r1, [sp, #20]
 800a47c:	e7c4      	b.n	800a408 <_svfiprintf_r+0x130>
 800a47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a482:	4604      	mov	r4, r0
 800a484:	2301      	movs	r3, #1
 800a486:	e7f0      	b.n	800a46a <_svfiprintf_r+0x192>
 800a488:	ab03      	add	r3, sp, #12
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	462a      	mov	r2, r5
 800a48e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c8 <_svfiprintf_r+0x1f0>)
 800a490:	a904      	add	r1, sp, #16
 800a492:	4638      	mov	r0, r7
 800a494:	f7fe fb48 	bl	8008b28 <_printf_float>
 800a498:	1c42      	adds	r2, r0, #1
 800a49a:	4606      	mov	r6, r0
 800a49c:	d1d6      	bne.n	800a44c <_svfiprintf_r+0x174>
 800a49e:	89ab      	ldrh	r3, [r5, #12]
 800a4a0:	065b      	lsls	r3, r3, #25
 800a4a2:	f53f af2d 	bmi.w	800a300 <_svfiprintf_r+0x28>
 800a4a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4a8:	e72c      	b.n	800a304 <_svfiprintf_r+0x2c>
 800a4aa:	ab03      	add	r3, sp, #12
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4b05      	ldr	r3, [pc, #20]	@ (800a4c8 <_svfiprintf_r+0x1f0>)
 800a4b2:	a904      	add	r1, sp, #16
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f7fe fdcf 	bl	8009058 <_printf_i>
 800a4ba:	e7ed      	b.n	800a498 <_svfiprintf_r+0x1c0>
 800a4bc:	0800c8a5 	.word	0x0800c8a5
 800a4c0:	0800c8af 	.word	0x0800c8af
 800a4c4:	08008b29 	.word	0x08008b29
 800a4c8:	0800a221 	.word	0x0800a221
 800a4cc:	0800c8ab 	.word	0x0800c8ab

0800a4d0 <__sfputc_r>:
 800a4d0:	6893      	ldr	r3, [r2, #8]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	b410      	push	{r4}
 800a4d8:	6093      	str	r3, [r2, #8]
 800a4da:	da08      	bge.n	800a4ee <__sfputc_r+0x1e>
 800a4dc:	6994      	ldr	r4, [r2, #24]
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	db01      	blt.n	800a4e6 <__sfputc_r+0x16>
 800a4e2:	290a      	cmp	r1, #10
 800a4e4:	d103      	bne.n	800a4ee <__sfputc_r+0x1e>
 800a4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4ea:	f000 be88 	b.w	800b1fe <__swbuf_r>
 800a4ee:	6813      	ldr	r3, [r2, #0]
 800a4f0:	1c58      	adds	r0, r3, #1
 800a4f2:	6010      	str	r0, [r2, #0]
 800a4f4:	7019      	strb	r1, [r3, #0]
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <__sfputs_r>:
 800a4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a500:	4606      	mov	r6, r0
 800a502:	460f      	mov	r7, r1
 800a504:	4614      	mov	r4, r2
 800a506:	18d5      	adds	r5, r2, r3
 800a508:	42ac      	cmp	r4, r5
 800a50a:	d101      	bne.n	800a510 <__sfputs_r+0x12>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e007      	b.n	800a520 <__sfputs_r+0x22>
 800a510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a514:	463a      	mov	r2, r7
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ffda 	bl	800a4d0 <__sfputc_r>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d1f3      	bne.n	800a508 <__sfputs_r+0xa>
 800a520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a524 <_vfiprintf_r>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	460d      	mov	r5, r1
 800a52a:	b09d      	sub	sp, #116	@ 0x74
 800a52c:	4614      	mov	r4, r2
 800a52e:	4698      	mov	r8, r3
 800a530:	4606      	mov	r6, r0
 800a532:	b118      	cbz	r0, 800a53c <_vfiprintf_r+0x18>
 800a534:	6a03      	ldr	r3, [r0, #32]
 800a536:	b90b      	cbnz	r3, 800a53c <_vfiprintf_r+0x18>
 800a538:	f7fe ff6e 	bl	8009418 <__sinit>
 800a53c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a53e:	07d9      	lsls	r1, r3, #31
 800a540:	d405      	bmi.n	800a54e <_vfiprintf_r+0x2a>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	059a      	lsls	r2, r3, #22
 800a546:	d402      	bmi.n	800a54e <_vfiprintf_r+0x2a>
 800a548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a54a:	f7fe fffe 	bl	800954a <__retarget_lock_acquire_recursive>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	071b      	lsls	r3, r3, #28
 800a552:	d501      	bpl.n	800a558 <_vfiprintf_r+0x34>
 800a554:	692b      	ldr	r3, [r5, #16]
 800a556:	b99b      	cbnz	r3, 800a580 <_vfiprintf_r+0x5c>
 800a558:	4629      	mov	r1, r5
 800a55a:	4630      	mov	r0, r6
 800a55c:	f000 fe8e 	bl	800b27c <__swsetup_r>
 800a560:	b170      	cbz	r0, 800a580 <_vfiprintf_r+0x5c>
 800a562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a564:	07dc      	lsls	r4, r3, #31
 800a566:	d504      	bpl.n	800a572 <_vfiprintf_r+0x4e>
 800a568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a56c:	b01d      	add	sp, #116	@ 0x74
 800a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	0598      	lsls	r0, r3, #22
 800a576:	d4f7      	bmi.n	800a568 <_vfiprintf_r+0x44>
 800a578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a57a:	f7fe ffe7 	bl	800954c <__retarget_lock_release_recursive>
 800a57e:	e7f3      	b.n	800a568 <_vfiprintf_r+0x44>
 800a580:	2300      	movs	r3, #0
 800a582:	9309      	str	r3, [sp, #36]	@ 0x24
 800a584:	2320      	movs	r3, #32
 800a586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a58a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a58e:	2330      	movs	r3, #48	@ 0x30
 800a590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a740 <_vfiprintf_r+0x21c>
 800a594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a598:	f04f 0901 	mov.w	r9, #1
 800a59c:	4623      	mov	r3, r4
 800a59e:	469a      	mov	sl, r3
 800a5a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a4:	b10a      	cbz	r2, 800a5aa <_vfiprintf_r+0x86>
 800a5a6:	2a25      	cmp	r2, #37	@ 0x25
 800a5a8:	d1f9      	bne.n	800a59e <_vfiprintf_r+0x7a>
 800a5aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ae:	d00b      	beq.n	800a5c8 <_vfiprintf_r+0xa4>
 800a5b0:	465b      	mov	r3, fp
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7ff ffa1 	bl	800a4fe <__sfputs_r>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f000 80a7 	beq.w	800a710 <_vfiprintf_r+0x1ec>
 800a5c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5c4:	445a      	add	r2, fp
 800a5c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 809f 	beq.w	800a710 <_vfiprintf_r+0x1ec>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5dc:	f10a 0a01 	add.w	sl, sl, #1
 800a5e0:	9304      	str	r3, [sp, #16]
 800a5e2:	9307      	str	r3, [sp, #28]
 800a5e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5ea:	4654      	mov	r4, sl
 800a5ec:	2205      	movs	r2, #5
 800a5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f2:	4853      	ldr	r0, [pc, #332]	@ (800a740 <_vfiprintf_r+0x21c>)
 800a5f4:	f7f5 fdec 	bl	80001d0 <memchr>
 800a5f8:	9a04      	ldr	r2, [sp, #16]
 800a5fa:	b9d8      	cbnz	r0, 800a634 <_vfiprintf_r+0x110>
 800a5fc:	06d1      	lsls	r1, r2, #27
 800a5fe:	bf44      	itt	mi
 800a600:	2320      	movmi	r3, #32
 800a602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a606:	0713      	lsls	r3, r2, #28
 800a608:	bf44      	itt	mi
 800a60a:	232b      	movmi	r3, #43	@ 0x2b
 800a60c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a610:	f89a 3000 	ldrb.w	r3, [sl]
 800a614:	2b2a      	cmp	r3, #42	@ 0x2a
 800a616:	d015      	beq.n	800a644 <_vfiprintf_r+0x120>
 800a618:	9a07      	ldr	r2, [sp, #28]
 800a61a:	4654      	mov	r4, sl
 800a61c:	2000      	movs	r0, #0
 800a61e:	f04f 0c0a 	mov.w	ip, #10
 800a622:	4621      	mov	r1, r4
 800a624:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a628:	3b30      	subs	r3, #48	@ 0x30
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	d94b      	bls.n	800a6c6 <_vfiprintf_r+0x1a2>
 800a62e:	b1b0      	cbz	r0, 800a65e <_vfiprintf_r+0x13a>
 800a630:	9207      	str	r2, [sp, #28]
 800a632:	e014      	b.n	800a65e <_vfiprintf_r+0x13a>
 800a634:	eba0 0308 	sub.w	r3, r0, r8
 800a638:	fa09 f303 	lsl.w	r3, r9, r3
 800a63c:	4313      	orrs	r3, r2
 800a63e:	9304      	str	r3, [sp, #16]
 800a640:	46a2      	mov	sl, r4
 800a642:	e7d2      	b.n	800a5ea <_vfiprintf_r+0xc6>
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	1d19      	adds	r1, r3, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	9103      	str	r1, [sp, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	bfbb      	ittet	lt
 800a650:	425b      	neglt	r3, r3
 800a652:	f042 0202 	orrlt.w	r2, r2, #2
 800a656:	9307      	strge	r3, [sp, #28]
 800a658:	9307      	strlt	r3, [sp, #28]
 800a65a:	bfb8      	it	lt
 800a65c:	9204      	strlt	r2, [sp, #16]
 800a65e:	7823      	ldrb	r3, [r4, #0]
 800a660:	2b2e      	cmp	r3, #46	@ 0x2e
 800a662:	d10a      	bne.n	800a67a <_vfiprintf_r+0x156>
 800a664:	7863      	ldrb	r3, [r4, #1]
 800a666:	2b2a      	cmp	r3, #42	@ 0x2a
 800a668:	d132      	bne.n	800a6d0 <_vfiprintf_r+0x1ac>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	9203      	str	r2, [sp, #12]
 800a672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a676:	3402      	adds	r4, #2
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a750 <_vfiprintf_r+0x22c>
 800a67e:	7821      	ldrb	r1, [r4, #0]
 800a680:	2203      	movs	r2, #3
 800a682:	4650      	mov	r0, sl
 800a684:	f7f5 fda4 	bl	80001d0 <memchr>
 800a688:	b138      	cbz	r0, 800a69a <_vfiprintf_r+0x176>
 800a68a:	9b04      	ldr	r3, [sp, #16]
 800a68c:	eba0 000a 	sub.w	r0, r0, sl
 800a690:	2240      	movs	r2, #64	@ 0x40
 800a692:	4082      	lsls	r2, r0
 800a694:	4313      	orrs	r3, r2
 800a696:	3401      	adds	r4, #1
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69e:	4829      	ldr	r0, [pc, #164]	@ (800a744 <_vfiprintf_r+0x220>)
 800a6a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6a4:	2206      	movs	r2, #6
 800a6a6:	f7f5 fd93 	bl	80001d0 <memchr>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d03f      	beq.n	800a72e <_vfiprintf_r+0x20a>
 800a6ae:	4b26      	ldr	r3, [pc, #152]	@ (800a748 <_vfiprintf_r+0x224>)
 800a6b0:	bb1b      	cbnz	r3, 800a6fa <_vfiprintf_r+0x1d6>
 800a6b2:	9b03      	ldr	r3, [sp, #12]
 800a6b4:	3307      	adds	r3, #7
 800a6b6:	f023 0307 	bic.w	r3, r3, #7
 800a6ba:	3308      	adds	r3, #8
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c0:	443b      	add	r3, r7
 800a6c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6c4:	e76a      	b.n	800a59c <_vfiprintf_r+0x78>
 800a6c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	e7a8      	b.n	800a622 <_vfiprintf_r+0xfe>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	3401      	adds	r4, #1
 800a6d4:	9305      	str	r3, [sp, #20]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	f04f 0c0a 	mov.w	ip, #10
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e2:	3a30      	subs	r2, #48	@ 0x30
 800a6e4:	2a09      	cmp	r2, #9
 800a6e6:	d903      	bls.n	800a6f0 <_vfiprintf_r+0x1cc>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0c6      	beq.n	800a67a <_vfiprintf_r+0x156>
 800a6ec:	9105      	str	r1, [sp, #20]
 800a6ee:	e7c4      	b.n	800a67a <_vfiprintf_r+0x156>
 800a6f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7f0      	b.n	800a6dc <_vfiprintf_r+0x1b8>
 800a6fa:	ab03      	add	r3, sp, #12
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	462a      	mov	r2, r5
 800a700:	4b12      	ldr	r3, [pc, #72]	@ (800a74c <_vfiprintf_r+0x228>)
 800a702:	a904      	add	r1, sp, #16
 800a704:	4630      	mov	r0, r6
 800a706:	f7fe fa0f 	bl	8008b28 <_printf_float>
 800a70a:	4607      	mov	r7, r0
 800a70c:	1c78      	adds	r0, r7, #1
 800a70e:	d1d6      	bne.n	800a6be <_vfiprintf_r+0x19a>
 800a710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a712:	07d9      	lsls	r1, r3, #31
 800a714:	d405      	bmi.n	800a722 <_vfiprintf_r+0x1fe>
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	059a      	lsls	r2, r3, #22
 800a71a:	d402      	bmi.n	800a722 <_vfiprintf_r+0x1fe>
 800a71c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a71e:	f7fe ff15 	bl	800954c <__retarget_lock_release_recursive>
 800a722:	89ab      	ldrh	r3, [r5, #12]
 800a724:	065b      	lsls	r3, r3, #25
 800a726:	f53f af1f 	bmi.w	800a568 <_vfiprintf_r+0x44>
 800a72a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a72c:	e71e      	b.n	800a56c <_vfiprintf_r+0x48>
 800a72e:	ab03      	add	r3, sp, #12
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	462a      	mov	r2, r5
 800a734:	4b05      	ldr	r3, [pc, #20]	@ (800a74c <_vfiprintf_r+0x228>)
 800a736:	a904      	add	r1, sp, #16
 800a738:	4630      	mov	r0, r6
 800a73a:	f7fe fc8d 	bl	8009058 <_printf_i>
 800a73e:	e7e4      	b.n	800a70a <_vfiprintf_r+0x1e6>
 800a740:	0800c8a5 	.word	0x0800c8a5
 800a744:	0800c8af 	.word	0x0800c8af
 800a748:	08008b29 	.word	0x08008b29
 800a74c:	0800a4ff 	.word	0x0800a4ff
 800a750:	0800c8ab 	.word	0x0800c8ab

0800a754 <malloc>:
 800a754:	4b02      	ldr	r3, [pc, #8]	@ (800a760 <malloc+0xc>)
 800a756:	4601      	mov	r1, r0
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	f000 b825 	b.w	800a7a8 <_malloc_r>
 800a75e:	bf00      	nop
 800a760:	20000024 	.word	0x20000024

0800a764 <sbrk_aligned>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4e0f      	ldr	r6, [pc, #60]	@ (800a7a4 <sbrk_aligned+0x40>)
 800a768:	460c      	mov	r4, r1
 800a76a:	6831      	ldr	r1, [r6, #0]
 800a76c:	4605      	mov	r5, r0
 800a76e:	b911      	cbnz	r1, 800a776 <sbrk_aligned+0x12>
 800a770:	f000 fed6 	bl	800b520 <_sbrk_r>
 800a774:	6030      	str	r0, [r6, #0]
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 fed1 	bl	800b520 <_sbrk_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d103      	bne.n	800a78a <sbrk_aligned+0x26>
 800a782:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a786:	4620      	mov	r0, r4
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	1cc4      	adds	r4, r0, #3
 800a78c:	f024 0403 	bic.w	r4, r4, #3
 800a790:	42a0      	cmp	r0, r4
 800a792:	d0f8      	beq.n	800a786 <sbrk_aligned+0x22>
 800a794:	1a21      	subs	r1, r4, r0
 800a796:	4628      	mov	r0, r5
 800a798:	f000 fec2 	bl	800b520 <_sbrk_r>
 800a79c:	3001      	adds	r0, #1
 800a79e:	d1f2      	bne.n	800a786 <sbrk_aligned+0x22>
 800a7a0:	e7ef      	b.n	800a782 <sbrk_aligned+0x1e>
 800a7a2:	bf00      	nop
 800a7a4:	20000b5c 	.word	0x20000b5c

0800a7a8 <_malloc_r>:
 800a7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	1ccd      	adds	r5, r1, #3
 800a7ae:	f025 0503 	bic.w	r5, r5, #3
 800a7b2:	3508      	adds	r5, #8
 800a7b4:	2d0c      	cmp	r5, #12
 800a7b6:	bf38      	it	cc
 800a7b8:	250c      	movcc	r5, #12
 800a7ba:	2d00      	cmp	r5, #0
 800a7bc:	4606      	mov	r6, r0
 800a7be:	db01      	blt.n	800a7c4 <_malloc_r+0x1c>
 800a7c0:	42a9      	cmp	r1, r5
 800a7c2:	d904      	bls.n	800a7ce <_malloc_r+0x26>
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	6033      	str	r3, [r6, #0]
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8a4 <_malloc_r+0xfc>
 800a7d2:	f000 f915 	bl	800aa00 <__malloc_lock>
 800a7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7da:	461c      	mov	r4, r3
 800a7dc:	bb44      	cbnz	r4, 800a830 <_malloc_r+0x88>
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffbf 	bl	800a764 <sbrk_aligned>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	d158      	bne.n	800a89e <_malloc_r+0xf6>
 800a7ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a7f0:	4627      	mov	r7, r4
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d143      	bne.n	800a87e <_malloc_r+0xd6>
 800a7f6:	2c00      	cmp	r4, #0
 800a7f8:	d04b      	beq.n	800a892 <_malloc_r+0xea>
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	4630      	mov	r0, r6
 800a800:	eb04 0903 	add.w	r9, r4, r3
 800a804:	f000 fe8c 	bl	800b520 <_sbrk_r>
 800a808:	4581      	cmp	r9, r0
 800a80a:	d142      	bne.n	800a892 <_malloc_r+0xea>
 800a80c:	6821      	ldr	r1, [r4, #0]
 800a80e:	1a6d      	subs	r5, r5, r1
 800a810:	4629      	mov	r1, r5
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff ffa6 	bl	800a764 <sbrk_aligned>
 800a818:	3001      	adds	r0, #1
 800a81a:	d03a      	beq.n	800a892 <_malloc_r+0xea>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	442b      	add	r3, r5
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	f8d8 3000 	ldr.w	r3, [r8]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	bb62      	cbnz	r2, 800a884 <_malloc_r+0xdc>
 800a82a:	f8c8 7000 	str.w	r7, [r8]
 800a82e:	e00f      	b.n	800a850 <_malloc_r+0xa8>
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	1b52      	subs	r2, r2, r5
 800a834:	d420      	bmi.n	800a878 <_malloc_r+0xd0>
 800a836:	2a0b      	cmp	r2, #11
 800a838:	d917      	bls.n	800a86a <_malloc_r+0xc2>
 800a83a:	1961      	adds	r1, r4, r5
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	6025      	str	r5, [r4, #0]
 800a840:	bf18      	it	ne
 800a842:	6059      	strne	r1, [r3, #4]
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	bf08      	it	eq
 800a848:	f8c8 1000 	streq.w	r1, [r8]
 800a84c:	5162      	str	r2, [r4, r5]
 800a84e:	604b      	str	r3, [r1, #4]
 800a850:	4630      	mov	r0, r6
 800a852:	f000 f8db 	bl	800aa0c <__malloc_unlock>
 800a856:	f104 000b 	add.w	r0, r4, #11
 800a85a:	1d23      	adds	r3, r4, #4
 800a85c:	f020 0007 	bic.w	r0, r0, #7
 800a860:	1ac2      	subs	r2, r0, r3
 800a862:	bf1c      	itt	ne
 800a864:	1a1b      	subne	r3, r3, r0
 800a866:	50a3      	strne	r3, [r4, r2]
 800a868:	e7af      	b.n	800a7ca <_malloc_r+0x22>
 800a86a:	6862      	ldr	r2, [r4, #4]
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	bf0c      	ite	eq
 800a870:	f8c8 2000 	streq.w	r2, [r8]
 800a874:	605a      	strne	r2, [r3, #4]
 800a876:	e7eb      	b.n	800a850 <_malloc_r+0xa8>
 800a878:	4623      	mov	r3, r4
 800a87a:	6864      	ldr	r4, [r4, #4]
 800a87c:	e7ae      	b.n	800a7dc <_malloc_r+0x34>
 800a87e:	463c      	mov	r4, r7
 800a880:	687f      	ldr	r7, [r7, #4]
 800a882:	e7b6      	b.n	800a7f2 <_malloc_r+0x4a>
 800a884:	461a      	mov	r2, r3
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d1fb      	bne.n	800a884 <_malloc_r+0xdc>
 800a88c:	2300      	movs	r3, #0
 800a88e:	6053      	str	r3, [r2, #4]
 800a890:	e7de      	b.n	800a850 <_malloc_r+0xa8>
 800a892:	230c      	movs	r3, #12
 800a894:	6033      	str	r3, [r6, #0]
 800a896:	4630      	mov	r0, r6
 800a898:	f000 f8b8 	bl	800aa0c <__malloc_unlock>
 800a89c:	e794      	b.n	800a7c8 <_malloc_r+0x20>
 800a89e:	6005      	str	r5, [r0, #0]
 800a8a0:	e7d6      	b.n	800a850 <_malloc_r+0xa8>
 800a8a2:	bf00      	nop
 800a8a4:	20000b60 	.word	0x20000b60

0800a8a8 <__sflush_r>:
 800a8a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b0:	0716      	lsls	r6, r2, #28
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	d454      	bmi.n	800a962 <__sflush_r+0xba>
 800a8b8:	684b      	ldr	r3, [r1, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	dc02      	bgt.n	800a8c4 <__sflush_r+0x1c>
 800a8be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dd48      	ble.n	800a956 <__sflush_r+0xae>
 800a8c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d045      	beq.n	800a956 <__sflush_r+0xae>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8d0:	682f      	ldr	r7, [r5, #0]
 800a8d2:	6a21      	ldr	r1, [r4, #32]
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	d030      	beq.n	800a93a <__sflush_r+0x92>
 800a8d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	0759      	lsls	r1, r3, #29
 800a8de:	d505      	bpl.n	800a8ec <__sflush_r+0x44>
 800a8e0:	6863      	ldr	r3, [r4, #4]
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8e6:	b10b      	cbz	r3, 800a8ec <__sflush_r+0x44>
 800a8e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f0:	6a21      	ldr	r1, [r4, #32]
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	47b0      	blx	r6
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	d106      	bne.n	800a90a <__sflush_r+0x62>
 800a8fc:	6829      	ldr	r1, [r5, #0]
 800a8fe:	291d      	cmp	r1, #29
 800a900:	d82b      	bhi.n	800a95a <__sflush_r+0xb2>
 800a902:	4a2a      	ldr	r2, [pc, #168]	@ (800a9ac <__sflush_r+0x104>)
 800a904:	410a      	asrs	r2, r1
 800a906:	07d6      	lsls	r6, r2, #31
 800a908:	d427      	bmi.n	800a95a <__sflush_r+0xb2>
 800a90a:	2200      	movs	r2, #0
 800a90c:	6062      	str	r2, [r4, #4]
 800a90e:	04d9      	lsls	r1, r3, #19
 800a910:	6922      	ldr	r2, [r4, #16]
 800a912:	6022      	str	r2, [r4, #0]
 800a914:	d504      	bpl.n	800a920 <__sflush_r+0x78>
 800a916:	1c42      	adds	r2, r0, #1
 800a918:	d101      	bne.n	800a91e <__sflush_r+0x76>
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	b903      	cbnz	r3, 800a920 <__sflush_r+0x78>
 800a91e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a922:	602f      	str	r7, [r5, #0]
 800a924:	b1b9      	cbz	r1, 800a956 <__sflush_r+0xae>
 800a926:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a92a:	4299      	cmp	r1, r3
 800a92c:	d002      	beq.n	800a934 <__sflush_r+0x8c>
 800a92e:	4628      	mov	r0, r5
 800a930:	f000 fe2c 	bl	800b58c <_free_r>
 800a934:	2300      	movs	r3, #0
 800a936:	6363      	str	r3, [r4, #52]	@ 0x34
 800a938:	e00d      	b.n	800a956 <__sflush_r+0xae>
 800a93a:	2301      	movs	r3, #1
 800a93c:	4628      	mov	r0, r5
 800a93e:	47b0      	blx	r6
 800a940:	4602      	mov	r2, r0
 800a942:	1c50      	adds	r0, r2, #1
 800a944:	d1c9      	bne.n	800a8da <__sflush_r+0x32>
 800a946:	682b      	ldr	r3, [r5, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0c6      	beq.n	800a8da <__sflush_r+0x32>
 800a94c:	2b1d      	cmp	r3, #29
 800a94e:	d001      	beq.n	800a954 <__sflush_r+0xac>
 800a950:	2b16      	cmp	r3, #22
 800a952:	d11e      	bne.n	800a992 <__sflush_r+0xea>
 800a954:	602f      	str	r7, [r5, #0]
 800a956:	2000      	movs	r0, #0
 800a958:	e022      	b.n	800a9a0 <__sflush_r+0xf8>
 800a95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a95e:	b21b      	sxth	r3, r3
 800a960:	e01b      	b.n	800a99a <__sflush_r+0xf2>
 800a962:	690f      	ldr	r7, [r1, #16]
 800a964:	2f00      	cmp	r7, #0
 800a966:	d0f6      	beq.n	800a956 <__sflush_r+0xae>
 800a968:	0793      	lsls	r3, r2, #30
 800a96a:	680e      	ldr	r6, [r1, #0]
 800a96c:	bf08      	it	eq
 800a96e:	694b      	ldreq	r3, [r1, #20]
 800a970:	600f      	str	r7, [r1, #0]
 800a972:	bf18      	it	ne
 800a974:	2300      	movne	r3, #0
 800a976:	eba6 0807 	sub.w	r8, r6, r7
 800a97a:	608b      	str	r3, [r1, #8]
 800a97c:	f1b8 0f00 	cmp.w	r8, #0
 800a980:	dde9      	ble.n	800a956 <__sflush_r+0xae>
 800a982:	6a21      	ldr	r1, [r4, #32]
 800a984:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a986:	4643      	mov	r3, r8
 800a988:	463a      	mov	r2, r7
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b0      	blx	r6
 800a98e:	2800      	cmp	r0, #0
 800a990:	dc08      	bgt.n	800a9a4 <__sflush_r+0xfc>
 800a992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a4:	4407      	add	r7, r0
 800a9a6:	eba8 0800 	sub.w	r8, r8, r0
 800a9aa:	e7e7      	b.n	800a97c <__sflush_r+0xd4>
 800a9ac:	dfbffffe 	.word	0xdfbffffe

0800a9b0 <_fflush_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	690b      	ldr	r3, [r1, #16]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	b913      	cbnz	r3, 800a9c0 <_fflush_r+0x10>
 800a9ba:	2500      	movs	r5, #0
 800a9bc:	4628      	mov	r0, r5
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	b118      	cbz	r0, 800a9ca <_fflush_r+0x1a>
 800a9c2:	6a03      	ldr	r3, [r0, #32]
 800a9c4:	b90b      	cbnz	r3, 800a9ca <_fflush_r+0x1a>
 800a9c6:	f7fe fd27 	bl	8009418 <__sinit>
 800a9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0f3      	beq.n	800a9ba <_fflush_r+0xa>
 800a9d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9d4:	07d0      	lsls	r0, r2, #31
 800a9d6:	d404      	bmi.n	800a9e2 <_fflush_r+0x32>
 800a9d8:	0599      	lsls	r1, r3, #22
 800a9da:	d402      	bmi.n	800a9e2 <_fflush_r+0x32>
 800a9dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9de:	f7fe fdb4 	bl	800954a <__retarget_lock_acquire_recursive>
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	f7ff ff5f 	bl	800a8a8 <__sflush_r>
 800a9ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ec:	07da      	lsls	r2, r3, #31
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	d4e4      	bmi.n	800a9bc <_fflush_r+0xc>
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	059b      	lsls	r3, r3, #22
 800a9f6:	d4e1      	bmi.n	800a9bc <_fflush_r+0xc>
 800a9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fa:	f7fe fda7 	bl	800954c <__retarget_lock_release_recursive>
 800a9fe:	e7dd      	b.n	800a9bc <_fflush_r+0xc>

0800aa00 <__malloc_lock>:
 800aa00:	4801      	ldr	r0, [pc, #4]	@ (800aa08 <__malloc_lock+0x8>)
 800aa02:	f7fe bda2 	b.w	800954a <__retarget_lock_acquire_recursive>
 800aa06:	bf00      	nop
 800aa08:	20000b58 	.word	0x20000b58

0800aa0c <__malloc_unlock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	@ (800aa14 <__malloc_unlock+0x8>)
 800aa0e:	f7fe bd9d 	b.w	800954c <__retarget_lock_release_recursive>
 800aa12:	bf00      	nop
 800aa14:	20000b58 	.word	0x20000b58

0800aa18 <_Balloc>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	69c6      	ldr	r6, [r0, #28]
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	460d      	mov	r5, r1
 800aa20:	b976      	cbnz	r6, 800aa40 <_Balloc+0x28>
 800aa22:	2010      	movs	r0, #16
 800aa24:	f7ff fe96 	bl	800a754 <malloc>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	61e0      	str	r0, [r4, #28]
 800aa2c:	b920      	cbnz	r0, 800aa38 <_Balloc+0x20>
 800aa2e:	4b18      	ldr	r3, [pc, #96]	@ (800aa90 <_Balloc+0x78>)
 800aa30:	4818      	ldr	r0, [pc, #96]	@ (800aa94 <_Balloc+0x7c>)
 800aa32:	216b      	movs	r1, #107	@ 0x6b
 800aa34:	f7fd ffba 	bl	80089ac <__assert_func>
 800aa38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa3c:	6006      	str	r6, [r0, #0]
 800aa3e:	60c6      	str	r6, [r0, #12]
 800aa40:	69e6      	ldr	r6, [r4, #28]
 800aa42:	68f3      	ldr	r3, [r6, #12]
 800aa44:	b183      	cbz	r3, 800aa68 <_Balloc+0x50>
 800aa46:	69e3      	ldr	r3, [r4, #28]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa4e:	b9b8      	cbnz	r0, 800aa80 <_Balloc+0x68>
 800aa50:	2101      	movs	r1, #1
 800aa52:	fa01 f605 	lsl.w	r6, r1, r5
 800aa56:	1d72      	adds	r2, r6, #5
 800aa58:	0092      	lsls	r2, r2, #2
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fd82 	bl	800b564 <_calloc_r>
 800aa60:	b160      	cbz	r0, 800aa7c <_Balloc+0x64>
 800aa62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa66:	e00e      	b.n	800aa86 <_Balloc+0x6e>
 800aa68:	2221      	movs	r2, #33	@ 0x21
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fd79 	bl	800b564 <_calloc_r>
 800aa72:	69e3      	ldr	r3, [r4, #28]
 800aa74:	60f0      	str	r0, [r6, #12]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e4      	bne.n	800aa46 <_Balloc+0x2e>
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	6802      	ldr	r2, [r0, #0]
 800aa82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa86:	2300      	movs	r3, #0
 800aa88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa8c:	e7f7      	b.n	800aa7e <_Balloc+0x66>
 800aa8e:	bf00      	nop
 800aa90:	0800c825 	.word	0x0800c825
 800aa94:	0800c8b6 	.word	0x0800c8b6

0800aa98 <_Bfree>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	69c6      	ldr	r6, [r0, #28]
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	b976      	cbnz	r6, 800aac0 <_Bfree+0x28>
 800aaa2:	2010      	movs	r0, #16
 800aaa4:	f7ff fe56 	bl	800a754 <malloc>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	61e8      	str	r0, [r5, #28]
 800aaac:	b920      	cbnz	r0, 800aab8 <_Bfree+0x20>
 800aaae:	4b09      	ldr	r3, [pc, #36]	@ (800aad4 <_Bfree+0x3c>)
 800aab0:	4809      	ldr	r0, [pc, #36]	@ (800aad8 <_Bfree+0x40>)
 800aab2:	218f      	movs	r1, #143	@ 0x8f
 800aab4:	f7fd ff7a 	bl	80089ac <__assert_func>
 800aab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aabc:	6006      	str	r6, [r0, #0]
 800aabe:	60c6      	str	r6, [r0, #12]
 800aac0:	b13c      	cbz	r4, 800aad2 <_Bfree+0x3a>
 800aac2:	69eb      	ldr	r3, [r5, #28]
 800aac4:	6862      	ldr	r2, [r4, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aacc:	6021      	str	r1, [r4, #0]
 800aace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	0800c825 	.word	0x0800c825
 800aad8:	0800c8b6 	.word	0x0800c8b6

0800aadc <__multadd>:
 800aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae0:	690d      	ldr	r5, [r1, #16]
 800aae2:	4607      	mov	r7, r0
 800aae4:	460c      	mov	r4, r1
 800aae6:	461e      	mov	r6, r3
 800aae8:	f101 0c14 	add.w	ip, r1, #20
 800aaec:	2000      	movs	r0, #0
 800aaee:	f8dc 3000 	ldr.w	r3, [ip]
 800aaf2:	b299      	uxth	r1, r3
 800aaf4:	fb02 6101 	mla	r1, r2, r1, r6
 800aaf8:	0c1e      	lsrs	r6, r3, #16
 800aafa:	0c0b      	lsrs	r3, r1, #16
 800aafc:	fb02 3306 	mla	r3, r2, r6, r3
 800ab00:	b289      	uxth	r1, r1
 800ab02:	3001      	adds	r0, #1
 800ab04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab08:	4285      	cmp	r5, r0
 800ab0a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab12:	dcec      	bgt.n	800aaee <__multadd+0x12>
 800ab14:	b30e      	cbz	r6, 800ab5a <__multadd+0x7e>
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	dc19      	bgt.n	800ab50 <__multadd+0x74>
 800ab1c:	6861      	ldr	r1, [r4, #4]
 800ab1e:	4638      	mov	r0, r7
 800ab20:	3101      	adds	r1, #1
 800ab22:	f7ff ff79 	bl	800aa18 <_Balloc>
 800ab26:	4680      	mov	r8, r0
 800ab28:	b928      	cbnz	r0, 800ab36 <__multadd+0x5a>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab60 <__multadd+0x84>)
 800ab2e:	480d      	ldr	r0, [pc, #52]	@ (800ab64 <__multadd+0x88>)
 800ab30:	21ba      	movs	r1, #186	@ 0xba
 800ab32:	f7fd ff3b 	bl	80089ac <__assert_func>
 800ab36:	6922      	ldr	r2, [r4, #16]
 800ab38:	3202      	adds	r2, #2
 800ab3a:	f104 010c 	add.w	r1, r4, #12
 800ab3e:	0092      	lsls	r2, r2, #2
 800ab40:	300c      	adds	r0, #12
 800ab42:	f7fe fd04 	bl	800954e <memcpy>
 800ab46:	4621      	mov	r1, r4
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7ff ffa5 	bl	800aa98 <_Bfree>
 800ab4e:	4644      	mov	r4, r8
 800ab50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab54:	3501      	adds	r5, #1
 800ab56:	615e      	str	r6, [r3, #20]
 800ab58:	6125      	str	r5, [r4, #16]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	0800c894 	.word	0x0800c894
 800ab64:	0800c8b6 	.word	0x0800c8b6

0800ab68 <__hi0bits>:
 800ab68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	bf36      	itet	cc
 800ab70:	0403      	lslcc	r3, r0, #16
 800ab72:	2000      	movcs	r0, #0
 800ab74:	2010      	movcc	r0, #16
 800ab76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab7a:	bf3c      	itt	cc
 800ab7c:	021b      	lslcc	r3, r3, #8
 800ab7e:	3008      	addcc	r0, #8
 800ab80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab84:	bf3c      	itt	cc
 800ab86:	011b      	lslcc	r3, r3, #4
 800ab88:	3004      	addcc	r0, #4
 800ab8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab8e:	bf3c      	itt	cc
 800ab90:	009b      	lslcc	r3, r3, #2
 800ab92:	3002      	addcc	r0, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	db05      	blt.n	800aba4 <__hi0bits+0x3c>
 800ab98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab9c:	f100 0001 	add.w	r0, r0, #1
 800aba0:	bf08      	it	eq
 800aba2:	2020      	moveq	r0, #32
 800aba4:	4770      	bx	lr

0800aba6 <__lo0bits>:
 800aba6:	6803      	ldr	r3, [r0, #0]
 800aba8:	4602      	mov	r2, r0
 800abaa:	f013 0007 	ands.w	r0, r3, #7
 800abae:	d00b      	beq.n	800abc8 <__lo0bits+0x22>
 800abb0:	07d9      	lsls	r1, r3, #31
 800abb2:	d421      	bmi.n	800abf8 <__lo0bits+0x52>
 800abb4:	0798      	lsls	r0, r3, #30
 800abb6:	bf49      	itett	mi
 800abb8:	085b      	lsrmi	r3, r3, #1
 800abba:	089b      	lsrpl	r3, r3, #2
 800abbc:	2001      	movmi	r0, #1
 800abbe:	6013      	strmi	r3, [r2, #0]
 800abc0:	bf5c      	itt	pl
 800abc2:	6013      	strpl	r3, [r2, #0]
 800abc4:	2002      	movpl	r0, #2
 800abc6:	4770      	bx	lr
 800abc8:	b299      	uxth	r1, r3
 800abca:	b909      	cbnz	r1, 800abd0 <__lo0bits+0x2a>
 800abcc:	0c1b      	lsrs	r3, r3, #16
 800abce:	2010      	movs	r0, #16
 800abd0:	b2d9      	uxtb	r1, r3
 800abd2:	b909      	cbnz	r1, 800abd8 <__lo0bits+0x32>
 800abd4:	3008      	adds	r0, #8
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	0719      	lsls	r1, r3, #28
 800abda:	bf04      	itt	eq
 800abdc:	091b      	lsreq	r3, r3, #4
 800abde:	3004      	addeq	r0, #4
 800abe0:	0799      	lsls	r1, r3, #30
 800abe2:	bf04      	itt	eq
 800abe4:	089b      	lsreq	r3, r3, #2
 800abe6:	3002      	addeq	r0, #2
 800abe8:	07d9      	lsls	r1, r3, #31
 800abea:	d403      	bmi.n	800abf4 <__lo0bits+0x4e>
 800abec:	085b      	lsrs	r3, r3, #1
 800abee:	f100 0001 	add.w	r0, r0, #1
 800abf2:	d003      	beq.n	800abfc <__lo0bits+0x56>
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	4770      	bx	lr
 800abf8:	2000      	movs	r0, #0
 800abfa:	4770      	bx	lr
 800abfc:	2020      	movs	r0, #32
 800abfe:	4770      	bx	lr

0800ac00 <__i2b>:
 800ac00:	b510      	push	{r4, lr}
 800ac02:	460c      	mov	r4, r1
 800ac04:	2101      	movs	r1, #1
 800ac06:	f7ff ff07 	bl	800aa18 <_Balloc>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	b928      	cbnz	r0, 800ac1a <__i2b+0x1a>
 800ac0e:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <__i2b+0x24>)
 800ac10:	4805      	ldr	r0, [pc, #20]	@ (800ac28 <__i2b+0x28>)
 800ac12:	f240 1145 	movw	r1, #325	@ 0x145
 800ac16:	f7fd fec9 	bl	80089ac <__assert_func>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	6144      	str	r4, [r0, #20]
 800ac1e:	6103      	str	r3, [r0, #16]
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	bf00      	nop
 800ac24:	0800c894 	.word	0x0800c894
 800ac28:	0800c8b6 	.word	0x0800c8b6

0800ac2c <__multiply>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	4614      	mov	r4, r2
 800ac32:	690a      	ldr	r2, [r1, #16]
 800ac34:	6923      	ldr	r3, [r4, #16]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	bfa8      	it	ge
 800ac3a:	4623      	movge	r3, r4
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	bfa4      	itt	ge
 800ac40:	460c      	movge	r4, r1
 800ac42:	461f      	movge	r7, r3
 800ac44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac4c:	68a3      	ldr	r3, [r4, #8]
 800ac4e:	6861      	ldr	r1, [r4, #4]
 800ac50:	eb0a 0609 	add.w	r6, sl, r9
 800ac54:	42b3      	cmp	r3, r6
 800ac56:	b085      	sub	sp, #20
 800ac58:	bfb8      	it	lt
 800ac5a:	3101      	addlt	r1, #1
 800ac5c:	f7ff fedc 	bl	800aa18 <_Balloc>
 800ac60:	b930      	cbnz	r0, 800ac70 <__multiply+0x44>
 800ac62:	4602      	mov	r2, r0
 800ac64:	4b44      	ldr	r3, [pc, #272]	@ (800ad78 <__multiply+0x14c>)
 800ac66:	4845      	ldr	r0, [pc, #276]	@ (800ad7c <__multiply+0x150>)
 800ac68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac6c:	f7fd fe9e 	bl	80089ac <__assert_func>
 800ac70:	f100 0514 	add.w	r5, r0, #20
 800ac74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac78:	462b      	mov	r3, r5
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4543      	cmp	r3, r8
 800ac7e:	d321      	bcc.n	800acc4 <__multiply+0x98>
 800ac80:	f107 0114 	add.w	r1, r7, #20
 800ac84:	f104 0214 	add.w	r2, r4, #20
 800ac88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac90:	9302      	str	r3, [sp, #8]
 800ac92:	1b13      	subs	r3, r2, r4
 800ac94:	3b15      	subs	r3, #21
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	f104 0715 	add.w	r7, r4, #21
 800aca0:	42ba      	cmp	r2, r7
 800aca2:	bf38      	it	cc
 800aca4:	2304      	movcc	r3, #4
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	9b02      	ldr	r3, [sp, #8]
 800acaa:	9103      	str	r1, [sp, #12]
 800acac:	428b      	cmp	r3, r1
 800acae:	d80c      	bhi.n	800acca <__multiply+0x9e>
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	dd03      	ble.n	800acbc <__multiply+0x90>
 800acb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d05b      	beq.n	800ad74 <__multiply+0x148>
 800acbc:	6106      	str	r6, [r0, #16]
 800acbe:	b005      	add	sp, #20
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	f843 2b04 	str.w	r2, [r3], #4
 800acc8:	e7d8      	b.n	800ac7c <__multiply+0x50>
 800acca:	f8b1 a000 	ldrh.w	sl, [r1]
 800acce:	f1ba 0f00 	cmp.w	sl, #0
 800acd2:	d024      	beq.n	800ad1e <__multiply+0xf2>
 800acd4:	f104 0e14 	add.w	lr, r4, #20
 800acd8:	46a9      	mov	r9, r5
 800acda:	f04f 0c00 	mov.w	ip, #0
 800acde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ace2:	f8d9 3000 	ldr.w	r3, [r9]
 800ace6:	fa1f fb87 	uxth.w	fp, r7
 800acea:	b29b      	uxth	r3, r3
 800acec:	fb0a 330b 	mla	r3, sl, fp, r3
 800acf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800acf4:	f8d9 7000 	ldr.w	r7, [r9]
 800acf8:	4463      	add	r3, ip
 800acfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acfe:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad0c:	4572      	cmp	r2, lr
 800ad0e:	f849 3b04 	str.w	r3, [r9], #4
 800ad12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad16:	d8e2      	bhi.n	800acde <__multiply+0xb2>
 800ad18:	9b01      	ldr	r3, [sp, #4]
 800ad1a:	f845 c003 	str.w	ip, [r5, r3]
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad24:	3104      	adds	r1, #4
 800ad26:	f1b9 0f00 	cmp.w	r9, #0
 800ad2a:	d021      	beq.n	800ad70 <__multiply+0x144>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	f104 0c14 	add.w	ip, r4, #20
 800ad32:	46ae      	mov	lr, r5
 800ad34:	f04f 0a00 	mov.w	sl, #0
 800ad38:	f8bc b000 	ldrh.w	fp, [ip]
 800ad3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad40:	fb09 770b 	mla	r7, r9, fp, r7
 800ad44:	4457      	add	r7, sl
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad4c:	f84e 3b04 	str.w	r3, [lr], #4
 800ad50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad58:	f8be 3000 	ldrh.w	r3, [lr]
 800ad5c:	fb09 330a 	mla	r3, r9, sl, r3
 800ad60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad64:	4562      	cmp	r2, ip
 800ad66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad6a:	d8e5      	bhi.n	800ad38 <__multiply+0x10c>
 800ad6c:	9f01      	ldr	r7, [sp, #4]
 800ad6e:	51eb      	str	r3, [r5, r7]
 800ad70:	3504      	adds	r5, #4
 800ad72:	e799      	b.n	800aca8 <__multiply+0x7c>
 800ad74:	3e01      	subs	r6, #1
 800ad76:	e79b      	b.n	800acb0 <__multiply+0x84>
 800ad78:	0800c894 	.word	0x0800c894
 800ad7c:	0800c8b6 	.word	0x0800c8b6

0800ad80 <__pow5mult>:
 800ad80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad84:	4615      	mov	r5, r2
 800ad86:	f012 0203 	ands.w	r2, r2, #3
 800ad8a:	4607      	mov	r7, r0
 800ad8c:	460e      	mov	r6, r1
 800ad8e:	d007      	beq.n	800ada0 <__pow5mult+0x20>
 800ad90:	4c25      	ldr	r4, [pc, #148]	@ (800ae28 <__pow5mult+0xa8>)
 800ad92:	3a01      	subs	r2, #1
 800ad94:	2300      	movs	r3, #0
 800ad96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad9a:	f7ff fe9f 	bl	800aadc <__multadd>
 800ad9e:	4606      	mov	r6, r0
 800ada0:	10ad      	asrs	r5, r5, #2
 800ada2:	d03d      	beq.n	800ae20 <__pow5mult+0xa0>
 800ada4:	69fc      	ldr	r4, [r7, #28]
 800ada6:	b97c      	cbnz	r4, 800adc8 <__pow5mult+0x48>
 800ada8:	2010      	movs	r0, #16
 800adaa:	f7ff fcd3 	bl	800a754 <malloc>
 800adae:	4602      	mov	r2, r0
 800adb0:	61f8      	str	r0, [r7, #28]
 800adb2:	b928      	cbnz	r0, 800adc0 <__pow5mult+0x40>
 800adb4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae2c <__pow5mult+0xac>)
 800adb6:	481e      	ldr	r0, [pc, #120]	@ (800ae30 <__pow5mult+0xb0>)
 800adb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800adbc:	f7fd fdf6 	bl	80089ac <__assert_func>
 800adc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adc4:	6004      	str	r4, [r0, #0]
 800adc6:	60c4      	str	r4, [r0, #12]
 800adc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800add0:	b94c      	cbnz	r4, 800ade6 <__pow5mult+0x66>
 800add2:	f240 2171 	movw	r1, #625	@ 0x271
 800add6:	4638      	mov	r0, r7
 800add8:	f7ff ff12 	bl	800ac00 <__i2b>
 800addc:	2300      	movs	r3, #0
 800adde:	f8c8 0008 	str.w	r0, [r8, #8]
 800ade2:	4604      	mov	r4, r0
 800ade4:	6003      	str	r3, [r0, #0]
 800ade6:	f04f 0900 	mov.w	r9, #0
 800adea:	07eb      	lsls	r3, r5, #31
 800adec:	d50a      	bpl.n	800ae04 <__pow5mult+0x84>
 800adee:	4631      	mov	r1, r6
 800adf0:	4622      	mov	r2, r4
 800adf2:	4638      	mov	r0, r7
 800adf4:	f7ff ff1a 	bl	800ac2c <__multiply>
 800adf8:	4631      	mov	r1, r6
 800adfa:	4680      	mov	r8, r0
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff fe4b 	bl	800aa98 <_Bfree>
 800ae02:	4646      	mov	r6, r8
 800ae04:	106d      	asrs	r5, r5, #1
 800ae06:	d00b      	beq.n	800ae20 <__pow5mult+0xa0>
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	b938      	cbnz	r0, 800ae1c <__pow5mult+0x9c>
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	4621      	mov	r1, r4
 800ae10:	4638      	mov	r0, r7
 800ae12:	f7ff ff0b 	bl	800ac2c <__multiply>
 800ae16:	6020      	str	r0, [r4, #0]
 800ae18:	f8c0 9000 	str.w	r9, [r0]
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	e7e4      	b.n	800adea <__pow5mult+0x6a>
 800ae20:	4630      	mov	r0, r6
 800ae22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae26:	bf00      	nop
 800ae28:	0800c910 	.word	0x0800c910
 800ae2c:	0800c825 	.word	0x0800c825
 800ae30:	0800c8b6 	.word	0x0800c8b6

0800ae34 <__lshift>:
 800ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae38:	460c      	mov	r4, r1
 800ae3a:	6849      	ldr	r1, [r1, #4]
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae42:	68a3      	ldr	r3, [r4, #8]
 800ae44:	4607      	mov	r7, r0
 800ae46:	4691      	mov	r9, r2
 800ae48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae4c:	f108 0601 	add.w	r6, r8, #1
 800ae50:	42b3      	cmp	r3, r6
 800ae52:	db0b      	blt.n	800ae6c <__lshift+0x38>
 800ae54:	4638      	mov	r0, r7
 800ae56:	f7ff fddf 	bl	800aa18 <_Balloc>
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	b948      	cbnz	r0, 800ae72 <__lshift+0x3e>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	4b28      	ldr	r3, [pc, #160]	@ (800af04 <__lshift+0xd0>)
 800ae62:	4829      	ldr	r0, [pc, #164]	@ (800af08 <__lshift+0xd4>)
 800ae64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae68:	f7fd fda0 	bl	80089ac <__assert_func>
 800ae6c:	3101      	adds	r1, #1
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	e7ee      	b.n	800ae50 <__lshift+0x1c>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f100 0114 	add.w	r1, r0, #20
 800ae78:	f100 0210 	add.w	r2, r0, #16
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	4553      	cmp	r3, sl
 800ae80:	db33      	blt.n	800aeea <__lshift+0xb6>
 800ae82:	6920      	ldr	r0, [r4, #16]
 800ae84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae88:	f104 0314 	add.w	r3, r4, #20
 800ae8c:	f019 091f 	ands.w	r9, r9, #31
 800ae90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae98:	d02b      	beq.n	800aef2 <__lshift+0xbe>
 800ae9a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae9e:	468a      	mov	sl, r1
 800aea0:	2200      	movs	r2, #0
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	fa00 f009 	lsl.w	r0, r0, r9
 800aea8:	4310      	orrs	r0, r2
 800aeaa:	f84a 0b04 	str.w	r0, [sl], #4
 800aeae:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb2:	459c      	cmp	ip, r3
 800aeb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aeb8:	d8f3      	bhi.n	800aea2 <__lshift+0x6e>
 800aeba:	ebac 0304 	sub.w	r3, ip, r4
 800aebe:	3b15      	subs	r3, #21
 800aec0:	f023 0303 	bic.w	r3, r3, #3
 800aec4:	3304      	adds	r3, #4
 800aec6:	f104 0015 	add.w	r0, r4, #21
 800aeca:	4584      	cmp	ip, r0
 800aecc:	bf38      	it	cc
 800aece:	2304      	movcc	r3, #4
 800aed0:	50ca      	str	r2, [r1, r3]
 800aed2:	b10a      	cbz	r2, 800aed8 <__lshift+0xa4>
 800aed4:	f108 0602 	add.w	r6, r8, #2
 800aed8:	3e01      	subs	r6, #1
 800aeda:	4638      	mov	r0, r7
 800aedc:	612e      	str	r6, [r5, #16]
 800aede:	4621      	mov	r1, r4
 800aee0:	f7ff fdda 	bl	800aa98 <_Bfree>
 800aee4:	4628      	mov	r0, r5
 800aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeea:	f842 0f04 	str.w	r0, [r2, #4]!
 800aeee:	3301      	adds	r3, #1
 800aef0:	e7c5      	b.n	800ae7e <__lshift+0x4a>
 800aef2:	3904      	subs	r1, #4
 800aef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aefc:	459c      	cmp	ip, r3
 800aefe:	d8f9      	bhi.n	800aef4 <__lshift+0xc0>
 800af00:	e7ea      	b.n	800aed8 <__lshift+0xa4>
 800af02:	bf00      	nop
 800af04:	0800c894 	.word	0x0800c894
 800af08:	0800c8b6 	.word	0x0800c8b6

0800af0c <__mcmp>:
 800af0c:	690a      	ldr	r2, [r1, #16]
 800af0e:	4603      	mov	r3, r0
 800af10:	6900      	ldr	r0, [r0, #16]
 800af12:	1a80      	subs	r0, r0, r2
 800af14:	b530      	push	{r4, r5, lr}
 800af16:	d10e      	bne.n	800af36 <__mcmp+0x2a>
 800af18:	3314      	adds	r3, #20
 800af1a:	3114      	adds	r1, #20
 800af1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af2c:	4295      	cmp	r5, r2
 800af2e:	d003      	beq.n	800af38 <__mcmp+0x2c>
 800af30:	d205      	bcs.n	800af3e <__mcmp+0x32>
 800af32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af36:	bd30      	pop	{r4, r5, pc}
 800af38:	42a3      	cmp	r3, r4
 800af3a:	d3f3      	bcc.n	800af24 <__mcmp+0x18>
 800af3c:	e7fb      	b.n	800af36 <__mcmp+0x2a>
 800af3e:	2001      	movs	r0, #1
 800af40:	e7f9      	b.n	800af36 <__mcmp+0x2a>
	...

0800af44 <__mdiff>:
 800af44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	4689      	mov	r9, r1
 800af4a:	4606      	mov	r6, r0
 800af4c:	4611      	mov	r1, r2
 800af4e:	4648      	mov	r0, r9
 800af50:	4614      	mov	r4, r2
 800af52:	f7ff ffdb 	bl	800af0c <__mcmp>
 800af56:	1e05      	subs	r5, r0, #0
 800af58:	d112      	bne.n	800af80 <__mdiff+0x3c>
 800af5a:	4629      	mov	r1, r5
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff fd5b 	bl	800aa18 <_Balloc>
 800af62:	4602      	mov	r2, r0
 800af64:	b928      	cbnz	r0, 800af72 <__mdiff+0x2e>
 800af66:	4b3f      	ldr	r3, [pc, #252]	@ (800b064 <__mdiff+0x120>)
 800af68:	f240 2137 	movw	r1, #567	@ 0x237
 800af6c:	483e      	ldr	r0, [pc, #248]	@ (800b068 <__mdiff+0x124>)
 800af6e:	f7fd fd1d 	bl	80089ac <__assert_func>
 800af72:	2301      	movs	r3, #1
 800af74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af78:	4610      	mov	r0, r2
 800af7a:	b003      	add	sp, #12
 800af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af80:	bfbc      	itt	lt
 800af82:	464b      	movlt	r3, r9
 800af84:	46a1      	movlt	r9, r4
 800af86:	4630      	mov	r0, r6
 800af88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af8c:	bfba      	itte	lt
 800af8e:	461c      	movlt	r4, r3
 800af90:	2501      	movlt	r5, #1
 800af92:	2500      	movge	r5, #0
 800af94:	f7ff fd40 	bl	800aa18 <_Balloc>
 800af98:	4602      	mov	r2, r0
 800af9a:	b918      	cbnz	r0, 800afa4 <__mdiff+0x60>
 800af9c:	4b31      	ldr	r3, [pc, #196]	@ (800b064 <__mdiff+0x120>)
 800af9e:	f240 2145 	movw	r1, #581	@ 0x245
 800afa2:	e7e3      	b.n	800af6c <__mdiff+0x28>
 800afa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800afa8:	6926      	ldr	r6, [r4, #16]
 800afaa:	60c5      	str	r5, [r0, #12]
 800afac:	f109 0310 	add.w	r3, r9, #16
 800afb0:	f109 0514 	add.w	r5, r9, #20
 800afb4:	f104 0e14 	add.w	lr, r4, #20
 800afb8:	f100 0b14 	add.w	fp, r0, #20
 800afbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	46d9      	mov	r9, fp
 800afc8:	f04f 0c00 	mov.w	ip, #0
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	fa1f f38a 	uxth.w	r3, sl
 800afdc:	4619      	mov	r1, r3
 800afde:	b283      	uxth	r3, r0
 800afe0:	1acb      	subs	r3, r1, r3
 800afe2:	0c00      	lsrs	r0, r0, #16
 800afe4:	4463      	add	r3, ip
 800afe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800afee:	b29b      	uxth	r3, r3
 800aff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aff4:	4576      	cmp	r6, lr
 800aff6:	f849 3b04 	str.w	r3, [r9], #4
 800affa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800affe:	d8e5      	bhi.n	800afcc <__mdiff+0x88>
 800b000:	1b33      	subs	r3, r6, r4
 800b002:	3b15      	subs	r3, #21
 800b004:	f023 0303 	bic.w	r3, r3, #3
 800b008:	3415      	adds	r4, #21
 800b00a:	3304      	adds	r3, #4
 800b00c:	42a6      	cmp	r6, r4
 800b00e:	bf38      	it	cc
 800b010:	2304      	movcc	r3, #4
 800b012:	441d      	add	r5, r3
 800b014:	445b      	add	r3, fp
 800b016:	461e      	mov	r6, r3
 800b018:	462c      	mov	r4, r5
 800b01a:	4544      	cmp	r4, r8
 800b01c:	d30e      	bcc.n	800b03c <__mdiff+0xf8>
 800b01e:	f108 0103 	add.w	r1, r8, #3
 800b022:	1b49      	subs	r1, r1, r5
 800b024:	f021 0103 	bic.w	r1, r1, #3
 800b028:	3d03      	subs	r5, #3
 800b02a:	45a8      	cmp	r8, r5
 800b02c:	bf38      	it	cc
 800b02e:	2100      	movcc	r1, #0
 800b030:	440b      	add	r3, r1
 800b032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b036:	b191      	cbz	r1, 800b05e <__mdiff+0x11a>
 800b038:	6117      	str	r7, [r2, #16]
 800b03a:	e79d      	b.n	800af78 <__mdiff+0x34>
 800b03c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b040:	46e6      	mov	lr, ip
 800b042:	0c08      	lsrs	r0, r1, #16
 800b044:	fa1c fc81 	uxtah	ip, ip, r1
 800b048:	4471      	add	r1, lr
 800b04a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b04e:	b289      	uxth	r1, r1
 800b050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b054:	f846 1b04 	str.w	r1, [r6], #4
 800b058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b05c:	e7dd      	b.n	800b01a <__mdiff+0xd6>
 800b05e:	3f01      	subs	r7, #1
 800b060:	e7e7      	b.n	800b032 <__mdiff+0xee>
 800b062:	bf00      	nop
 800b064:	0800c894 	.word	0x0800c894
 800b068:	0800c8b6 	.word	0x0800c8b6

0800b06c <__d2b>:
 800b06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b070:	460f      	mov	r7, r1
 800b072:	2101      	movs	r1, #1
 800b074:	ec59 8b10 	vmov	r8, r9, d0
 800b078:	4616      	mov	r6, r2
 800b07a:	f7ff fccd 	bl	800aa18 <_Balloc>
 800b07e:	4604      	mov	r4, r0
 800b080:	b930      	cbnz	r0, 800b090 <__d2b+0x24>
 800b082:	4602      	mov	r2, r0
 800b084:	4b23      	ldr	r3, [pc, #140]	@ (800b114 <__d2b+0xa8>)
 800b086:	4824      	ldr	r0, [pc, #144]	@ (800b118 <__d2b+0xac>)
 800b088:	f240 310f 	movw	r1, #783	@ 0x30f
 800b08c:	f7fd fc8e 	bl	80089ac <__assert_func>
 800b090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b098:	b10d      	cbz	r5, 800b09e <__d2b+0x32>
 800b09a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	f1b8 0300 	subs.w	r3, r8, #0
 800b0a4:	d023      	beq.n	800b0ee <__d2b+0x82>
 800b0a6:	4668      	mov	r0, sp
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	f7ff fd7c 	bl	800aba6 <__lo0bits>
 800b0ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0b2:	b1d0      	cbz	r0, 800b0ea <__d2b+0x7e>
 800b0b4:	f1c0 0320 	rsb	r3, r0, #32
 800b0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	40c2      	lsrs	r2, r0
 800b0c0:	6163      	str	r3, [r4, #20]
 800b0c2:	9201      	str	r2, [sp, #4]
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	61a3      	str	r3, [r4, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bf0c      	ite	eq
 800b0cc:	2201      	moveq	r2, #1
 800b0ce:	2202      	movne	r2, #2
 800b0d0:	6122      	str	r2, [r4, #16]
 800b0d2:	b1a5      	cbz	r5, 800b0fe <__d2b+0x92>
 800b0d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0d8:	4405      	add	r5, r0
 800b0da:	603d      	str	r5, [r7, #0]
 800b0dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0e0:	6030      	str	r0, [r6, #0]
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	b003      	add	sp, #12
 800b0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	6161      	str	r1, [r4, #20]
 800b0ec:	e7ea      	b.n	800b0c4 <__d2b+0x58>
 800b0ee:	a801      	add	r0, sp, #4
 800b0f0:	f7ff fd59 	bl	800aba6 <__lo0bits>
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	6163      	str	r3, [r4, #20]
 800b0f8:	3020      	adds	r0, #32
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	e7e8      	b.n	800b0d0 <__d2b+0x64>
 800b0fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b106:	6038      	str	r0, [r7, #0]
 800b108:	6918      	ldr	r0, [r3, #16]
 800b10a:	f7ff fd2d 	bl	800ab68 <__hi0bits>
 800b10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b112:	e7e5      	b.n	800b0e0 <__d2b+0x74>
 800b114:	0800c894 	.word	0x0800c894
 800b118:	0800c8b6 	.word	0x0800c8b6

0800b11c <__sread>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	460c      	mov	r4, r1
 800b120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b124:	f000 f9d6 	bl	800b4d4 <_read_r>
 800b128:	2800      	cmp	r0, #0
 800b12a:	bfab      	itete	ge
 800b12c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b12e:	89a3      	ldrhlt	r3, [r4, #12]
 800b130:	181b      	addge	r3, r3, r0
 800b132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b136:	bfac      	ite	ge
 800b138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b13a:	81a3      	strhlt	r3, [r4, #12]
 800b13c:	bd10      	pop	{r4, pc}

0800b13e <__swrite>:
 800b13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b142:	461f      	mov	r7, r3
 800b144:	898b      	ldrh	r3, [r1, #12]
 800b146:	05db      	lsls	r3, r3, #23
 800b148:	4605      	mov	r5, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	4616      	mov	r6, r2
 800b14e:	d505      	bpl.n	800b15c <__swrite+0x1e>
 800b150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b154:	2302      	movs	r3, #2
 800b156:	2200      	movs	r2, #0
 800b158:	f000 f97a 	bl	800b450 <_lseek_r>
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	4632      	mov	r2, r6
 800b16a:	463b      	mov	r3, r7
 800b16c:	4628      	mov	r0, r5
 800b16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b172:	f000 b9e5 	b.w	800b540 <_write_r>

0800b176 <__sseek>:
 800b176:	b510      	push	{r4, lr}
 800b178:	460c      	mov	r4, r1
 800b17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17e:	f000 f967 	bl	800b450 <_lseek_r>
 800b182:	1c43      	adds	r3, r0, #1
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	bf15      	itete	ne
 800b188:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b18a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b18e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b192:	81a3      	strheq	r3, [r4, #12]
 800b194:	bf18      	it	ne
 800b196:	81a3      	strhne	r3, [r4, #12]
 800b198:	bd10      	pop	{r4, pc}

0800b19a <__sclose>:
 800b19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b19e:	f000 b925 	b.w	800b3ec <_close_r>

0800b1a2 <_realloc_r>:
 800b1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	4615      	mov	r5, r2
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	b921      	cbnz	r1, 800b1b8 <_realloc_r+0x16>
 800b1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	f7ff baf8 	b.w	800a7a8 <_malloc_r>
 800b1b8:	b92a      	cbnz	r2, 800b1c6 <_realloc_r+0x24>
 800b1ba:	f000 f9e7 	bl	800b58c <_free_r>
 800b1be:	2400      	movs	r4, #0
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c6:	f000 fa3d 	bl	800b644 <_malloc_usable_size_r>
 800b1ca:	4285      	cmp	r5, r0
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	d802      	bhi.n	800b1d6 <_realloc_r+0x34>
 800b1d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b1d4:	d8f4      	bhi.n	800b1c0 <_realloc_r+0x1e>
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4640      	mov	r0, r8
 800b1da:	f7ff fae5 	bl	800a7a8 <_malloc_r>
 800b1de:	4607      	mov	r7, r0
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d0ec      	beq.n	800b1be <_realloc_r+0x1c>
 800b1e4:	42b5      	cmp	r5, r6
 800b1e6:	462a      	mov	r2, r5
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	bf28      	it	cs
 800b1ec:	4632      	movcs	r2, r6
 800b1ee:	f7fe f9ae 	bl	800954e <memcpy>
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	f000 f9c9 	bl	800b58c <_free_r>
 800b1fa:	463c      	mov	r4, r7
 800b1fc:	e7e0      	b.n	800b1c0 <_realloc_r+0x1e>

0800b1fe <__swbuf_r>:
 800b1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b200:	460e      	mov	r6, r1
 800b202:	4614      	mov	r4, r2
 800b204:	4605      	mov	r5, r0
 800b206:	b118      	cbz	r0, 800b210 <__swbuf_r+0x12>
 800b208:	6a03      	ldr	r3, [r0, #32]
 800b20a:	b90b      	cbnz	r3, 800b210 <__swbuf_r+0x12>
 800b20c:	f7fe f904 	bl	8009418 <__sinit>
 800b210:	69a3      	ldr	r3, [r4, #24]
 800b212:	60a3      	str	r3, [r4, #8]
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	071a      	lsls	r2, r3, #28
 800b218:	d501      	bpl.n	800b21e <__swbuf_r+0x20>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	b943      	cbnz	r3, 800b230 <__swbuf_r+0x32>
 800b21e:	4621      	mov	r1, r4
 800b220:	4628      	mov	r0, r5
 800b222:	f000 f82b 	bl	800b27c <__swsetup_r>
 800b226:	b118      	cbz	r0, 800b230 <__swbuf_r+0x32>
 800b228:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b22c:	4638      	mov	r0, r7
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	6922      	ldr	r2, [r4, #16]
 800b234:	1a98      	subs	r0, r3, r2
 800b236:	6963      	ldr	r3, [r4, #20]
 800b238:	b2f6      	uxtb	r6, r6
 800b23a:	4283      	cmp	r3, r0
 800b23c:	4637      	mov	r7, r6
 800b23e:	dc05      	bgt.n	800b24c <__swbuf_r+0x4e>
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	f7ff fbb4 	bl	800a9b0 <_fflush_r>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d1ed      	bne.n	800b228 <__swbuf_r+0x2a>
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	3b01      	subs	r3, #1
 800b250:	60a3      	str	r3, [r4, #8]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	1c5a      	adds	r2, r3, #1
 800b256:	6022      	str	r2, [r4, #0]
 800b258:	701e      	strb	r6, [r3, #0]
 800b25a:	6962      	ldr	r2, [r4, #20]
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	429a      	cmp	r2, r3
 800b260:	d004      	beq.n	800b26c <__swbuf_r+0x6e>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	07db      	lsls	r3, r3, #31
 800b266:	d5e1      	bpl.n	800b22c <__swbuf_r+0x2e>
 800b268:	2e0a      	cmp	r6, #10
 800b26a:	d1df      	bne.n	800b22c <__swbuf_r+0x2e>
 800b26c:	4621      	mov	r1, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	f7ff fb9e 	bl	800a9b0 <_fflush_r>
 800b274:	2800      	cmp	r0, #0
 800b276:	d0d9      	beq.n	800b22c <__swbuf_r+0x2e>
 800b278:	e7d6      	b.n	800b228 <__swbuf_r+0x2a>
	...

0800b27c <__swsetup_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4b29      	ldr	r3, [pc, #164]	@ (800b324 <__swsetup_r+0xa8>)
 800b280:	4605      	mov	r5, r0
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	460c      	mov	r4, r1
 800b286:	b118      	cbz	r0, 800b290 <__swsetup_r+0x14>
 800b288:	6a03      	ldr	r3, [r0, #32]
 800b28a:	b90b      	cbnz	r3, 800b290 <__swsetup_r+0x14>
 800b28c:	f7fe f8c4 	bl	8009418 <__sinit>
 800b290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b294:	0719      	lsls	r1, r3, #28
 800b296:	d422      	bmi.n	800b2de <__swsetup_r+0x62>
 800b298:	06da      	lsls	r2, r3, #27
 800b29a:	d407      	bmi.n	800b2ac <__swsetup_r+0x30>
 800b29c:	2209      	movs	r2, #9
 800b29e:	602a      	str	r2, [r5, #0]
 800b2a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2aa:	e033      	b.n	800b314 <__swsetup_r+0x98>
 800b2ac:	0758      	lsls	r0, r3, #29
 800b2ae:	d512      	bpl.n	800b2d6 <__swsetup_r+0x5a>
 800b2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2b2:	b141      	cbz	r1, 800b2c6 <__swsetup_r+0x4a>
 800b2b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	d002      	beq.n	800b2c2 <__swsetup_r+0x46>
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 f965 	bl	800b58c <_free_r>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	f043 0308 	orr.w	r3, r3, #8
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	b94b      	cbnz	r3, 800b2f6 <__swsetup_r+0x7a>
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ec:	d003      	beq.n	800b2f6 <__swsetup_r+0x7a>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 f83f 	bl	800b374 <__smakebuf_r>
 800b2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2fa:	f013 0201 	ands.w	r2, r3, #1
 800b2fe:	d00a      	beq.n	800b316 <__swsetup_r+0x9a>
 800b300:	2200      	movs	r2, #0
 800b302:	60a2      	str	r2, [r4, #8]
 800b304:	6962      	ldr	r2, [r4, #20]
 800b306:	4252      	negs	r2, r2
 800b308:	61a2      	str	r2, [r4, #24]
 800b30a:	6922      	ldr	r2, [r4, #16]
 800b30c:	b942      	cbnz	r2, 800b320 <__swsetup_r+0xa4>
 800b30e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b312:	d1c5      	bne.n	800b2a0 <__swsetup_r+0x24>
 800b314:	bd38      	pop	{r3, r4, r5, pc}
 800b316:	0799      	lsls	r1, r3, #30
 800b318:	bf58      	it	pl
 800b31a:	6962      	ldrpl	r2, [r4, #20]
 800b31c:	60a2      	str	r2, [r4, #8]
 800b31e:	e7f4      	b.n	800b30a <__swsetup_r+0x8e>
 800b320:	2000      	movs	r0, #0
 800b322:	e7f7      	b.n	800b314 <__swsetup_r+0x98>
 800b324:	20000024 	.word	0x20000024

0800b328 <__swhatbuf_r>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	460c      	mov	r4, r1
 800b32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b330:	2900      	cmp	r1, #0
 800b332:	b096      	sub	sp, #88	@ 0x58
 800b334:	4615      	mov	r5, r2
 800b336:	461e      	mov	r6, r3
 800b338:	da0d      	bge.n	800b356 <__swhatbuf_r+0x2e>
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b340:	f04f 0100 	mov.w	r1, #0
 800b344:	bf14      	ite	ne
 800b346:	2340      	movne	r3, #64	@ 0x40
 800b348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b34c:	2000      	movs	r0, #0
 800b34e:	6031      	str	r1, [r6, #0]
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	b016      	add	sp, #88	@ 0x58
 800b354:	bd70      	pop	{r4, r5, r6, pc}
 800b356:	466a      	mov	r2, sp
 800b358:	f000 f858 	bl	800b40c <_fstat_r>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	dbec      	blt.n	800b33a <__swhatbuf_r+0x12>
 800b360:	9901      	ldr	r1, [sp, #4]
 800b362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b36a:	4259      	negs	r1, r3
 800b36c:	4159      	adcs	r1, r3
 800b36e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b372:	e7eb      	b.n	800b34c <__swhatbuf_r+0x24>

0800b374 <__smakebuf_r>:
 800b374:	898b      	ldrh	r3, [r1, #12]
 800b376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b378:	079d      	lsls	r5, r3, #30
 800b37a:	4606      	mov	r6, r0
 800b37c:	460c      	mov	r4, r1
 800b37e:	d507      	bpl.n	800b390 <__smakebuf_r+0x1c>
 800b380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	6123      	str	r3, [r4, #16]
 800b388:	2301      	movs	r3, #1
 800b38a:	6163      	str	r3, [r4, #20]
 800b38c:	b003      	add	sp, #12
 800b38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b390:	ab01      	add	r3, sp, #4
 800b392:	466a      	mov	r2, sp
 800b394:	f7ff ffc8 	bl	800b328 <__swhatbuf_r>
 800b398:	9f00      	ldr	r7, [sp, #0]
 800b39a:	4605      	mov	r5, r0
 800b39c:	4639      	mov	r1, r7
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f7ff fa02 	bl	800a7a8 <_malloc_r>
 800b3a4:	b948      	cbnz	r0, 800b3ba <__smakebuf_r+0x46>
 800b3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3aa:	059a      	lsls	r2, r3, #22
 800b3ac:	d4ee      	bmi.n	800b38c <__smakebuf_r+0x18>
 800b3ae:	f023 0303 	bic.w	r3, r3, #3
 800b3b2:	f043 0302 	orr.w	r3, r3, #2
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	e7e2      	b.n	800b380 <__smakebuf_r+0xc>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	6020      	str	r0, [r4, #0]
 800b3be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	9b01      	ldr	r3, [sp, #4]
 800b3c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3ca:	b15b      	cbz	r3, 800b3e4 <__smakebuf_r+0x70>
 800b3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f000 f82d 	bl	800b430 <_isatty_r>
 800b3d6:	b128      	cbz	r0, 800b3e4 <__smakebuf_r+0x70>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f023 0303 	bic.w	r3, r3, #3
 800b3de:	f043 0301 	orr.w	r3, r3, #1
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	431d      	orrs	r5, r3
 800b3e8:	81a5      	strh	r5, [r4, #12]
 800b3ea:	e7cf      	b.n	800b38c <__smakebuf_r+0x18>

0800b3ec <_close_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4d06      	ldr	r5, [pc, #24]	@ (800b408 <_close_r+0x1c>)
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	602b      	str	r3, [r5, #0]
 800b3f8:	f7f6 ff2a 	bl	8002250 <_close>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_close_r+0x1a>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_close_r+0x1a>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	20000b64 	.word	0x20000b64

0800b40c <_fstat_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4d07      	ldr	r5, [pc, #28]	@ (800b42c <_fstat_r+0x20>)
 800b410:	2300      	movs	r3, #0
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	602b      	str	r3, [r5, #0]
 800b41a:	f7f6 ff25 	bl	8002268 <_fstat>
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	d102      	bne.n	800b428 <_fstat_r+0x1c>
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	b103      	cbz	r3, 800b428 <_fstat_r+0x1c>
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	bd38      	pop	{r3, r4, r5, pc}
 800b42a:	bf00      	nop
 800b42c:	20000b64 	.word	0x20000b64

0800b430 <_isatty_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d06      	ldr	r5, [pc, #24]	@ (800b44c <_isatty_r+0x1c>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	602b      	str	r3, [r5, #0]
 800b43c:	f7f6 ff24 	bl	8002288 <_isatty>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	d102      	bne.n	800b44a <_isatty_r+0x1a>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	b103      	cbz	r3, 800b44a <_isatty_r+0x1a>
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	20000b64 	.word	0x20000b64

0800b450 <_lseek_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d07      	ldr	r5, [pc, #28]	@ (800b470 <_lseek_r+0x20>)
 800b454:	4604      	mov	r4, r0
 800b456:	4608      	mov	r0, r1
 800b458:	4611      	mov	r1, r2
 800b45a:	2200      	movs	r2, #0
 800b45c:	602a      	str	r2, [r5, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	f7f6 ff1d 	bl	800229e <_lseek>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_lseek_r+0x1e>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_lseek_r+0x1e>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	20000b64 	.word	0x20000b64

0800b474 <_raise_r>:
 800b474:	291f      	cmp	r1, #31
 800b476:	b538      	push	{r3, r4, r5, lr}
 800b478:	4605      	mov	r5, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	d904      	bls.n	800b488 <_raise_r+0x14>
 800b47e:	2316      	movs	r3, #22
 800b480:	6003      	str	r3, [r0, #0]
 800b482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b48a:	b112      	cbz	r2, 800b492 <_raise_r+0x1e>
 800b48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b490:	b94b      	cbnz	r3, 800b4a6 <_raise_r+0x32>
 800b492:	4628      	mov	r0, r5
 800b494:	f000 f842 	bl	800b51c <_getpid_r>
 800b498:	4622      	mov	r2, r4
 800b49a:	4601      	mov	r1, r0
 800b49c:	4628      	mov	r0, r5
 800b49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4a2:	f000 b829 	b.w	800b4f8 <_kill_r>
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d00a      	beq.n	800b4c0 <_raise_r+0x4c>
 800b4aa:	1c59      	adds	r1, r3, #1
 800b4ac:	d103      	bne.n	800b4b6 <_raise_r+0x42>
 800b4ae:	2316      	movs	r3, #22
 800b4b0:	6003      	str	r3, [r0, #0]
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	e7e7      	b.n	800b486 <_raise_r+0x12>
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4798      	blx	r3
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	e7e0      	b.n	800b486 <_raise_r+0x12>

0800b4c4 <raise>:
 800b4c4:	4b02      	ldr	r3, [pc, #8]	@ (800b4d0 <raise+0xc>)
 800b4c6:	4601      	mov	r1, r0
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	f7ff bfd3 	b.w	800b474 <_raise_r>
 800b4ce:	bf00      	nop
 800b4d0:	20000024 	.word	0x20000024

0800b4d4 <_read_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d07      	ldr	r5, [pc, #28]	@ (800b4f4 <_read_r+0x20>)
 800b4d8:	4604      	mov	r4, r0
 800b4da:	4608      	mov	r0, r1
 800b4dc:	4611      	mov	r1, r2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	602a      	str	r2, [r5, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f7f6 fe7b 	bl	80021de <_read>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_read_r+0x1e>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_read_r+0x1e>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	20000b64 	.word	0x20000b64

0800b4f8 <_kill_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d07      	ldr	r5, [pc, #28]	@ (800b518 <_kill_r+0x20>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	4611      	mov	r1, r2
 800b504:	602b      	str	r3, [r5, #0]
 800b506:	f7f6 fe4f 	bl	80021a8 <_kill>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d102      	bne.n	800b514 <_kill_r+0x1c>
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	b103      	cbz	r3, 800b514 <_kill_r+0x1c>
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	bd38      	pop	{r3, r4, r5, pc}
 800b516:	bf00      	nop
 800b518:	20000b64 	.word	0x20000b64

0800b51c <_getpid_r>:
 800b51c:	f7f6 be3c 	b.w	8002198 <_getpid>

0800b520 <_sbrk_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d06      	ldr	r5, [pc, #24]	@ (800b53c <_sbrk_r+0x1c>)
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	f7f6 fec4 	bl	80022b8 <_sbrk>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_sbrk_r+0x1a>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_sbrk_r+0x1a>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	20000b64 	.word	0x20000b64

0800b540 <_write_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	@ (800b560 <_write_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f6 fe62 	bl	8002218 <_write>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_write_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_write_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20000b64 	.word	0x20000b64

0800b564 <_calloc_r>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	fba1 5402 	umull	r5, r4, r1, r2
 800b56a:	b93c      	cbnz	r4, 800b57c <_calloc_r+0x18>
 800b56c:	4629      	mov	r1, r5
 800b56e:	f7ff f91b 	bl	800a7a8 <_malloc_r>
 800b572:	4606      	mov	r6, r0
 800b574:	b928      	cbnz	r0, 800b582 <_calloc_r+0x1e>
 800b576:	2600      	movs	r6, #0
 800b578:	4630      	mov	r0, r6
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	220c      	movs	r2, #12
 800b57e:	6002      	str	r2, [r0, #0]
 800b580:	e7f9      	b.n	800b576 <_calloc_r+0x12>
 800b582:	462a      	mov	r2, r5
 800b584:	4621      	mov	r1, r4
 800b586:	f7fd ffa9 	bl	80094dc <memset>
 800b58a:	e7f5      	b.n	800b578 <_calloc_r+0x14>

0800b58c <_free_r>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4605      	mov	r5, r0
 800b590:	2900      	cmp	r1, #0
 800b592:	d041      	beq.n	800b618 <_free_r+0x8c>
 800b594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b598:	1f0c      	subs	r4, r1, #4
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfb8      	it	lt
 800b59e:	18e4      	addlt	r4, r4, r3
 800b5a0:	f7ff fa2e 	bl	800aa00 <__malloc_lock>
 800b5a4:	4a1d      	ldr	r2, [pc, #116]	@ (800b61c <_free_r+0x90>)
 800b5a6:	6813      	ldr	r3, [r2, #0]
 800b5a8:	b933      	cbnz	r3, 800b5b8 <_free_r+0x2c>
 800b5aa:	6063      	str	r3, [r4, #4]
 800b5ac:	6014      	str	r4, [r2, #0]
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b4:	f7ff ba2a 	b.w	800aa0c <__malloc_unlock>
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	d908      	bls.n	800b5ce <_free_r+0x42>
 800b5bc:	6820      	ldr	r0, [r4, #0]
 800b5be:	1821      	adds	r1, r4, r0
 800b5c0:	428b      	cmp	r3, r1
 800b5c2:	bf01      	itttt	eq
 800b5c4:	6819      	ldreq	r1, [r3, #0]
 800b5c6:	685b      	ldreq	r3, [r3, #4]
 800b5c8:	1809      	addeq	r1, r1, r0
 800b5ca:	6021      	streq	r1, [r4, #0]
 800b5cc:	e7ed      	b.n	800b5aa <_free_r+0x1e>
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	b10b      	cbz	r3, 800b5d8 <_free_r+0x4c>
 800b5d4:	42a3      	cmp	r3, r4
 800b5d6:	d9fa      	bls.n	800b5ce <_free_r+0x42>
 800b5d8:	6811      	ldr	r1, [r2, #0]
 800b5da:	1850      	adds	r0, r2, r1
 800b5dc:	42a0      	cmp	r0, r4
 800b5de:	d10b      	bne.n	800b5f8 <_free_r+0x6c>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	4401      	add	r1, r0
 800b5e4:	1850      	adds	r0, r2, r1
 800b5e6:	4283      	cmp	r3, r0
 800b5e8:	6011      	str	r1, [r2, #0]
 800b5ea:	d1e0      	bne.n	800b5ae <_free_r+0x22>
 800b5ec:	6818      	ldr	r0, [r3, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	6053      	str	r3, [r2, #4]
 800b5f2:	4408      	add	r0, r1
 800b5f4:	6010      	str	r0, [r2, #0]
 800b5f6:	e7da      	b.n	800b5ae <_free_r+0x22>
 800b5f8:	d902      	bls.n	800b600 <_free_r+0x74>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	602b      	str	r3, [r5, #0]
 800b5fe:	e7d6      	b.n	800b5ae <_free_r+0x22>
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	1821      	adds	r1, r4, r0
 800b604:	428b      	cmp	r3, r1
 800b606:	bf04      	itt	eq
 800b608:	6819      	ldreq	r1, [r3, #0]
 800b60a:	685b      	ldreq	r3, [r3, #4]
 800b60c:	6063      	str	r3, [r4, #4]
 800b60e:	bf04      	itt	eq
 800b610:	1809      	addeq	r1, r1, r0
 800b612:	6021      	streq	r1, [r4, #0]
 800b614:	6054      	str	r4, [r2, #4]
 800b616:	e7ca      	b.n	800b5ae <_free_r+0x22>
 800b618:	bd38      	pop	{r3, r4, r5, pc}
 800b61a:	bf00      	nop
 800b61c:	20000b60 	.word	0x20000b60

0800b620 <__ascii_mbtowc>:
 800b620:	b082      	sub	sp, #8
 800b622:	b901      	cbnz	r1, 800b626 <__ascii_mbtowc+0x6>
 800b624:	a901      	add	r1, sp, #4
 800b626:	b142      	cbz	r2, 800b63a <__ascii_mbtowc+0x1a>
 800b628:	b14b      	cbz	r3, 800b63e <__ascii_mbtowc+0x1e>
 800b62a:	7813      	ldrb	r3, [r2, #0]
 800b62c:	600b      	str	r3, [r1, #0]
 800b62e:	7812      	ldrb	r2, [r2, #0]
 800b630:	1e10      	subs	r0, r2, #0
 800b632:	bf18      	it	ne
 800b634:	2001      	movne	r0, #1
 800b636:	b002      	add	sp, #8
 800b638:	4770      	bx	lr
 800b63a:	4610      	mov	r0, r2
 800b63c:	e7fb      	b.n	800b636 <__ascii_mbtowc+0x16>
 800b63e:	f06f 0001 	mvn.w	r0, #1
 800b642:	e7f8      	b.n	800b636 <__ascii_mbtowc+0x16>

0800b644 <_malloc_usable_size_r>:
 800b644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b648:	1f18      	subs	r0, r3, #4
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	bfbc      	itt	lt
 800b64e:	580b      	ldrlt	r3, [r1, r0]
 800b650:	18c0      	addlt	r0, r0, r3
 800b652:	4770      	bx	lr

0800b654 <__ascii_wctomb>:
 800b654:	4603      	mov	r3, r0
 800b656:	4608      	mov	r0, r1
 800b658:	b141      	cbz	r1, 800b66c <__ascii_wctomb+0x18>
 800b65a:	2aff      	cmp	r2, #255	@ 0xff
 800b65c:	d904      	bls.n	800b668 <__ascii_wctomb+0x14>
 800b65e:	228a      	movs	r2, #138	@ 0x8a
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b666:	4770      	bx	lr
 800b668:	700a      	strb	r2, [r1, #0]
 800b66a:	2001      	movs	r0, #1
 800b66c:	4770      	bx	lr
	...

0800b670 <_init>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	bf00      	nop
 800b674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b676:	bc08      	pop	{r3}
 800b678:	469e      	mov	lr, r3
 800b67a:	4770      	bx	lr

0800b67c <_fini>:
 800b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67e:	bf00      	nop
 800b680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b682:	bc08      	pop	{r3}
 800b684:	469e      	mov	lr, r3
 800b686:	4770      	bx	lr
