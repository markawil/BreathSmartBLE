
NUCLEO-L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a190  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000147c  0800a320  0800a320  0000b320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b79c  0800b79c  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b79c  0800b79c  0000c79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7a4  0800b7a4  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7a4  0800b7a4  0000c7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7a8  0800b7a8  0000c7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b7ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  200001e0  0800b98c  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ab4  0800b98c  0000dab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b42  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389d  00000000  00000000  00022d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000265f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e57  00000000  00000000  000278c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dd9  00000000  00000000  0002871f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194f5  00000000  00000000  0004d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d671d  00000000  00000000  000669ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d10a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e10  00000000  00000000  0013d150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00142f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a308 	.word	0x0800a308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a308 	.word	0x0800a308

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	@ 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <hm10_uart_handle_tx>:
		show_error(hm10_error, sizeof(hm10_error), SerialUART_Out);
	}
}

void hm10_uart_handle_tx()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	// clear the TX buffer after sending
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <hm10_uart_handle_rx>:

void hm10_uart_handle_rx(uint8_t rx_data)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
	// Temporary testing solution to verify rx and tx with the device.

	// check the incoming characters sent from
	if (rx_data == 78) // ASCII for N (No)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f68:	d106      	bne.n	8000f78 <hm10_uart_handle_rx+0x1e>
	{
		// turn the green LED off
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f002 ff23 	bl	8003dbc <HAL_GPIO_WritePin>
	else if (rx_data == 89) // ASCII for Y (Yes)
	{
		// turn the green LED on
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
	}
}
 8000f76:	e008      	b.n	8000f8a <hm10_uart_handle_rx+0x30>
	else if (rx_data == 89) // ASCII for Y (Yes)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b59      	cmp	r3, #89	@ 0x59
 8000f7c:	d105      	bne.n	8000f8a <hm10_uart_handle_rx+0x30>
		HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2102      	movs	r1, #2
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f86:	f002 ff19 	bl	8003dbc <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <mpu6050_init>:
/*!
 * \brief     Init function used to setup this module and the accelerometer for sampling.
 * \return    device_init_complete_s - True is the device is initialized okay, false if not.
 */
bool mpu6050_init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	device_init_complete_s = (who_am_i() == true) ? true : false;
 8000f9a:	f000 f8a5 	bl	80010e8 <who_am_i>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <mpu6050_init+0x9c>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	if (device_init_complete_s == false)
 8000fa6:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <mpu6050_init+0x9c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f083 0301 	eor.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <mpu6050_init+0x24>
	{
		return false; // early termination if get_who_am_i() failed
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e036      	b.n	8001026 <mpu6050_init+0x92>
	}

	// Need to take the accelerometer out of sleep mode.
	uint8_t data = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71fb      	strb	r3, [r7, #7]
	bool pwr_mgmt_write = write_register(MPU6050_REG_PWR_MGMT_1, data);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	206b      	movs	r0, #107	@ 0x6b
 8000fc2:	f000 f8c5 	bl	8001150 <write_register>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
	assert(pwr_mgmt_write);
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <mpu6050_init+0x48>
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <mpu6050_init+0xa0>)
 8000fd2:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <mpu6050_init+0xa4>)
 8000fd4:	212e      	movs	r1, #46	@ 0x2e
 8000fd6:	4819      	ldr	r0, [pc, #100]	@ (800103c <mpu6050_init+0xa8>)
 8000fd8:	f006 fb34 	bl	8007644 <__assert_func>

	// Set data rate to 1KHz by writing MPU6050_REG_SMPRT_DIV register.
	data = 0x07;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	71fb      	strb	r3, [r7, #7]
	bool set_data_rate = write_register(MPU6050_REG_SMPRT_DIV, data);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2019      	movs	r0, #25
 8000fe6:	f000 f8b3 	bl	8001150 <write_register>
 8000fea:	4603      	mov	r3, r0
 8000fec:	717b      	strb	r3, [r7, #5]
	assert(set_data_rate);
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d105      	bne.n	8001000 <mpu6050_init+0x6c>
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <mpu6050_init+0xac>)
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <mpu6050_init+0xa4>)
 8000ff8:	2133      	movs	r1, #51	@ 0x33
 8000ffa:	4810      	ldr	r0, [pc, #64]	@ (800103c <mpu6050_init+0xa8>)
 8000ffc:	f006 fb22 	bl	8007644 <__assert_func>

	// Set accelerometer configuration to +-2g.
	data = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
	bool set_accel = write_register(MPU6050_REG_ACCEL_CONFIG, data);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4619      	mov	r1, r3
 8001008:	201c      	movs	r0, #28
 800100a:	f000 f8a1 	bl	8001150 <write_register>
 800100e:	4603      	mov	r3, r0
 8001010:	713b      	strb	r3, [r7, #4]
	assert(set_accel);
 8001012:	793b      	ldrb	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d105      	bne.n	8001024 <mpu6050_init+0x90>
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <mpu6050_init+0xb0>)
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <mpu6050_init+0xa4>)
 800101c:	2138      	movs	r1, #56	@ 0x38
 800101e:	4807      	ldr	r0, [pc, #28]	@ (800103c <mpu6050_init+0xa8>)
 8001020:	f006 fb10 	bl	8007644 <__assert_func>

	return true;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001fc 	.word	0x200001fc
 8001034:	0800a320 	.word	0x0800a320
 8001038:	0800a46c 	.word	0x0800a46c
 800103c:	0800a330 	.word	0x0800a330
 8001040:	0800a358 	.word	0x0800a358
 8001044:	0800a368 	.word	0x0800a368

08001048 <mpu6050_get_temperature_data>:

	return (float)z_axis/16384.0;
}

float mpu6050_get_temperature_data(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	if (!device_init_complete_s)
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <mpu6050_get_temperature_data+0x98>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <mpu6050_get_temperature_data+0x1a>
	{
		return 0u;
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e031      	b.n	80010c6 <mpu6050_get_temperature_data+0x7e>
	}

	short temperature = 0; // resultant value holder used for combining L and H 8 bit values
 8001062:	2300      	movs	r3, #0
 8001064:	80fb      	strh	r3, [r7, #6]
	uint8_t temp_l = read_register(MPU6050_REG_TEMP_OUT_L);
 8001066:	2042      	movs	r0, #66	@ 0x42
 8001068:	f000 f854 	bl	8001114 <read_register>
 800106c:	4603      	mov	r3, r0
 800106e:	717b      	strb	r3, [r7, #5]
	uint8_t temp_h = read_register(MPU6050_REG_TEMP_OUT_H);
 8001070:	2041      	movs	r0, #65	@ 0x41
 8001072:	f000 f84f 	bl	8001114 <read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	713b      	strb	r3, [r7, #4]
	// combine the 2 with a bit shift and an or operator
	temperature = (temp_h << 8) | temp_l;
 800107a:	793b      	ldrb	r3, [r7, #4]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	80fb      	strh	r3, [r7, #6]

	// convert to Celcius per mpu6050 datasheet
	return (float)temperature/340.0 + 36.53;
 8001088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	ee17 0a90 	vmov	r0, s15
 8001098:	f7ff fa60 	bl	800055c <__aeabi_f2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <mpu6050_get_temperature_data+0x9c>)
 80010a2:	f7ff fbdd 	bl	8000860 <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	a30a      	add	r3, pc, #40	@ (adr r3, 80010d8 <mpu6050_get_temperature_data+0x90>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff f8f4 	bl	80002a0 <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd7c 	bl	8000bbc <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	0a3d70a4 	.word	0x0a3d70a4
 80010dc:	404243d7 	.word	0x404243d7
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	40754000 	.word	0x40754000

080010e8 <who_am_i>:
/*!
 * \brief     Reads the WHO_AM_I register of the MPU6050.
 * \return    device_present - True is the register value was read correctly, false if not.
 */
bool who_am_i(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	bool device_present = false;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]

	reg_value = read_register(MPU6050_REG_WHO_AM_I);
 80010f6:	2075      	movs	r0, #117	@ 0x75
 80010f8:	f000 f80c 	bl	8001114 <read_register>
 80010fc:	4603      	mov	r3, r0
 80010fe:	71bb      	strb	r3, [r7, #6]
	if (reg_value == WHO_AM_I_VALUE)
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	2b68      	cmp	r3, #104	@ 0x68
 8001104:	d101      	bne.n	800110a <who_am_i+0x22>
	{
		device_present = true;
 8001106:	2301      	movs	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
	}

	return device_present;
 800110a:	79fb      	ldrb	r3, [r7, #7]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <read_register>:
 * \brief     Reads from a register address passed into the function.
 * \param[in] reg_add - Address of the register we want to read.
 * \return    reg_val - Value of the register we read from.
 */
uint8_t read_register(uint8_t reg_add)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef i2c_rx_okay = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, reg_add, 1, &reg_value, 1, I2C_MAX_TIMEOUT);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	2364      	movs	r3, #100	@ 0x64
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 030e 	add.w	r3, r7, #14
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	21d0      	movs	r1, #208	@ 0xd0
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <read_register+0x38>)
 800113a:	f003 f807 	bl	800414c <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
	if (i2c_rx_okay != HAL_OK)
	{
		// handle the error
	}
	return reg_value;
 8001142:	7bbb      	ldrb	r3, [r7, #14]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200006d8 	.word	0x200006d8

08001150 <write_register>:
 * \param[in] reg_add - Address of the register we want to write to.
 * \param[in] reg_val - Value of the register we want to write.
 * \return    True is the register write was successful, false if not.
 */
bool write_register(uint8_t reg_add, uint8_t reg_val)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af04      	add	r7, sp, #16
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef i2c_tx_okay = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, reg_add, 1, &reg_val, 1, I2C_MAX_TIMEOUT);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	b29a      	uxth	r2, r3
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1dbb      	adds	r3, r7, #6
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	21d0      	movs	r1, #208	@ 0xd0
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <write_register+0x44>)
 8001176:	f002 fed5 	bl	8003f24 <HAL_I2C_Mem_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
	if (i2c_tx_okay != HAL_OK)
	{
		// handle the error
	}
	return i2c_tx_okay == HAL_OK;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200006d8 	.word	0x200006d8

08001198 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	2200      	movs	r2, #0
 80011c4:	2178      	movs	r1, #120	@ 0x78
 80011c6:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <ssd1306_WriteCommand+0x2c>)
 80011c8:	f002 feac 	bl	8003f24 <HAL_I2C_Mem_Write>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000072c 	.word	0x2000072c

080011d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011ea:	9202      	str	r2, [sp, #8]
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	2240      	movs	r2, #64	@ 0x40
 80011f6:	2178      	movs	r1, #120	@ 0x78
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <ssd1306_WriteData+0x30>)
 80011fa:	f002 fe93 	bl	8003f24 <HAL_I2C_Mem_Write>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000072c 	.word	0x2000072c

0800120c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001210:	f7ff ffc2 	bl	8001198 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	@ 0x64
 8001216:	f001 fa41 	bl	800269c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fa30 	bl	8001680 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001220:	2020      	movs	r0, #32
 8001222:	f7ff ffc1 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff ffbe 	bl	80011a8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800122c:	20b0      	movs	r0, #176	@ 0xb0
 800122e:	f7ff ffbb 	bl	80011a8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001232:	20c8      	movs	r0, #200	@ 0xc8
 8001234:	f7ff ffb8 	bl	80011a8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ffb5 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800123e:	2010      	movs	r0, #16
 8001240:	f7ff ffb2 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001244:	2040      	movs	r0, #64	@ 0x40
 8001246:	f7ff ffaf 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800124a:	20ff      	movs	r0, #255	@ 0xff
 800124c:	f000 fa05 	bl	800165a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001250:	20a1      	movs	r0, #161	@ 0xa1
 8001252:	f7ff ffa9 	bl	80011a8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001256:	20a6      	movs	r0, #166	@ 0xa6
 8001258:	f7ff ffa6 	bl	80011a8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800125c:	20a8      	movs	r0, #168	@ 0xa8
 800125e:	f7ff ffa3 	bl	80011a8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001262:	203f      	movs	r0, #63	@ 0x3f
 8001264:	f7ff ffa0 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001268:	20a4      	movs	r0, #164	@ 0xa4
 800126a:	f7ff ff9d 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800126e:	20d3      	movs	r0, #211	@ 0xd3
 8001270:	f7ff ff9a 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff ff97 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800127a:	20d5      	movs	r0, #213	@ 0xd5
 800127c:	f7ff ff94 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001280:	20f0      	movs	r0, #240	@ 0xf0
 8001282:	f7ff ff91 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001286:	20d9      	movs	r0, #217	@ 0xd9
 8001288:	f7ff ff8e 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800128c:	2022      	movs	r0, #34	@ 0x22
 800128e:	f7ff ff8b 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001292:	20da      	movs	r0, #218	@ 0xda
 8001294:	f7ff ff88 	bl	80011a8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001298:	2012      	movs	r0, #18
 800129a:	f7ff ff85 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800129e:	20db      	movs	r0, #219	@ 0xdb
 80012a0:	f7ff ff82 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012a4:	2020      	movs	r0, #32
 80012a6:	f7ff ff7f 	bl	80011a8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012aa:	208d      	movs	r0, #141	@ 0x8d
 80012ac:	f7ff ff7c 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012b0:	2014      	movs	r0, #20
 80012b2:	f7ff ff79 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 f9e2 	bl	8001680 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f80f 	bl	80012e0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012c2:	f000 f825 	bl	8001310 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <ssd1306_Init+0xd0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <ssd1306_Init+0xd0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012d2:	4b02      	ldr	r3, [pc, #8]	@ (80012dc <ssd1306_Init+0xd0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	711a      	strb	r2, [r3, #4]
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000600 	.word	0x20000600

080012e0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <ssd1306_Fill+0x14>
 80012f0:	2300      	movs	r3, #0
 80012f2:	e000      	b.n	80012f6 <ssd1306_Fill+0x16>
 80012f4:	23ff      	movs	r3, #255	@ 0xff
 80012f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fa:	4619      	mov	r1, r3
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <ssd1306_Fill+0x2c>)
 80012fe:	f006 ff39 	bl	8008174 <memset>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000200 	.word	0x20000200

08001310 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e016      	b.n	800134a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b50      	subs	r3, #80	@ 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff40 	bl	80011a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff3d 	bl	80011a8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff ff3a 	bl	80011a8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4a08      	ldr	r2, [pc, #32]	@ (800135c <ssd1306_UpdateScreen+0x4c>)
 800133a:	4413      	add	r3, r2
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff4a 	bl	80011d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3301      	adds	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d9e5      	bls.n	800131c <ssd1306_UpdateScreen+0xc>
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000200 	.word	0x20000200

08001360 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db3d      	blt.n	80013f6 <ssd1306_DrawPixel+0x96>
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b3f      	cmp	r3, #63	@ 0x3f
 800137e:	d83a      	bhi.n	80013f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d11a      	bne.n	80013bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	4413      	add	r3, r2
 8001394:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b259      	sxtb	r1, r3
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	b2c9      	uxtb	r1, r1
 80013b6:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 80013b8:	54d1      	strb	r1, [r2, r3]
 80013ba:	e01d      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4413      	add	r3, r2
 80013ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4603      	mov	r3, r0
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	4413      	add	r3, r2
 80013ee:	b2c9      	uxtb	r1, r1
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <ssd1306_DrawPixel+0xa4>)
 80013f2:	54d1      	strb	r1, [r2, r3]
 80013f4:	e000      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
        return;
 80013f6:	bf00      	nop
    }
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000200 	.word	0x20000200

08001408 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4638      	mov	r0, r7
 8001412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001416:	4623      	mov	r3, r4
 8001418:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	2b1f      	cmp	r3, #31
 800141e:	d902      	bls.n	8001426 <ssd1306_WriteChar+0x1e>
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b7e      	cmp	r3, #126	@ 0x7e
 8001424:	d901      	bls.n	800142a <ssd1306_WriteChar+0x22>
        return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e077      	b.n	800151a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	783b      	ldrb	r3, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	2b80      	cmp	r3, #128	@ 0x80
 8001436:	dc06      	bgt.n	8001446 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001438:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 800143a:	885b      	ldrh	r3, [r3, #2]
 800143c:	461a      	mov	r2, r3
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001442:	2b40      	cmp	r3, #64	@ 0x40
 8001444:	dd01      	ble.n	800144a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001446:	2300      	movs	r3, #0
 8001448:	e067      	b.n	800151a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e04e      	b.n	80014ee <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3b20      	subs	r3, #32
 8001456:	7879      	ldrb	r1, [r7, #1]
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	4619      	mov	r1, r3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	440b      	add	r3, r1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	e036      	b.n	80014de <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b2d8      	uxtb	r0, r3
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 8001490:	885b      	ldrh	r3, [r3, #2]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4413      	add	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff ff5d 	bl	8001360 <ssd1306_DrawPixel>
 80014a6:	e017      	b.n	80014d8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b2d8      	uxtb	r0, r3
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	b2d9      	uxtb	r1, r3
 80014c4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	f7ff ff44 	bl	8001360 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	783b      	ldrb	r3, [r7, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d3c3      	bcc.n	8001470 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	3301      	adds	r3, #1
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	787b      	ldrb	r3, [r7, #1]
 80014f0:	461a      	mov	r2, r3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d3ab      	bcc.n	8001450 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d005      	beq.n	800150e <ssd1306_WriteChar+0x106>
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	3a20      	subs	r2, #32
 8001508:	440a      	add	r2, r1
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	e000      	b.n	8001510 <ssd1306_WriteChar+0x108>
 800150e:	783a      	ldrb	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <ssd1306_WriteChar+0x11c>)
 8001516:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000600 	.word	0x20000600

08001528 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	4638      	mov	r0, r7
 8001532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001536:	e013      	b.n	8001560 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	7818      	ldrb	r0, [r3, #0]
 800153c:	7e3b      	ldrb	r3, [r7, #24]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	463b      	mov	r3, r7
 8001542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001544:	f7ff ff60 	bl	8001408 <ssd1306_WriteChar>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d002      	beq.n	800155a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	e008      	b.n	800156c <ssd1306_WriteString+0x44>
        }
        str++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e7      	bne.n	8001538 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	781b      	ldrb	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <ssd1306_SetCursor+0x2c>)
 800158a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <ssd1306_SetCursor+0x2c>)
 8001592:	805a      	strh	r2, [r3, #2]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	20000600 	.word	0x20000600

080015a4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	603a      	str	r2, [r7, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	460b      	mov	r3, r1
 80015b4:	71bb      	strb	r3, [r7, #6]
 80015b6:	4613      	mov	r3, r2
 80015b8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	3307      	adds	r3, #7
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da00      	bge.n	80015c4 <ssd1306_DrawBitmap+0x20>
 80015c2:	3307      	adds	r3, #7
 80015c4:	10db      	asrs	r3, r3, #3
 80015c6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db3e      	blt.n	8001652 <ssd1306_DrawBitmap+0xae>
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80015d8:	d83b      	bhi.n	8001652 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	73bb      	strb	r3, [r7, #14]
 80015de:	e033      	b.n	8001648 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	737b      	strb	r3, [r7, #13]
 80015e4:	e026      	b.n	8001634 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e00d      	b.n	8001614 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	7b7a      	ldrb	r2, [r7, #13]
 8001604:	08d2      	lsrs	r2, r2, #3
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	4413      	add	r3, r2
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da08      	bge.n	800162e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	4413      	add	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	7f3a      	ldrb	r2, [r7, #28]
 8001626:	79b9      	ldrb	r1, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fe99 	bl	8001360 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	3301      	adds	r3, #1
 8001632:	737b      	strb	r3, [r7, #13]
 8001634:	7b7a      	ldrb	r2, [r7, #13]
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3d4      	bcc.n	80015e6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	3301      	adds	r3, #1
 8001640:	73bb      	strb	r3, [r7, #14]
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	3301      	adds	r3, #1
 8001646:	71bb      	strb	r3, [r7, #6]
 8001648:	7bba      	ldrb	r2, [r7, #14]
 800164a:	7e3b      	ldrb	r3, [r7, #24]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3c7      	bcc.n	80015e0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001650:	e000      	b.n	8001654 <ssd1306_DrawBitmap+0xb0>
        return;
 8001652:	bf00      	nop
}
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001664:	2381      	movs	r3, #129	@ 0x81
 8001666:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd9c 	bl	80011a8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fd98 	bl	80011a8 <ssd1306_WriteCommand>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001690:	23af      	movs	r3, #175	@ 0xaf
 8001692:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <ssd1306_SetDisplayOn+0x38>)
 8001696:	2201      	movs	r2, #1
 8001698:	715a      	strb	r2, [r3, #5]
 800169a:	e004      	b.n	80016a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800169c:	23ae      	movs	r3, #174	@ 0xae
 800169e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <ssd1306_SetDisplayOn+0x38>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd7d 	bl	80011a8 <ssd1306_WriteCommand>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000600 	.word	0x20000600

080016bc <draw_github_intro>:
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
    ssd1306_UpdateScreen();
}

void draw_github_intro()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fe0c 	bl	80012e0 <ssd1306_Fill>
	ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2340      	movs	r3, #64	@ 0x40
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <draw_github_intro+0x2c>)
 80016d4:	2100      	movs	r1, #0
 80016d6:	2020      	movs	r0, #32
 80016d8:	f7ff ff64 	bl	80015a4 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80016dc:	f7ff fe18 	bl	8001310 <ssd1306_UpdateScreen>
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800b1e4 	.word	0x0800b1e4

080016ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001704:	4a2b      	ldr	r2, [pc, #172]	@ (80017b4 <MX_ADC1_Init+0xc8>)
 8001706:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800170e:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001714:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800171a:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001720:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001722:	2208      	movs	r2, #8
 8001724:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001728:	2200      	movs	r2, #0
 800172a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800172c:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800172e:	2201      	movs	r2, #1
 8001730:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001734:	2201      	movs	r2, #1
 8001736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001738:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001748:	2200      	movs	r2, #0
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001756:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800175a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001764:	4812      	ldr	r0, [pc, #72]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001766:	f001 f985 	bl	8002a74 <HAL_ADC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001770:	f000 fba2 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_ADC1_Init+0xcc>)
 8001776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001778:	2306      	movs	r3, #6
 800177a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001780:	237f      	movs	r3, #127	@ 0x7f
 8001782:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001784:	2304      	movs	r3, #4
 8001786:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 8001792:	f001 fbb1 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800179c:	f000 fb8c 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  // ADC needs to be started to work.
  (void)HAL_ADC_Start(&hadc1);
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <MX_ADC1_Init+0xc4>)
 80017a2:	f001 faa9 	bl	8002cf8 <HAL_ADC_Start>

  /* USER CODE END ADC1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000674 	.word	0x20000674
 80017b4:	50040000 	.word	0x50040000
 80017b8:	25b00200 	.word	0x25b00200

080017bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09e      	sub	sp, #120	@ 0x78
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2254      	movs	r2, #84	@ 0x54
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f006 fcc9 	bl	8008174 <memset>
  if(adcHandle->Instance==ADC1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a25      	ldr	r2, [pc, #148]	@ (800187c <HAL_ADC_MspInit+0xc0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d143      	bne.n	8001874 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80017f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017f8:	2301      	movs	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001800:	2310      	movs	r3, #16
 8001802:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001804:	2307      	movs	r3, #7
 8001806:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800180c:	2302      	movs	r3, #2
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f003 ffb6 	bl	800578c <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001826:	f000 fb47 	bl	8001eb8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001830:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_ADC_MspInit+0xc4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800185a:	2310      	movs	r3, #16
 800185c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800185e:	230b      	movs	r3, #11
 8001860:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001870:	f002 f93a 	bl	8003ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001874:	bf00      	nop
 8001876:	3778      	adds	r7, #120	@ 0x78
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	50040000 	.word	0x50040000
 8001880:	40021000 	.word	0x40021000

08001884 <pollADC>:
}

/* USER CODE BEGIN 1 */

void pollADC(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b09c      	sub	sp, #112	@ 0x70
 8001888:	af02      	add	r7, sp, #8
	// usage of both UART and the ADC
	adc_ok = HAL_ADC_PollForConversion(&hadc1, 100);
 800188a:	2164      	movs	r1, #100	@ 0x64
 800188c:	482e      	ldr	r0, [pc, #184]	@ (8001948 <pollADC+0xc4>)
 800188e:	f001 fa96 	bl	8002dbe <HAL_ADC_PollForConversion>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <pollADC+0xc8>)
 8001898:	701a      	strb	r2, [r3, #0]

	if (adc_ok == HAL_OK)
 800189a:	4b2c      	ldr	r3, [pc, #176]	@ (800194c <pollADC+0xc8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d147      	bne.n	8001932 <pollADC+0xae>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 80018a2:	4829      	ldr	r0, [pc, #164]	@ (8001948 <pollADC+0xc4>)
 80018a4:	f001 fb1a 	bl	8002edc <HAL_ADC_GetValue>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a29      	ldr	r2, [pc, #164]	@ (8001950 <pollADC+0xcc>)
 80018ac:	6013      	str	r3, [r2, #0]
		voltage = volt_per_bit * adc_value;
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <pollADC+0xcc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001954 <pollADC+0xd0>
 80018be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c2:	4b25      	ldr	r3, [pc, #148]	@ (8001958 <pollADC+0xd4>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
		snprintf(buffer, 100, "Voltage read from ADC was: %.6f\r\n", voltage);
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <pollADC+0xd4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe45 	bl	800055c <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	e9cd 2300 	strd	r2, r3, [sp]
 80018da:	4a20      	ldr	r2, [pc, #128]	@ (800195c <pollADC+0xd8>)
 80018dc:	2164      	movs	r1, #100	@ 0x64
 80018de:	4820      	ldr	r0, [pc, #128]	@ (8001960 <pollADC+0xdc>)
 80018e0:	f006 fb26 	bl	8007f30 <sniprintf>
		serial_uart_send_tx(buffer, 100);
 80018e4:	2164      	movs	r1, #100	@ 0x64
 80018e6:	481e      	ldr	r0, [pc, #120]	@ (8001960 <pollADC+0xdc>)
 80018e8:	f000 fdc4 	bl	8002474 <serial_uart_send_tx>

		// output to the OLED display
		ssd1306_SetCursor(2, 20);
 80018ec:	2114      	movs	r1, #20
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7ff fe40 	bl	8001574 <ssd1306_SetCursor>
		char volts_msg[MAX_BUFFER_LEN] = "";
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2260      	movs	r2, #96	@ 0x60
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f006 fc37 	bl	8008174 <memset>
		snprintf(volts_msg, MAX_BUFFER_LEN, "ADC: %.1fV", voltage);
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <pollADC+0xd4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe26 	bl	800055c <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	1d38      	adds	r0, r7, #4
 8001916:	e9cd 2300 	strd	r2, r3, [sp]
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <pollADC+0xe0>)
 800191c:	2164      	movs	r1, #100	@ 0x64
 800191e:	f006 fb07 	bl	8007f30 <sniprintf>
		ssd1306_WriteString(volts_msg, Font_11x18, White);
 8001922:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <pollADC+0xe4>)
 8001924:	1d38      	adds	r0, r7, #4
 8001926:	2201      	movs	r2, #1
 8001928:	9200      	str	r2, [sp, #0]
 800192a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192c:	f7ff fdfc 	bl	8001528 <ssd1306_WriteString>
	}
	else
	{
		serial_uart_send_tx((char *)error, 9);
	}
}
 8001930:	e005      	b.n	800193e <pollADC+0xba>
		serial_uart_send_tx((char *)error, 9);
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <pollADC+0xe8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2109      	movs	r1, #9
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fd9b 	bl	8002474 <serial_uart_send_tx>
}
 800193e:	bf00      	nop
 8001940:	3768      	adds	r7, #104	@ 0x68
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000674 	.word	0x20000674
 800194c:	20000000 	.word	0x20000000
 8001950:	20000608 	.word	0x20000608
 8001954:	3a534067 	.word	0x3a534067
 8001958:	2000060c 	.word	0x2000060c
 800195c:	0800a380 	.word	0x0800a380
 8001960:	20000610 	.word	0x20000610
 8001964:	0800a3a4 	.word	0x0800a3a4
 8001968:	0800b1d8 	.word	0x0800b1d8
 800196c:	20000004 	.word	0x20000004

08001970 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	4b28      	ldr	r3, [pc, #160]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001992:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <MX_GPIO_Init+0xb8>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2102      	movs	r1, #2
 80019d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d6:	f002 f9f1 	bl	8003dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2108      	movs	r1, #8
 80019de:	4813      	ldr	r0, [pc, #76]	@ (8001a2c <MX_GPIO_Init+0xbc>)
 80019e0:	f002 f9ec 	bl	8003dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fe:	f002 f873 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a02:	2308      	movs	r3, #8
 8001a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <MX_GPIO_Init+0xbc>)
 8001a1a:	f002 f865 	bl	8003ae8 <HAL_GPIO_Init>

}
 8001a1e:	bf00      	nop
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000400 	.word	0x48000400

08001a30 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a36:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <MX_I2C1_Init+0x7c>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <MX_I2C1_Init+0x80>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a64:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6a:	480f      	ldr	r0, [pc, #60]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a6c:	f002 f9be 	bl	8003dec <HAL_I2C_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f000 fa1f 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a7e:	f002 ff41 	bl	8004904 <HAL_I2CEx_ConfigAnalogFilter>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a88:	f000 fa16 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_I2C1_Init+0x78>)
 8001a90:	f002 ff83 	bl	800499a <HAL_I2CEx_ConfigDigitalFilter>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 fa0d 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  if (mpu6050_init() == false)
 8001a9e:	f7ff fa79 	bl	8000f94 <mpu6050_init>
	  // TODO: handle init error for mpu6050
  }

  /* USER CODE END I2C1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200006d8 	.word	0x200006d8
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	00b07cb4 	.word	0x00b07cb4

08001ab4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001aba:	4a20      	ldr	r2, [pc, #128]	@ (8001b3c <MX_I2C3_Init+0x88>)
 8001abc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0060112F;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <MX_I2C3_Init+0x8c>)
 8001ac2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aca:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001aee:	4812      	ldr	r0, [pc, #72]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001af0:	f002 f97c 	bl	8003dec <HAL_I2C_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001afa:	f000 f9dd 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afe:	2100      	movs	r1, #0
 8001b00:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001b02:	f002 feff 	bl	8004904 <HAL_I2CEx_ConfigAnalogFilter>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b0c:	f000 f9d4 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4809      	ldr	r0, [pc, #36]	@ (8001b38 <MX_I2C3_Init+0x84>)
 8001b14:	f002 ff41 	bl	800499a <HAL_I2CEx_ConfigDigitalFilter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 f9cb 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  ssd1306_Init();
 8001b22:	f7ff fb73 	bl	800120c <ssd1306_Init>

  draw_github_intro();
 8001b26:	f7ff fdc9 	bl	80016bc <draw_github_intro>
  HAL_Delay(1000); // let the logo stay on the screen for a second
 8001b2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b2e:	f000 fdb5 	bl	800269c <HAL_Delay>

  /* USER CODE END I2C3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000072c 	.word	0x2000072c
 8001b3c:	40005c00 	.word	0x40005c00
 8001b40:	0060112f 	.word	0x0060112f

08001b44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a2      	sub	sp, #136	@ 0x88
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	2254      	movs	r2, #84	@ 0x54
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f006 fb05 	bl	8008174 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca8 <HAL_I2C_MspInit+0x164>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d138      	bne.n	8001be6 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fe03 	bl	800578c <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b8c:	f000 f994 	bl	8001eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b46      	ldr	r3, [pc, #280]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	4a45      	ldr	r2, [pc, #276]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9c:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba8:	23c0      	movs	r3, #192	@ 0xc0
 8001baa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	483a      	ldr	r0, [pc, #232]	@ (8001cb0 <HAL_I2C_MspInit+0x16c>)
 8001bc8:	f001 ff8e 	bl	8003ae8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bcc:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	4a36      	ldr	r2, [pc, #216]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001bd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd8:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001be4:	e05c      	b.n	8001ca0 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C3)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a32      	ldr	r2, [pc, #200]	@ (8001cb4 <HAL_I2C_MspInit+0x170>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d157      	bne.n	8001ca0 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bf4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fdc4 	bl	800578c <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8001c0a:	f000 f955 	bl	8001eb8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c50:	2304      	movs	r3, #4
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c60:	f001 ff42 	bl	8003ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c64:	2310      	movs	r3, #16
 8001c66:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c68:	2312      	movs	r3, #18
 8001c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c76:	2304      	movs	r3, #4
 8001c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c80:	4619      	mov	r1, r3
 8001c82:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <HAL_I2C_MspInit+0x16c>)
 8001c84:	f001 ff30 	bl	8003ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_I2C_MspInit+0x168>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3788      	adds	r7, #136	@ 0x88
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	40005c00 	.word	0x40005c00

08001cb8 <print_temperature_data>:
}

/* USER CODE BEGIN 1 */

void print_temperature_data(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0b8      	sub	sp, #224	@ 0xe0
 8001cbc:	af02      	add	r7, sp, #8
	float temp_value = mpu6050_get_temperature_data();
 8001cbe:	f7ff f9c3 	bl	8001048 <mpu6050_get_temperature_data>
 8001cc2:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
	// comes in as C, convert to F
	// (C × 9/5) + 32
	float temp_value_F = (temp_value * 1.8) + 32.0;
 8001cc6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001cca:	f7fe fc47 	bl	800055c <__aeabi_f2d>
 8001cce:	a338      	add	r3, pc, #224	@ (adr r3, 8001db0 <print_temperature_data+0xf8>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc9a 	bl	800060c <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <print_temperature_data+0xe8>)
 8001ce6:	f7fe fadb 	bl	80002a0 <__adddf3>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff63 	bl	8000bbc <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	char temp_msg[MAX_BUFFER_LEN] = "";
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d04:	2260      	movs	r2, #96	@ 0x60
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f006 fa33 	bl	8008174 <memset>

	snprintf(temp_msg, MAX_BUFFER_LEN, "temperature is: %.1f\r\n", temp_value_F);
 8001d0e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001d12:	f7fe fc23 	bl	800055c <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8001d22:	4a20      	ldr	r2, [pc, #128]	@ (8001da4 <print_temperature_data+0xec>)
 8001d24:	2164      	movs	r1, #100	@ 0x64
 8001d26:	f006 f903 	bl	8007f30 <sniprintf>

	// output over the uart to serial port
	uint16_t temp_buffer_len = strlen(temp_msg);
 8001d2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa9e 	bl	8000270 <strlen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
	serial_uart_send_tx(temp_msg, temp_buffer_len);
 8001d3a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8001d3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fb95 	bl	8002474 <serial_uart_send_tx>

	// output to the OLED display
	ssd1306_Fill(Black);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fac8 	bl	80012e0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8001d50:	2100      	movs	r1, #0
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff fc0e 	bl	8001574 <ssd1306_SetCursor>
	char temp_F[MAX_BUFFER_LEN] = "";
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	2260      	movs	r2, #96	@ 0x60
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f006 fa05 	bl	8008174 <memset>
	snprintf(temp_F, MAX_BUFFER_LEN, "Temp: %.1fF", temp_value_F);
 8001d6a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001d6e:	f7fe fbf5 	bl	800055c <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	1d38      	adds	r0, r7, #4
 8001d78:	e9cd 2300 	strd	r2, r3, [sp]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <print_temperature_data+0xf0>)
 8001d7e:	2164      	movs	r1, #100	@ 0x64
 8001d80:	f006 f8d6 	bl	8007f30 <sniprintf>
	ssd1306_WriteString(temp_F, Font_11x18, White);
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <print_temperature_data+0xf4>)
 8001d86:	1d38      	adds	r0, r7, #4
 8001d88:	2201      	movs	r2, #1
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8e:	f7ff fbcb 	bl	8001528 <ssd1306_WriteString>
}
 8001d92:	bf00      	nop
 8001d94:	37d8      	adds	r7, #216	@ 0xd8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	40400000 	.word	0x40400000
 8001da4:	0800a3b0 	.word	0x0800a3b0
 8001da8:	0800a3c8 	.word	0x0800a3c8
 8001dac:	0800b1d8 	.word	0x0800b1d8
 8001db0:	cccccccd 	.word	0xcccccccd
 8001db4:	3ffccccc 	.word	0x3ffccccc

08001db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dbc:	f000 fbf9 	bl	80025b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc0:	f000 f818 	bl	8001df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc4:	f7ff fdd4 	bl	8001970 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dc8:	f000 f9e2 	bl	8002190 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001dcc:	f000 f9a6 	bl	800211c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001dd0:	f7ff fc8c 	bl	80016ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8001dd4:	f7ff fe2c 	bl	8001a30 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001dd8:	f7ff fe6c 	bl	8001ab4 <MX_I2C3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001de0:	f000 fc5c 	bl	800269c <HAL_Delay>
	  print_temperature_data();
 8001de4:	f7ff ff68 	bl	8001cb8 <print_temperature_data>
	  pollADC();
 8001de8:	f7ff fd4c 	bl	8001884 <pollADC>
//	  print_air_quality_data();
	  ssd1306_UpdateScreen();
 8001dec:	f7ff fa90 	bl	8001310 <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 8001df0:	bf00      	nop
 8001df2:	e7f3      	b.n	8001ddc <main+0x24>

08001df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b096      	sub	sp, #88	@ 0x58
 8001df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	2244      	movs	r2, #68	@ 0x44
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f006 f9b6 	bl	8008174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e1a:	f002 fe29 	bl	8004a70 <HAL_PWREx_ControlVoltageScaling>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e24:	f000 f848 	bl	8001eb8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e28:	f002 fe04 	bl	8004a34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <SystemClock_Config+0xc0>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	4a20      	ldr	r2, [pc, #128]	@ (8001eb4 <SystemClock_Config+0xc0>)
 8001e34:	f023 0318 	bic.w	r3, r3, #24
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e3c:	2314      	movs	r3, #20
 8001e3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e44:	2301      	movs	r3, #1
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e4c:	2360      	movs	r3, #96	@ 0x60
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e50:	2302      	movs	r3, #2
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e54:	2301      	movs	r3, #1
 8001e56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e60:	2307      	movs	r3, #7
 8001e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fe53 	bl	8004b1c <HAL_RCC_OscConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e7c:	f000 f81c 	bl	8001eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e80:	230f      	movs	r3, #15
 8001e82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e84:	2303      	movs	r3, #3
 8001e86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	2101      	movs	r1, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fa53 	bl	8005344 <HAL_RCC_ClockConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ea4:	f000 f808 	bl	8001eb8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ea8:	f003 fe66 	bl	8005b78 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001eac:	bf00      	nop
 8001eae:	3758      	adds	r7, #88	@ 0x58
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
}
 8001ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <Error_Handler+0x8>

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <NMI_Handler+0x4>

08001f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <MemManage_Handler+0x4>

08001f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f62:	f000 fb7b 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_kill>:

int _kill(int pid, int sig)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f84:	f006 f902 	bl	800818c <__errno>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2216      	movs	r2, #22
 8001f8c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_exit>:

void _exit (int status)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffe7 	bl	8001f7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <_exit+0x12>

08001fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e00a      	b.n	8001fd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc2:	f3af 8000 	nop.w
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf0      	blt.n	8001fc2 <_read+0x12>
  }

  return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e009      	b.n	8002010 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf1      	blt.n	8001ffc <_write+0x12>
  }
  return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_close>:

int _close(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204a:	605a      	str	r2, [r3, #4]
  return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_isatty>:

int _isatty(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f006 f866 	bl	800818c <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000c000 	.word	0x2000c000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	20000780 	.word	0x20000780
 80020f4:	20000ab8 	.word	0x20000ab8

080020f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002122:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <MX_USART1_UART_Init+0x6c>)
 8002124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002126:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002128:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800212c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215e:	4809      	ldr	r0, [pc, #36]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 8002160:	f003 fe0c 	bl	8005d7c <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800216a:	f7ff fea5 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_Delay(20); // delay needed to get UART working properly
 800216e:	2014      	movs	r0, #20
 8002170:	f000 fa94 	bl	800269c <HAL_Delay>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002174:	2201      	movs	r2, #1
 8002176:	4905      	ldr	r1, [pc, #20]	@ (800218c <MX_USART1_UART_Init+0x70>)
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <MX_USART1_UART_Init+0x68>)
 800217a:	f003 ff35 	bl	8005fe8 <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000854 	.word	0x20000854
 8002188:	40013800 	.word	0x40013800
 800218c:	20000784 	.word	0x20000784

08002190 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002194:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 8002196:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <MX_USART2_UART_Init+0x74>)
 8002198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800219a:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 800219c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d2:	480b      	ldr	r0, [pc, #44]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021d4:	f003 fdd2 	bl	8005d7c <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021de:	f7ff fe6b 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_Delay(20); // delay needed to get UART working properly
 80021e2:	2014      	movs	r0, #20
 80021e4:	f000 fa5a 	bl	800269c <HAL_Delay>

  HAL_UART_Transmit_IT(&huart2, uart2_tx_buffer, MAX_BUFFER_LEN);
 80021e8:	2264      	movs	r2, #100	@ 0x64
 80021ea:	4907      	ldr	r1, [pc, #28]	@ (8002208 <MX_USART2_UART_Init+0x78>)
 80021ec:	4804      	ldr	r0, [pc, #16]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021ee:	f003 fe9d 	bl	8005f2c <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80021f2:	2201      	movs	r2, #1
 80021f4:	4905      	ldr	r1, [pc, #20]	@ (800220c <MX_USART2_UART_Init+0x7c>)
 80021f6:	4802      	ldr	r0, [pc, #8]	@ (8002200 <MX_USART2_UART_Init+0x70>)
 80021f8:	f003 fef6 	bl	8005fe8 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200008dc 	.word	0x200008dc
 8002204:	40004400 	.word	0x40004400
 8002208:	20000788 	.word	0x20000788
 800220c:	20000785 	.word	0x20000785

08002210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0a0      	sub	sp, #128	@ 0x80
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	2254      	movs	r2, #84	@ 0x54
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f005 ff9f 	bl	8008174 <memset>
  if(uartHandle->Instance==USART1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a46      	ldr	r2, [pc, #280]	@ (8002354 <HAL_UART_MspInit+0x144>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d140      	bne.n	80022c2 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002240:	2301      	movs	r3, #1
 8002242:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002244:	2300      	movs	r3, #0
 8002246:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fa9d 	bl	800578c <HAL_RCCEx_PeriphCLKConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002258:	f7ff fe2e 	bl	8001eb8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800225c:	4b3e      	ldr	r3, [pc, #248]	@ (8002358 <HAL_UART_MspInit+0x148>)
 800225e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002260:	4a3d      	ldr	r2, [pc, #244]	@ (8002358 <HAL_UART_MspInit+0x148>)
 8002262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002266:	6613      	str	r3, [r2, #96]	@ 0x60
 8002268:	4b3b      	ldr	r3, [pc, #236]	@ (8002358 <HAL_UART_MspInit+0x148>)
 800226a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <HAL_UART_MspInit+0x148>)
 8002276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002278:	4a37      	ldr	r2, [pc, #220]	@ (8002358 <HAL_UART_MspInit+0x148>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <HAL_UART_MspInit+0x148>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800228c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002290:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229a:	2302      	movs	r3, #2
 800229c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800229e:	2307      	movs	r3, #7
 80022a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ac:	f001 fc1c 	bl	8003ae8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2025      	movs	r0, #37	@ 0x25
 80022b6:	f001 fb62 	bl	800397e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2025      	movs	r0, #37	@ 0x25
 80022bc:	f001 fb7b 	bl	80039b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022c0:	e043      	b.n	800234a <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a25      	ldr	r2, [pc, #148]	@ (800235c <HAL_UART_MspInit+0x14c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d13e      	bne.n	800234a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d4:	f107 0318 	add.w	r3, r7, #24
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fa57 	bl	800578c <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80022e4:	f7ff fde8 	bl	8001eb8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_UART_MspInit+0x148>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002358 <HAL_UART_MspInit+0x148>)
 80022ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <HAL_UART_MspInit+0x148>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <HAL_UART_MspInit+0x148>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002304:	4a14      	ldr	r2, [pc, #80]	@ (8002358 <HAL_UART_MspInit+0x148>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_UART_MspInit+0x148>)
 800230e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002318:	230c      	movs	r3, #12
 800231a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002328:	2307      	movs	r3, #7
 800232a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002336:	f001 fbd7 	bl	8003ae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	2026      	movs	r0, #38	@ 0x26
 8002340:	f001 fb1d 	bl	800397e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002344:	2026      	movs	r0, #38	@ 0x26
 8002346:	f001 fb36 	bl	80039b6 <HAL_NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3780      	adds	r7, #128	@ 0x80
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40013800 	.word	0x40013800
 8002358:	40021000 	.word	0x40021000
 800235c:	40004400 	.word	0x40004400

08002360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <USART1_IRQHandler+0x10>)
 8002366:	f003 fe8b 	bl	8006080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000854 	.word	0x20000854

08002374 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <USART2_IRQHandler+0x10>)
 800237a:	f003 fe81 	bl	8006080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200008dc 	.word	0x200008dc

08002388 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_UART_TxCpltCallback+0x34>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d102      	bne.n	80023a2 <HAL_UART_TxCpltCallback+0x1a>
	{
		serial_uart_handle_tx();
 800239c:	f000 f882 	bl	80024a4 <serial_uart_handle_tx>
	}
	else if (huart->Instance == huart1.Instance)
	{
		hm10_uart_handle_tx();
	}
}
 80023a0:	e007      	b.n	80023b2 <HAL_UART_TxCpltCallback+0x2a>
	else if (huart->Instance == huart1.Instance)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_UART_TxCpltCallback+0x38>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_TxCpltCallback+0x2a>
		hm10_uart_handle_tx();
 80023ae:	f7fe fdcd 	bl	8000f4c <hm10_uart_handle_tx>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200008dc 	.word	0x200008dc
 80023c0:	20000854 	.word	0x20000854

080023c4 <HAL_UART_RxCpltCallback>:

// called from HAL for any UART callback setup with Interrupts.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	// if from the HCO5 or HM10 Bluetooth module
	if (huart->Instance == huart1.Instance)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <HAL_UART_RxCpltCallback+0x4c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10a      	bne.n	80023ee <HAL_UART_RxCpltCallback+0x2a>
	{
		hm10_uart_handle_rx(uart1_rx_data);
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_UART_RxCpltCallback+0x50>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fdbc 	bl	8000f5a <hm10_uart_handle_rx>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80023e2:	2201      	movs	r2, #1
 80023e4:	490b      	ldr	r1, [pc, #44]	@ (8002414 <HAL_UART_RxCpltCallback+0x50>)
 80023e6:	480a      	ldr	r0, [pc, #40]	@ (8002410 <HAL_UART_RxCpltCallback+0x4c>)
 80023e8:	f003 fdfe 	bl	8005fe8 <HAL_UART_Receive_IT>
	else if (huart->Instance == huart2.Instance)
	{
		serial_uart_handle_rx();
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
	}
}
 80023ec:	e00c      	b.n	8002408 <HAL_UART_RxCpltCallback+0x44>
	else if (huart->Instance == huart2.Instance)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <HAL_UART_RxCpltCallback+0x54>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d106      	bne.n	8002408 <HAL_UART_RxCpltCallback+0x44>
		serial_uart_handle_rx();
 80023fa:	f000 f85f 	bl	80024bc <serial_uart_handle_rx>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80023fe:	2201      	movs	r2, #1
 8002400:	4906      	ldr	r1, [pc, #24]	@ (800241c <HAL_UART_RxCpltCallback+0x58>)
 8002402:	4805      	ldr	r0, [pc, #20]	@ (8002418 <HAL_UART_RxCpltCallback+0x54>)
 8002404:	f003 fdf0 	bl	8005fe8 <HAL_UART_Receive_IT>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000854 	.word	0x20000854
 8002414:	20000784 	.word	0x20000784
 8002418:	200008dc 	.word	0x200008dc
 800241c:	20000785 	.word	0x20000785

08002420 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	char* error_msg = "UART error occurred.";
 8002428:	4b0d      	ldr	r3, [pc, #52]	@ (8002460 <HAL_UART_ErrorCallback+0x40>)
 800242a:	60fb      	str	r3, [r7, #12]

	if (huart->Instance == huart1.Instance)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <HAL_UART_ErrorCallback+0x44>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_UART_ErrorCallback+0x26>
	{
		error_msg = "HM10 UART error occurred.";
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_UART_ErrorCallback+0x48>)
 800243a:	60fb      	str	r3, [r7, #12]
		serial_uart_send_tx(error_msg, sizeof(error_msg));
 800243c:	2104      	movs	r1, #4
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f818 	bl	8002474 <serial_uart_send_tx>
	else if (huart->Instance == huart2.Instance)
	{
		error_msg = "Serial port UART error occurred";
		// probably output over BLE or just output to terminal.
	}
}
 8002444:	e007      	b.n	8002456 <HAL_UART_ErrorCallback+0x36>
	else if (huart->Instance == huart2.Instance)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b08      	ldr	r3, [pc, #32]	@ (800246c <HAL_UART_ErrorCallback+0x4c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d101      	bne.n	8002456 <HAL_UART_ErrorCallback+0x36>
		error_msg = "Serial port UART error occurred";
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_UART_ErrorCallback+0x50>)
 8002454:	60fb      	str	r3, [r7, #12]
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	0800a3d4 	.word	0x0800a3d4
 8002464:	20000854 	.word	0x20000854
 8002468:	0800a3ec 	.word	0x0800a3ec
 800246c:	200008dc 	.word	0x200008dc
 8002470:	0800a408 	.word	0x0800a408

08002474 <serial_uart_send_tx>:
 * \brief    Sends content in the buffer over uart tx
 * \param[in] tx_buff - Buffer with the message we want to send.
 * \param[in] buffer_len - Maximum length of the buffer we want to send.
 */
void serial_uart_send_tx(const char *buffer, uint16_t buffer_len)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
	strcpy((char *)uart2_tx_buffer, buffer);
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4806      	ldr	r0, [pc, #24]	@ (800249c <serial_uart_send_tx+0x28>)
 8002484:	f005 febd 	bl	8008202 <strcpy>
	HAL_UART_Transmit(&huart2, uart2_tx_buffer, buffer_len, 100);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	2364      	movs	r3, #100	@ 0x64
 800248c:	4903      	ldr	r1, [pc, #12]	@ (800249c <serial_uart_send_tx+0x28>)
 800248e:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <serial_uart_send_tx+0x2c>)
 8002490:	f003 fcc2 	bl	8005e18 <HAL_UART_Transmit>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000788 	.word	0x20000788
 80024a0:	200008dc 	.word	0x200008dc

080024a4 <serial_uart_handle_tx>:
/*!
 * \brief    Readies the uart tx buffer
 * \param[in] huart - pointer to huart handle.
 */
void serial_uart_handle_tx()
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	memset(uart2_tx_buffer, '\0', (size_t)MAX_BUFFER_LEN); //empty the transmit data buffer to be ready for new data.
 80024a8:	2264      	movs	r2, #100	@ 0x64
 80024aa:	2100      	movs	r1, #0
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <serial_uart_handle_tx+0x14>)
 80024ae:	f005 fe61 	bl	8008174 <memset>
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000788 	.word	0x20000788

080024bc <serial_uart_handle_rx>:
/*!
 * \brief    Handles uart rx by taking in next character, processing it, then sending out over tx
 * \param[in] huart - pointer to huart handle.
 */
void serial_uart_handle_rx()
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
	// if we didn't receive the carriage return increment the rx_buffer and add the next character
	if (uart2_rx_data != '\r')
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <serial_uart_handle_rx+0x84>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b0d      	cmp	r3, #13
 80024c8:	d00e      	beq.n	80024e8 <serial_uart_handle_rx+0x2c>
	{
		// if there is data coming into the rx_data pointer that isn't the "Enter" character then add it to the buffer.
		uart2_rx_buffer[counter_s++] = uart2_rx_data;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <serial_uart_handle_rx+0x88>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	491c      	ldr	r1, [pc, #112]	@ (8002544 <serial_uart_handle_rx+0x88>)
 80024d2:	600a      	str	r2, [r1, #0]
 80024d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002540 <serial_uart_handle_rx+0x84>)
 80024d6:	7811      	ldrb	r1, [r2, #0]
 80024d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002548 <serial_uart_handle_rx+0x8c>)
 80024da:	54d1      	strb	r1, [r2, r3]
		// Get ready for new data in rx_data_s pointer.
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	4918      	ldr	r1, [pc, #96]	@ (8002540 <serial_uart_handle_rx+0x84>)
 80024e0:	481a      	ldr	r0, [pc, #104]	@ (800254c <serial_uart_handle_rx+0x90>)
 80024e2:	f003 fd81 	bl	8005fe8 <HAL_UART_Receive_IT>
		return;
 80024e6:	e028      	b.n	800253a <serial_uart_handle_rx+0x7e>
	}

	// otherwise we did get a carriage return, check against our expected string
	if (strcmp(hello_cmd, (char*)uart2_rx_buffer) == 0) // string compare the command against what we received from the sender.
 80024e8:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <serial_uart_handle_rx+0x94>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4916      	ldr	r1, [pc, #88]	@ (8002548 <serial_uart_handle_rx+0x8c>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fec6 	bl	8000280 <strcmp>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <serial_uart_handle_rx+0x4c>
	{
		const char *response = "Hello to you too!\r\n";
 80024fa:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <serial_uart_handle_rx+0x98>)
 80024fc:	603b      	str	r3, [r7, #0]
		strcpy((char*)uart2_tx_buffer, response); // move response into tx buffer
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	4815      	ldr	r0, [pc, #84]	@ (8002558 <serial_uart_handle_rx+0x9c>)
 8002502:	f005 fe7e 	bl	8008202 <strcpy>
 8002506:	e005      	b.n	8002514 <serial_uart_handle_rx+0x58>
	}
	else
	{
		// otherwise put an error in the tx buffer.
		const char *error = "Uh oh, didn't get the right word...\r\n";
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <serial_uart_handle_rx+0xa0>)
 800250a:	607b      	str	r3, [r7, #4]
		strcpy((char*)uart2_tx_buffer, error);
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4812      	ldr	r0, [pc, #72]	@ (8002558 <serial_uart_handle_rx+0x9c>)
 8002510:	f005 fe77 	bl	8008202 <strcpy>
	}

	// now transmit out the answer over tx.
	HAL_UART_Transmit(&huart2, uart2_tx_buffer, (uint16_t)MAX_BUFFER_LEN, 100);
 8002514:	2364      	movs	r3, #100	@ 0x64
 8002516:	2264      	movs	r2, #100	@ 0x64
 8002518:	490f      	ldr	r1, [pc, #60]	@ (8002558 <serial_uart_handle_rx+0x9c>)
 800251a:	480c      	ldr	r0, [pc, #48]	@ (800254c <serial_uart_handle_rx+0x90>)
 800251c:	f003 fc7c 	bl	8005e18 <HAL_UART_Transmit>
	// clear both buffers
	memset(uart2_tx_buffer, '\0', (size_t)MAX_BUFFER_LEN);
 8002520:	2264      	movs	r2, #100	@ 0x64
 8002522:	2100      	movs	r1, #0
 8002524:	480c      	ldr	r0, [pc, #48]	@ (8002558 <serial_uart_handle_rx+0x9c>)
 8002526:	f005 fe25 	bl	8008174 <memset>
	memset(uart2_rx_buffer, '\0', (size_t)MAX_BUFFER_LEN);
 800252a:	2264      	movs	r2, #100	@ 0x64
 800252c:	2100      	movs	r1, #0
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <serial_uart_handle_rx+0x8c>)
 8002530:	f005 fe20 	bl	8008174 <memset>
	counter_s = 0; // reset the counter to be ready for new data.
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <serial_uart_handle_rx+0x88>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000785 	.word	0x20000785
 8002544:	20000850 	.word	0x20000850
 8002548:	200007ec 	.word	0x200007ec
 800254c:	200008dc 	.word	0x200008dc
 8002550:	2000000c 	.word	0x2000000c
 8002554:	0800a430 	.word	0x0800a430
 8002558:	20000788 	.word	0x20000788
 800255c:	0800a444 	.word	0x0800a444

08002560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002598 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002564:	f7ff fdc8 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002568:	480c      	ldr	r0, [pc, #48]	@ (800259c <LoopForever+0x6>)
  ldr r1, =_edata
 800256a:	490d      	ldr	r1, [pc, #52]	@ (80025a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800256c:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <LoopForever+0xe>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002580:	4c0a      	ldr	r4, [pc, #40]	@ (80025ac <LoopForever+0x16>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f005 fe03 	bl	8008198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002592:	f7ff fc11 	bl	8001db8 <main>

08002596 <LoopForever>:

LoopForever:
    b LoopForever
 8002596:	e7fe      	b.n	8002596 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002598:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025a4:	0800b7ac 	.word	0x0800b7ac
  ldr r2, =_sbss
 80025a8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025ac:	20000ab4 	.word	0x20000ab4

080025b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC1_IRQHandler>

080025b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025bc:	2003      	movs	r0, #3
 80025be:	f001 f9d3 	bl	8003968 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f80e 	bl	80025e4 <HAL_InitTick>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	e001      	b.n	80025d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025d4:	f7ff fc76 	bl	8001ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025d8:	79fb      	ldrb	r3, [r7, #7]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025f0:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <HAL_InitTick+0x6c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d023      	beq.n	8002640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025f8:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <HAL_InitTick+0x70>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_InitTick+0x6c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002606:	fbb3 f3f1 	udiv	r3, r3, r1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f001 f9df 	bl	80039d2 <HAL_SYSTICK_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b0f      	cmp	r3, #15
 800261e:	d809      	bhi.n	8002634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002620:	2200      	movs	r2, #0
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002628:	f001 f9a9 	bl	800397e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800262c:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_InitTick+0x74>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e007      	b.n	8002644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e004      	b.n	8002644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e001      	b.n	8002644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000014 	.word	0x20000014
 8002654:	20000008 	.word	0x20000008
 8002658:	20000010 	.word	0x20000010

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000014 	.word	0x20000014
 8002680:	20000964 	.word	0x20000964

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000964 	.word	0x20000964

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_Delay+0x44>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffde 	bl	8002684 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000014 	.word	0x20000014

080026e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3360      	adds	r3, #96	@ 0x60
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <LL_ADC_SetOffset+0x44>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	4313      	orrs	r3, r2
 800277c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	03fff000 	.word	0x03fff000

08002794 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3360      	adds	r3, #96	@ 0x60
 80027a2:	461a      	mov	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3360      	adds	r3, #96	@ 0x60
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3330      	adds	r3, #48	@ 0x30
 800282c:	461a      	mov	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	4413      	add	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	211f      	movs	r1, #31
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 011f 	and.w	r1, r3, #31
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3314      	adds	r3, #20
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	0e5b      	lsrs	r3, r3, #25
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	0d1b      	lsrs	r3, r3, #20
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2107      	movs	r1, #7
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	0d1b      	lsrs	r3, r3, #20
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0318 	and.w	r3, r3, #24
 80028ee:	4908      	ldr	r1, [pc, #32]	@ (8002910 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028f0:	40d9      	lsrs	r1, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	400b      	ands	r3, r1
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	0007ffff 	.word	0x0007ffff

08002914 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002924:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6093      	str	r3, [r2, #8]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800294c:	d101      	bne.n	8002952 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002970:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002974:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800299c:	d101      	bne.n	80029a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <LL_ADC_IsEnabled+0x18>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <LL_ADC_IsEnabled+0x1a>
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d101      	bne.n	8002a3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d101      	bne.n	8002a64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e126      	b.n	8002cdc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe fe8d 	bl	80017bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff3f 	bl	8002938 <LL_ADC_IsDeepPowerDownEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff25 	bl	8002914 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff5a 	bl	8002988 <LL_ADC_IsInternalRegulatorEnabled>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d115      	bne.n	8002b06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff3e 	bl	8002960 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce4 <HAL_ADC_Init+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	4a7f      	ldr	r2, [pc, #508]	@ (8002ce8 <HAL_ADC_Init+0x274>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002af8:	e002      	b.n	8002b00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f9      	bne.n	8002afa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff3c 	bl	8002988 <LL_ADC_IsInternalRegulatorEnabled>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10d      	bne.n	8002b32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff75 	bl	8002a26 <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 80bf 	bne.w	8002cca <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80bb 	bne.w	8002cca <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b5c:	f043 0202 	orr.w	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff35 	bl	80029d8 <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b74:	485d      	ldr	r0, [pc, #372]	@ (8002cec <HAL_ADC_Init+0x278>)
 8002b76:	f7ff ff2f 	bl	80029d8 <LL_ADC_IsEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4619      	mov	r1, r3
 8002b86:	485a      	ldr	r0, [pc, #360]	@ (8002cf0 <HAL_ADC_Init+0x27c>)
 8002b88:	f7ff fdac 	bl	80026e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7e5b      	ldrb	r3, [r3, #25]
 8002b90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ba2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002baa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d106      	bne.n	8002bc8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	045b      	lsls	r3, r3, #17
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	4b42      	ldr	r3, [pc, #264]	@ (8002cf4 <HAL_ADC_Init+0x280>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff25 	bl	8002a4c <LL_ADC_INJ_IsConversionOngoing>
 8002c02:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d13d      	bne.n	8002c86 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d13a      	bne.n	8002c86 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c14:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c1c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c2c:	f023 0302 	bic.w	r3, r3, #2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	69b9      	ldr	r1, [r7, #24]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d118      	bne.n	8002c76 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c4e:	f023 0304 	bic.w	r3, r3, #4
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c66:	430a      	orrs	r2, r1
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	e007      	b.n	8002c86 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	f023 010f 	bic.w	r1, r3, #15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ca6:	e007      	b.n	8002cb8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 020f 	bic.w	r2, r2, #15
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	f023 0303 	bic.w	r3, r3, #3
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002cc8:	e007      	b.n	8002cda <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cda:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000008 	.word	0x20000008
 8002ce8:	053e2d63 	.word	0x053e2d63
 8002cec:	50040000 	.word	0x50040000
 8002cf0:	50040300 	.word	0x50040300
 8002cf4:	fff0c007 	.word	0xfff0c007

08002cf8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fe8e 	bl	8002a26 <LL_ADC_REG_IsConversionOngoing>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d14f      	bne.n	8002db0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Start+0x26>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e04b      	b.n	8002db6 <HAL_ADC_Start+0xbe>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fcc8 	bl	80036bc <ADC_Enable>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d137      	bne.n	8002da6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d56:	d106      	bne.n	8002d66 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f023 0206 	bic.w	r2, r3, #6
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d64:	e002      	b.n	8002d6c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	221c      	movs	r2, #28
 8002d72:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fe2d 	bl	80029fe <LL_ADC_REG_StartConversion>
 8002da4:	e006      	b.n	8002db4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002dae:	e001      	b.n	8002db4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d102      	bne.n	8002dd6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e010      	b.n	8002df8 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e06f      	b.n	8002ed4 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002df4:	2304      	movs	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002df8:	f7ff fc44 	bl	8002684 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dfe:	e021      	b.n	8002e44 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e06:	d01d      	beq.n	8002e44 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e08:	f7ff fc3c 	bl	8002684 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <HAL_ADC_PollForConversion+0x60>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d112      	bne.n	8002e44 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f043 0204 	orr.w	r2, r3, #4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e047      	b.n	8002ed4 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0d6      	beq.n	8002e00 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fcc7 	bl	80027f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01c      	beq.n	8002ea8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7e5b      	ldrb	r3, [r3, #25]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d111      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d104      	bne.n	8002ec0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2208      	movs	r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e008      	b.n	8002ed2 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	220c      	movs	r2, #12
 8002ed0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0b6      	sub	sp, #216	@ 0xd8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x22>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e3bb      	b.n	8003692 <HAL_ADC_ConfigChannel+0x79a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd7d 	bl	8002a26 <LL_ADC_REG_IsConversionOngoing>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 83a0 	bne.w	8003674 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d824      	bhi.n	8002f8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	3b02      	subs	r3, #2
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d81b      	bhi.n	8002f86 <HAL_ADC_ConfigChannel+0x8e>
 8002f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_ADC_ConfigChannel+0x5c>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	08002f6d 	.word	0x08002f6d
 8002f5c:	08002f75 	.word	0x08002f75
 8002f60:	08002f7d 	.word	0x08002f7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f64:	230c      	movs	r3, #12
 8002f66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f6a:	e010      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f6c:	2312      	movs	r3, #18
 8002f6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f72:	e00c      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f74:	2318      	movs	r3, #24
 8002f76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f7a:	e008      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f84:	e003      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f86:	2306      	movs	r3, #6
 8002f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002f9c:	f7ff fc3e 	bl	800281c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fd3e 	bl	8002a26 <LL_ADC_REG_IsConversionOngoing>
 8002faa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fd4a 	bl	8002a4c <LL_ADC_INJ_IsConversionOngoing>
 8002fb8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 81a4 	bne.w	800330e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 819f 	bne.w	800330e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f7ff fc49 	bl	8002874 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d00a      	beq.n	800301a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003014:	f7ff fb9a 	bl	800274c <LL_ADC_SetOffset>
 8003018:	e179      	b.n	800330e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fbb7 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x14e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fbac 	bl	8002794 <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	e01e      	b.n	8003084 <HAL_ADC_ConfigChannel+0x18c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fba1 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003068:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800306c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e004      	b.n	8003082 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1a4>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	e018      	b.n	80030ce <HAL_ADC_ConfigChannel+0x1d6>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80030b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80030b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e004      	b.n	80030ce <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80030c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d106      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fb70 	bl	80027c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fb54 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x214>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fb49 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	e01e      	b.n	800314a <HAL_ADC_ConfigChannel+0x252>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fb3e 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800312a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e004      	b.n	8003148 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800313e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x26a>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	e018      	b.n	8003194 <HAL_ADC_ConfigChannel+0x29c>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800317a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800317e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e004      	b.n	8003194 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800318a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003194:	429a      	cmp	r2, r3
 8003196:	d106      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fb0d 	bl	80027c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff faf1 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x2da>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fae6 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	e01e      	b.n	8003210 <HAL_ADC_ConfigChannel+0x318>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2102      	movs	r1, #2
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fadb 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80031f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80031f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e004      	b.n	800320e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x330>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	e014      	b.n	8003252 <HAL_ADC_ConfigChannel+0x35a>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003236:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800323c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e004      	b.n	8003252 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	2102      	movs	r1, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff faae 	bl	80027c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2103      	movs	r1, #3
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fa92 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x398>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2103      	movs	r1, #3
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fa87 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	e017      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x3c8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2103      	movs	r1, #3
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fa7c 	bl	8002794 <LL_ADC_GetOffsetChannel>
 800329c:	4603      	mov	r3, r0
 800329e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80032ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80032b2:	2320      	movs	r3, #32
 80032b4:	e003      	b.n	80032be <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80032b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x3e0>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	e011      	b.n	80032fc <HAL_ADC_ConfigChannel+0x404>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80032e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80032ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	e003      	b.n	80032fc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80032f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	2103      	movs	r1, #3
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fa59 	bl	80027c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fb60 	bl	80029d8 <LL_ADC_IsEnabled>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 8140 	bne.w	80035a0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	461a      	mov	r2, r3
 800332e:	f7ff facd 	bl	80028cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4a8f      	ldr	r2, [pc, #572]	@ (8003574 <HAL_ADC_ConfigChannel+0x67c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	f040 8131 	bne.w	80035a0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x46e>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	3301      	adds	r3, #1
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2b09      	cmp	r3, #9
 800335c:	bf94      	ite	ls
 800335e:	2301      	movls	r3, #1
 8003360:	2300      	movhi	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	e019      	b.n	800339a <HAL_ADC_ConfigChannel+0x4a2>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003376:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2b09      	cmp	r3, #9
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800339a:	2b00      	cmp	r3, #0
 800339c:	d079      	beq.n	8003492 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x4c2>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	3301      	adds	r3, #1
 80033b2:	069b      	lsls	r3, r3, #26
 80033b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b8:	e015      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x4ee>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e003      	b.n	80033de <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80033d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	069b      	lsls	r3, r3, #26
 80033e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x50e>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	e017      	b.n	8003436 <HAL_ADC_ConfigChannel+0x53e>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003416:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e003      	b.n	800342a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	ea42 0103 	orr.w	r1, r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <HAL_ADC_ConfigChannel+0x564>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0e9b      	lsrs	r3, r3, #26
 800344c:	3301      	adds	r3, #1
 800344e:	f003 021f 	and.w	r2, r3, #31
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	051b      	lsls	r3, r3, #20
 800345a:	e018      	b.n	800348e <HAL_ADC_ConfigChannel+0x596>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800346e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e003      	b.n	8003480 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f003 021f 	and.w	r2, r3, #31
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800348e:	430b      	orrs	r3, r1
 8003490:	e081      	b.n	8003596 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x5b6>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0e9b      	lsrs	r3, r3, #26
 80034a4:	3301      	adds	r3, #1
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ac:	e015      	b.n	80034da <HAL_ADC_ConfigChannel+0x5e2>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80034c6:	2320      	movs	r3, #32
 80034c8:	e003      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	069b      	lsls	r3, r3, #26
 80034d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x602>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	e017      	b.n	800352a <HAL_ADC_ConfigChannel+0x632>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	61bb      	str	r3, [r7, #24]
  return result;
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e003      	b.n	800351e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	ea42 0103 	orr.w	r1, r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10d      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x65e>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	3301      	adds	r3, #1
 8003542:	f003 021f 	and.w	r2, r3, #31
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	3b1e      	subs	r3, #30
 800354e:	051b      	lsls	r3, r3, #20
 8003550:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003554:	e01e      	b.n	8003594 <HAL_ADC_ConfigChannel+0x69c>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	60fb      	str	r3, [r7, #12]
  return result;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e006      	b.n	8003580 <HAL_ADC_ConfigChannel+0x688>
 8003572:	bf00      	nop
 8003574:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	3301      	adds	r3, #1
 8003582:	f003 021f 	and.w	r2, r3, #31
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	3b1e      	subs	r3, #30
 800358e:	051b      	lsls	r3, r3, #20
 8003590:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003594:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359a:	4619      	mov	r1, r3
 800359c:	f7ff f96a 	bl	8002874 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b3d      	ldr	r3, [pc, #244]	@ (800369c <HAL_ADC_ConfigChannel+0x7a4>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d06c      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ac:	483c      	ldr	r0, [pc, #240]	@ (80036a0 <HAL_ADC_ConfigChannel+0x7a8>)
 80035ae:	f7ff f8bf 	bl	8002730 <LL_ADC_GetCommonPathInternalCh>
 80035b2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a3a      	ldr	r2, [pc, #232]	@ (80036a4 <HAL_ADC_ConfigChannel+0x7ac>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d127      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d121      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a35      	ldr	r2, [pc, #212]	@ (80036a8 <HAL_ADC_ConfigChannel+0x7b0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d157      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035de:	4619      	mov	r1, r3
 80035e0:	482f      	ldr	r0, [pc, #188]	@ (80036a0 <HAL_ADC_ConfigChannel+0x7a8>)
 80035e2:	f7ff f892 	bl	800270a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e6:	4b31      	ldr	r3, [pc, #196]	@ (80036ac <HAL_ADC_ConfigChannel+0x7b4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	4a30      	ldr	r2, [pc, #192]	@ (80036b0 <HAL_ADC_ConfigChannel+0x7b8>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003600:	e002      	b.n	8003608 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3b01      	subs	r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f9      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800360e:	e03a      	b.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a27      	ldr	r2, [pc, #156]	@ (80036b4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d113      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800361a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800361e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1f      	ldr	r2, [pc, #124]	@ (80036a8 <HAL_ADC_ConfigChannel+0x7b0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d12a      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003634:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003638:	4619      	mov	r1, r3
 800363a:	4819      	ldr	r0, [pc, #100]	@ (80036a0 <HAL_ADC_ConfigChannel+0x7a8>)
 800363c:	f7ff f865 	bl	800270a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003640:	e021      	b.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d11c      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800364c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a12      	ldr	r2, [pc, #72]	@ (80036a8 <HAL_ADC_ConfigChannel+0x7b0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d111      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003662:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003666:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800366a:	4619      	mov	r1, r3
 800366c:	480c      	ldr	r0, [pc, #48]	@ (80036a0 <HAL_ADC_ConfigChannel+0x7a8>)
 800366e:	f7ff f84c 	bl	800270a <LL_ADC_SetCommonPathInternalCh>
 8003672:	e008      	b.n	8003686 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800368e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003692:	4618      	mov	r0, r3
 8003694:	37d8      	adds	r7, #216	@ 0xd8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	80080000 	.word	0x80080000
 80036a0:	50040300 	.word	0x50040300
 80036a4:	c7520000 	.word	0xc7520000
 80036a8:	50040000 	.word	0x50040000
 80036ac:	20000008 	.word	0x20000008
 80036b0:	053e2d63 	.word	0x053e2d63
 80036b4:	cb840000 	.word	0xcb840000
 80036b8:	80000001 	.word	0x80000001

080036bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff f983 	bl	80029d8 <LL_ADC_IsEnabled>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d169      	bne.n	80037ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	4b36      	ldr	r3, [pc, #216]	@ (80037b8 <ADC_Enable+0xfc>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e055      	b.n	80037ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff f952 	bl	80029b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800370c:	482b      	ldr	r0, [pc, #172]	@ (80037bc <ADC_Enable+0x100>)
 800370e:	f7ff f80f 	bl	8002730 <LL_ADC_GetCommonPathInternalCh>
 8003712:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003714:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <ADC_Enable+0x104>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	4a28      	ldr	r2, [pc, #160]	@ (80037c4 <ADC_Enable+0x108>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003736:	e002      	b.n	800373e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	3b01      	subs	r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f9      	bne.n	8003738 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003744:	f7fe ff9e 	bl	8002684 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800374a:	e028      	b.n	800379e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff f941 	bl	80029d8 <LL_ADC_IsEnabled>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff f925 	bl	80029b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003766:	f7fe ff8d 	bl	8002684 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d914      	bls.n	800379e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00d      	beq.n	800379e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003786:	f043 0210 	orr.w	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d1cf      	bne.n	800374c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	8000003f 	.word	0x8000003f
 80037bc:	50040300 	.word	0x50040300
 80037c0:	20000008 	.word	0x20000008
 80037c4:	053e2d63 	.word	0x053e2d63

080037c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d8:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <__NVIC_SetPriorityGrouping+0x44>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037e4:	4013      	ands	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fa:	4a04      	ldr	r2, [pc, #16]	@ (800380c <__NVIC_SetPriorityGrouping+0x44>)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	60d3      	str	r3, [r2, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003814:	4b04      	ldr	r3, [pc, #16]	@ (8003828 <__NVIC_GetPriorityGrouping+0x18>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	f003 0307 	and.w	r3, r3, #7
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	2b00      	cmp	r3, #0
 800383c:	db0b      	blt.n	8003856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	f003 021f 	and.w	r2, r3, #31
 8003844:	4907      	ldr	r1, [pc, #28]	@ (8003864 <__NVIC_EnableIRQ+0x38>)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2001      	movs	r0, #1
 800384e:	fa00 f202 	lsl.w	r2, r0, r2
 8003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	e000e100 	.word	0xe000e100

08003868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	6039      	str	r1, [r7, #0]
 8003872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	2b00      	cmp	r3, #0
 800387a:	db0a      	blt.n	8003892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	490c      	ldr	r1, [pc, #48]	@ (80038b4 <__NVIC_SetPriority+0x4c>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	0112      	lsls	r2, r2, #4
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	440b      	add	r3, r1
 800388c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003890:	e00a      	b.n	80038a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4908      	ldr	r1, [pc, #32]	@ (80038b8 <__NVIC_SetPriority+0x50>)
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	3b04      	subs	r3, #4
 80038a0:	0112      	lsls	r2, r2, #4
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	440b      	add	r3, r1
 80038a6:	761a      	strb	r2, [r3, #24]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000e100 	.word	0xe000e100
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	@ 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f1c3 0307 	rsb	r3, r3, #7
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	bf28      	it	cs
 80038da:	2304      	movcs	r3, #4
 80038dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d902      	bls.n	80038ec <NVIC_EncodePriority+0x30>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3b03      	subs	r3, #3
 80038ea:	e000      	b.n	80038ee <NVIC_EncodePriority+0x32>
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	401a      	ands	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003904:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	43d9      	mvns	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	4313      	orrs	r3, r2
         );
}
 8003916:	4618      	mov	r0, r3
 8003918:	3724      	adds	r7, #36	@ 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003934:	d301      	bcc.n	800393a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003936:	2301      	movs	r3, #1
 8003938:	e00f      	b.n	800395a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393a:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <SysTick_Config+0x40>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003942:	210f      	movs	r1, #15
 8003944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003948:	f7ff ff8e 	bl	8003868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800394c:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <SysTick_Config+0x40>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003952:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <SysTick_Config+0x40>)
 8003954:	2207      	movs	r2, #7
 8003956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	e000e010 	.word	0xe000e010

08003968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff29 	bl	80037c8 <__NVIC_SetPriorityGrouping>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003990:	f7ff ff3e 	bl	8003810 <__NVIC_GetPriorityGrouping>
 8003994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	6978      	ldr	r0, [r7, #20]
 800399c:	f7ff ff8e 	bl	80038bc <NVIC_EncodePriority>
 80039a0:	4602      	mov	r2, r0
 80039a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff ff5d 	bl	8003868 <__NVIC_SetPriority>
}
 80039ae:	bf00      	nop
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4603      	mov	r3, r0
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ff31 	bl	800382c <__NVIC_EnableIRQ>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ffa2 	bl	8003924 <SysTick_Config>
 80039e0:	4603      	mov	r3, r0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d008      	beq.n	8003a14 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2204      	movs	r2, #4
 8003a06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e022      	b.n	8003a5a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 020e 	bic.w	r2, r2, #14
 8003a22:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a38:	f003 021c 	and.w	r2, r3, #28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d005      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2204      	movs	r2, #4
 8003a82:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e029      	b.n	8003ade <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 020e 	bic.w	r2, r2, #14
 8003a98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	f003 021c 	and.w	r2, r3, #28
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
    }
  }
  return status;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af6:	e148      	b.n	8003d8a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 813a 	beq.w	8003d84 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d005      	beq.n	8003b28 <HAL_GPIO_Init+0x40>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d130      	bne.n	8003b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5e:	2201      	movs	r2, #1
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 0201 	and.w	r2, r3, #1
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d017      	beq.n	8003bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d123      	bne.n	8003c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	08da      	lsrs	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	08da      	lsrs	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3208      	adds	r2, #8
 8003c14:	6939      	ldr	r1, [r7, #16]
 8003c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0203 	and.w	r2, r3, #3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8094 	beq.w	8003d84 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5c:	4b52      	ldr	r3, [pc, #328]	@ (8003da8 <HAL_GPIO_Init+0x2c0>)
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c60:	4a51      	ldr	r2, [pc, #324]	@ (8003da8 <HAL_GPIO_Init+0x2c0>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c68:	4b4f      	ldr	r3, [pc, #316]	@ (8003da8 <HAL_GPIO_Init+0x2c0>)
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c74:	4a4d      	ldr	r2, [pc, #308]	@ (8003dac <HAL_GPIO_Init+0x2c4>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	220f      	movs	r2, #15
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c9e:	d00d      	beq.n	8003cbc <HAL_GPIO_Init+0x1d4>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a43      	ldr	r2, [pc, #268]	@ (8003db0 <HAL_GPIO_Init+0x2c8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <HAL_GPIO_Init+0x1d0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a42      	ldr	r2, [pc, #264]	@ (8003db4 <HAL_GPIO_Init+0x2cc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e004      	b.n	8003cbe <HAL_GPIO_Init+0x1d6>
 8003cb4:	2307      	movs	r3, #7
 8003cb6:	e002      	b.n	8003cbe <HAL_GPIO_Init+0x1d6>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_GPIO_Init+0x1d6>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	f002 0203 	and.w	r2, r2, #3
 8003cc4:	0092      	lsls	r2, r2, #2
 8003cc6:	4093      	lsls	r3, r2
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cce:	4937      	ldr	r1, [pc, #220]	@ (8003dac <HAL_GPIO_Init+0x2c4>)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cdc:	4b36      	ldr	r3, [pc, #216]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d00:	4a2d      	ldr	r2, [pc, #180]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d06:	4b2c      	ldr	r3, [pc, #176]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d2a:	4a23      	ldr	r2, [pc, #140]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d54:	4a18      	ldr	r2, [pc, #96]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d5a:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3301      	adds	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f47f aeaf 	bne.w	8003af8 <HAL_GPIO_Init+0x10>
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40010000 	.word	0x40010000
 8003db0:	48000400 	.word	0x48000400
 8003db4:	48000800 	.word	0x48000800
 8003db8:	40010400 	.word	0x40010400

08003dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dcc:	787b      	ldrb	r3, [r7, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dd8:	e002      	b.n	8003de0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e08d      	b.n	8003f1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd fe96 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	@ 0x24
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	e006      	b.n	8003e74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d108      	bne.n	8003e8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e007      	b.n	8003e9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1a      	ldr	r2, [r3, #32]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 80f9 	bne.w	800413e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x34>
 8003f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0ed      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Mem_Write+0x4e>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e0e6      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f7a:	f7fe fb83 	bl	8002684 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2319      	movs	r3, #25
 8003f86:	2201      	movs	r2, #1
 8003f88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fac3 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0d1      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2221      	movs	r2, #33	@ 0x21
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2240      	movs	r2, #64	@ 0x40
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fc4:	88f8      	ldrh	r0, [r7, #6]
 8003fc6:	893a      	ldrh	r2, [r7, #8]
 8003fc8:	8979      	ldrh	r1, [r7, #10]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f9d3 	bl	8004380 <I2C_RequestMemoryWrite>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0a9      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2bff      	cmp	r3, #255	@ 0xff
 8003ff4:	d90e      	bls.n	8004014 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22ff      	movs	r2, #255	@ 0xff
 8003ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004000:	b2da      	uxtb	r2, r3
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fc47 	bl	80048a0 <I2C_TransferConfig>
 8004012:	e00f      	b.n	8004034 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	b2da      	uxtb	r2, r3
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	2300      	movs	r3, #0
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fc36 	bl	80048a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fac6 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e07b      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d034      	beq.n	80040ec <HAL_I2C_Mem_Write+0x1c8>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d130      	bne.n	80040ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	2200      	movs	r2, #0
 8004092:	2180      	movs	r1, #128	@ 0x80
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fa3f 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e04d      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2bff      	cmp	r3, #255	@ 0xff
 80040ac:	d90e      	bls.n	80040cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	22ff      	movs	r2, #255	@ 0xff
 80040b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fbeb 	bl	80048a0 <I2C_TransferConfig>
 80040ca:	e00f      	b.n	80040ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	8979      	ldrh	r1, [r7, #10]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fbda 	bl	80048a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d19e      	bne.n	8004034 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 faac 	bl	8004658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e01a      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2220      	movs	r2, #32
 8004110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_I2C_Mem_Write+0x224>)
 800411e:	400b      	ands	r3, r1
 8004120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
 8004158:	461a      	mov	r2, r3
 800415a:	4603      	mov	r3, r0
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	460b      	mov	r3, r1
 8004160:	813b      	strh	r3, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 80fd 	bne.w	800436e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_I2C_Mem_Read+0x34>
 800417a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0f1      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_I2C_Mem_Read+0x4e>
 8004196:	2302      	movs	r3, #2
 8004198:	e0ea      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041a2:	f7fe fa6f 	bl	8002684 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2319      	movs	r3, #25
 80041ae:	2201      	movs	r2, #1
 80041b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f9af 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0d5      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2222      	movs	r2, #34	@ 0x22
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2240      	movs	r2, #64	@ 0x40
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ec:	88f8      	ldrh	r0, [r7, #6]
 80041ee:	893a      	ldrh	r2, [r7, #8]
 80041f0:	8979      	ldrh	r1, [r7, #10]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4603      	mov	r3, r0
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f913 	bl	8004428 <I2C_RequestMemoryRead>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0ad      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2bff      	cmp	r3, #255	@ 0xff
 800421c:	d90e      	bls.n	800423c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	b2da      	uxtb	r2, r3
 800422a:	8979      	ldrh	r1, [r7, #10]
 800422c:	4b52      	ldr	r3, [pc, #328]	@ (8004378 <HAL_I2C_Mem_Read+0x22c>)
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fb33 	bl	80048a0 <I2C_TransferConfig>
 800423a:	e00f      	b.n	800425c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	b2da      	uxtb	r2, r3
 800424c:	8979      	ldrh	r1, [r7, #10]
 800424e:	4b4a      	ldr	r3, [pc, #296]	@ (8004378 <HAL_I2C_Mem_Read+0x22c>)
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fb22 	bl	80048a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	2200      	movs	r2, #0
 8004264:	2104      	movs	r1, #4
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f956 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e07c      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d034      	beq.n	800431c <HAL_I2C_Mem_Read+0x1d0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d130      	bne.n	800431c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	@ 0x80
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f927 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e04d      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2bff      	cmp	r3, #255	@ 0xff
 80042dc:	d90e      	bls.n	80042fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	8979      	ldrh	r1, [r7, #10]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fad3 	bl	80048a0 <I2C_TransferConfig>
 80042fa:	e00f      	b.n	800431c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	8979      	ldrh	r1, [r7, #10]
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fac2 	bl	80048a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d19a      	bne.n	800425c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f994 	bl	8004658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e01a      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2220      	movs	r2, #32
 8004340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_I2C_Mem_Read+0x230>)
 800434e:	400b      	ands	r3, r1
 8004350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	80002400 	.word	0x80002400
 800437c:	fe00e800 	.word	0xfe00e800

08004380 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <I2C_RequestMemoryWrite+0xa4>)
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fa79 	bl	80048a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	69b9      	ldr	r1, [r7, #24]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f909 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02c      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c8:	893b      	ldrh	r3, [r7, #8]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80043d2:	e015      	b.n	8004400 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043d4:	893b      	ldrh	r3, [r7, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f8ef 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e012      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	@ 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f884 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	80002000 	.word	0x80002000

08004428 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	461a      	mov	r2, r3
 8004436:	4603      	mov	r3, r0
 8004438:	817b      	strh	r3, [r7, #10]
 800443a:	460b      	mov	r3, r1
 800443c:	813b      	strh	r3, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	8979      	ldrh	r1, [r7, #10]
 8004448:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <I2C_RequestMemoryRead+0xa4>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fa26 	bl	80048a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f8b6 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e02c      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28
 8004478:	e015      	b.n	80044a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800447a:	893b      	ldrh	r3, [r7, #8]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	b29b      	uxth	r3, r3
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f89c 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e012      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2140      	movs	r1, #64	@ 0x40
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f831 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	80002000 	.word	0x80002000

080044d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d103      	bne.n	80044ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d007      	beq.n	800450c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	619a      	str	r2, [r3, #24]
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	e03b      	b.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8d6 	bl	80046e0 <I2C_IsErrorOccurred>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e041      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004544:	d02d      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe f89d 	bl	8002684 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d122      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	429a      	cmp	r2, r3
 8004578:	d113      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00f      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0b4      	beq.n	800452a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d6:	e033      	b.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f87f 	bl	80046e0 <I2C_IsErrorOccurred>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e031      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f2:	d025      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fe f846 	bl	8002684 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11a      	bne.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d013      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e007      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d1c4      	bne.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004664:	e02f      	b.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f838 	bl	80046e0 <I2C_IsErrorOccurred>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e02d      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fe f803 	bl	8002684 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11a      	bne.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d013      	beq.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e007      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d1c8      	bne.n	8004666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d068      	beq.n	80047de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2210      	movs	r2, #16
 8004712:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004714:	e049      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800471c:	d045      	beq.n	80047aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fd ffb1 	bl	8002684 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_IsErrorOccurred+0x54>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13a      	bne.n	80047aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800473e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004746:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004756:	d121      	bne.n	800479c <I2C_IsErrorOccurred+0xbc>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800475e:	d01d      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d01a      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004774:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004776:	f7fd ff85 	bl	8002684 <HAL_GetTick>
 800477a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477c:	e00e      	b.n	800479c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800477e:	f7fd ff81 	bl	8002684 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b19      	cmp	r3, #25
 800478a:	d907      	bls.n	800479c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f043 0320 	orr.w	r3, r3, #32
 8004792:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800479a:	e006      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d1e9      	bne.n	800477e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d003      	beq.n	80047c0 <I2C_IsErrorOccurred+0xe0>
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0aa      	beq.n	8004716 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2220      	movs	r2, #32
 80047ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800484c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fe3b 	bl	80044d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <I2C_IsErrorOccurred+0x1bc>)
 8004866:	400b      	ands	r3, r1
 8004868:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800488e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004892:	4618      	mov	r0, r3
 8004894:	3728      	adds	r7, #40	@ 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	fe00e800 	.word	0xfe00e800

080048a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	4613      	mov	r3, r2
 80048b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b8:	7a7b      	ldrb	r3, [r7, #9]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	0d5b      	lsrs	r3, r3, #21
 80048da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048de:	4b08      	ldr	r3, [pc, #32]	@ (8004900 <I2C_TransferConfig+0x60>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	43db      	mvns	r3, r3
 80048e4:	ea02 0103 	and.w	r1, r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	03ff63ff 	.word	0x03ff63ff

08004904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	d138      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004924:	2302      	movs	r3, #2
 8004926:	e032      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	@ 0x24
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d139      	bne.n	8004a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e033      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2224      	movs	r2, #36	@ 0x24
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a04      	ldr	r2, [pc, #16]	@ (8004a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40007000 	.word	0x40007000

08004a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a58:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40007000 	.word	0x40007000

08004a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a7e:	d130      	bne.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a80:	4b23      	ldr	r3, [pc, #140]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a8c:	d038      	beq.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a8e:	4b20      	ldr	r3, [pc, #128]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a96:	4a1e      	ldr	r2, [pc, #120]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2232      	movs	r2, #50	@ 0x32
 8004aa4:	fb02 f303 	mul.w	r3, r2, r3
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0c9b      	lsrs	r3, r3, #18
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ab4:	e002      	b.n	8004abc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac8:	d102      	bne.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f2      	bne.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004adc:	d110      	bne.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e00f      	b.n	8004b02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aee:	d007      	beq.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004af0:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004af8:	4a05      	ldr	r2, [pc, #20]	@ (8004b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004afe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40007000 	.word	0x40007000
 8004b14:	20000008 	.word	0x20000008
 8004b18:	431bde83 	.word	0x431bde83

08004b1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f000 bc02 	b.w	8005334 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b30:	4b96      	ldr	r3, [pc, #600]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b3a:	4b94      	ldr	r3, [pc, #592]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80e4 	beq.w	8004d1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4c>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b0c      	cmp	r3, #12
 8004b5c:	f040 808b 	bne.w	8004c76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	f040 8087 	bne.w	8004c76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b68:	4b88      	ldr	r3, [pc, #544]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_OscConfig+0x64>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e3d9      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1a      	ldr	r2, [r3, #32]
 8004b84:	4b81      	ldr	r3, [pc, #516]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_RCC_OscConfig+0x7e>
 8004b90:	4b7e      	ldr	r3, [pc, #504]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b98:	e005      	b.n	8004ba6 <HAL_RCC_OscConfig+0x8a>
 8004b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d223      	bcs.n	8004bf2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fd8c 	bl	80056cc <RCC_SetFlashLatencyFromMSIRange>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e3ba      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bbe:	4b73      	ldr	r3, [pc, #460]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a72      	ldr	r2, [pc, #456]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4b70      	ldr	r3, [pc, #448]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	496d      	ldr	r1, [pc, #436]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	4968      	ldr	r1, [pc, #416]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
 8004bf0:	e025      	b.n	8004c3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf2:	4b66      	ldr	r3, [pc, #408]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a65      	ldr	r2, [pc, #404]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004bf8:	f043 0308 	orr.w	r3, r3, #8
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b63      	ldr	r3, [pc, #396]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4960      	ldr	r1, [pc, #384]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c10:	4b5e      	ldr	r3, [pc, #376]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	495b      	ldr	r1, [pc, #364]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fd4c 	bl	80056cc <RCC_SetFlashLatencyFromMSIRange>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e37a      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c3e:	f000 fc81 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b51      	ldr	r3, [pc, #324]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	4950      	ldr	r1, [pc, #320]	@ (8004d90 <HAL_RCC_OscConfig+0x274>)
 8004c50:	5ccb      	ldrb	r3, [r1, r3]
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004d94 <HAL_RCC_OscConfig+0x278>)
 8004c5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d98 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd fcbe 	bl	80025e4 <HAL_InitTick>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d052      	beq.n	8004d18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	e35e      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d032      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c7e:	4b43      	ldr	r3, [pc, #268]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a42      	ldr	r2, [pc, #264]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c8a:	f7fd fcfb 	bl	8002684 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c92:	f7fd fcf7 	bl	8002684 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e347      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca4:	4b39      	ldr	r3, [pc, #228]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cb0:	4b36      	ldr	r3, [pc, #216]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a35      	ldr	r2, [pc, #212]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cb6:	f043 0308 	orr.w	r3, r3, #8
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b33      	ldr	r3, [pc, #204]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4930      	ldr	r1, [pc, #192]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cce:	4b2f      	ldr	r3, [pc, #188]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	492b      	ldr	r1, [pc, #172]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	604b      	str	r3, [r1, #4]
 8004ce2:	e01a      	b.n	8004d1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ce4:	4b29      	ldr	r3, [pc, #164]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a28      	ldr	r2, [pc, #160]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fcc8 	bl	8002684 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cf8:	f7fd fcc4 	bl	8002684 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e314      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d0a:	4b20      	ldr	r3, [pc, #128]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1dc>
 8004d16:	e000      	b.n	8004d1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d073      	beq.n	8004e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_OscConfig+0x21c>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d10e      	bne.n	8004d50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d10b      	bne.n	8004d50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d063      	beq.n	8004e0c <HAL_RCC_OscConfig+0x2f0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d15f      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e2f1      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d58:	d106      	bne.n	8004d68 <HAL_RCC_OscConfig+0x24c>
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e025      	b.n	8004db4 <HAL_RCC_OscConfig+0x298>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d70:	d114      	bne.n	8004d9c <HAL_RCC_OscConfig+0x280>
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a05      	ldr	r2, [pc, #20]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b03      	ldr	r3, [pc, #12]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a02      	ldr	r2, [pc, #8]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e013      	b.n	8004db4 <HAL_RCC_OscConfig+0x298>
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800b3e4 	.word	0x0800b3e4
 8004d94:	20000008 	.word	0x20000008
 8004d98:	20000010 	.word	0x20000010
 8004d9c:	4ba0      	ldr	r3, [pc, #640]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a9f      	ldr	r2, [pc, #636]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b9d      	ldr	r3, [pc, #628]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a9c      	ldr	r2, [pc, #624]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d013      	beq.n	8004de4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd fc62 	bl	8002684 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fd fc5e 	bl	8002684 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	@ 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e2ae      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd6:	4b92      	ldr	r3, [pc, #584]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x2a8>
 8004de2:	e014      	b.n	8004e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd fc4e 	bl	8002684 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fd fc4a 	bl	8002684 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	@ 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e29a      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfe:	4b88      	ldr	r3, [pc, #544]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x2d0>
 8004e0a:	e000      	b.n	8004e0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d060      	beq.n	8004edc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_OscConfig+0x310>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d119      	bne.n	8004e5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d116      	bne.n	8004e5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_RCC_OscConfig+0x328>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e277      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b76      	ldr	r3, [pc, #472]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	4973      	ldr	r1, [pc, #460]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e58:	e040      	b.n	8004edc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d023      	beq.n	8004eaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e62:	4b6f      	ldr	r3, [pc, #444]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6e      	ldr	r2, [pc, #440]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fd fc09 	bl	8002684 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e76:	f7fd fc05 	bl	8002684 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e255      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e88:	4b65      	ldr	r3, [pc, #404]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e94:	4b62      	ldr	r3, [pc, #392]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	495f      	ldr	r1, [pc, #380]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]
 8004ea8:	e018      	b.n	8004edc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a5c      	ldr	r2, [pc, #368]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fd fbe5 	bl	8002684 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fd fbe1 	bl	8002684 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e231      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ed0:	4b53      	ldr	r3, [pc, #332]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d03c      	beq.n	8004f62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01c      	beq.n	8004f2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fd fbc0 	bl	8002684 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f08:	f7fd fbbc 	bl	8002684 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e20c      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f1a:	4b41      	ldr	r3, [pc, #260]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ef      	beq.n	8004f08 <HAL_RCC_OscConfig+0x3ec>
 8004f28:	e01b      	b.n	8004f62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f30:	4a3b      	ldr	r2, [pc, #236]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fba3 	bl	8002684 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f42:	f7fd fb9f 	bl	8002684 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1ef      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f54:	4b32      	ldr	r3, [pc, #200]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ef      	bne.n	8004f42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80a6 	beq.w	80050bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f70:	2300      	movs	r3, #0
 8004f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f74:	4b2a      	ldr	r3, [pc, #168]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10d      	bne.n	8004f9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f80:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f84:	4a26      	ldr	r2, [pc, #152]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8c:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9c:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <HAL_RCC_OscConfig+0x508>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d118      	bne.n	8004fda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8005024 <HAL_RCC_OscConfig+0x508>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <HAL_RCC_OscConfig+0x508>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb4:	f7fd fb66 	bl	8002684 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fd fb62 	bl	8002684 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1b2      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fce:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <HAL_RCC_OscConfig+0x508>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d108      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4d8>
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ff2:	e029      	b.n	8005048 <HAL_RCC_OscConfig+0x52c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b05      	cmp	r3, #5
 8004ffa:	d115      	bne.n	8005028 <HAL_RCC_OscConfig+0x50c>
 8004ffc:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	4a07      	ldr	r2, [pc, #28]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8005004:	f043 0304 	orr.w	r3, r3, #4
 8005008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800500c:	4b04      	ldr	r3, [pc, #16]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005012:	4a03      	ldr	r2, [pc, #12]	@ (8005020 <HAL_RCC_OscConfig+0x504>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800501c:	e014      	b.n	8005048 <HAL_RCC_OscConfig+0x52c>
 800501e:	bf00      	nop
 8005020:	40021000 	.word	0x40021000
 8005024:	40007000 	.word	0x40007000
 8005028:	4b9a      	ldr	r3, [pc, #616]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502e:	4a99      	ldr	r2, [pc, #612]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005038:	4b96      	ldr	r3, [pc, #600]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	4a95      	ldr	r2, [pc, #596]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d016      	beq.n	800507e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fd fb18 	bl	8002684 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005056:	e00a      	b.n	800506e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005058:	f7fd fb14 	bl	8002684 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e162      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506e:	4b89      	ldr	r3, [pc, #548]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ed      	beq.n	8005058 <HAL_RCC_OscConfig+0x53c>
 800507c:	e015      	b.n	80050aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fd fb01 	bl	8002684 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fd fafd 	bl	8002684 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e14b      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800509c:	4b7d      	ldr	r3, [pc, #500]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ed      	bne.n	8005086 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d105      	bne.n	80050bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050b0:	4b78      	ldr	r3, [pc, #480]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b4:	4a77      	ldr	r2, [pc, #476]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80050b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d03c      	beq.n	8005142 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01c      	beq.n	800510a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050d0:	4b70      	ldr	r3, [pc, #448]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80050d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fd fad0 	bl	8002684 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e8:	f7fd facc 	bl	8002684 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e11c      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050fa:	4b66      	ldr	r3, [pc, #408]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80050fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ef      	beq.n	80050e8 <HAL_RCC_OscConfig+0x5cc>
 8005108:	e01b      	b.n	8005142 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800510a:	4b62      	ldr	r3, [pc, #392]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 800510c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005110:	4a60      	ldr	r2, [pc, #384]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511a:	f7fd fab3 	bl	8002684 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005122:	f7fd faaf 	bl	8002684 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0ff      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005134:	4b57      	ldr	r3, [pc, #348]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005136:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ef      	bne.n	8005122 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80f3 	beq.w	8005332 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	2b02      	cmp	r3, #2
 8005152:	f040 80c9 	bne.w	80052e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005156:	4b4f      	ldr	r3, [pc, #316]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	429a      	cmp	r2, r3
 8005168:	d12c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	3b01      	subs	r3, #1
 8005176:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d123      	bne.n	80051c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005186:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d11b      	bne.n	80051c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d113      	bne.n	80051c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	3b01      	subs	r3, #1
 80051aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d109      	bne.n	80051c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	3b01      	subs	r3, #1
 80051be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d06b      	beq.n	800529c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d062      	beq.n	8005290 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051ca:	4b32      	ldr	r3, [pc, #200]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0ac      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051da:	4b2e      	ldr	r3, [pc, #184]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2d      	ldr	r2, [pc, #180]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 80051e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051e6:	f7fd fa4d 	bl	8002684 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fd fa49 	bl	8002684 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e099      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005200:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800520c:	4b21      	ldr	r3, [pc, #132]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	4b21      	ldr	r3, [pc, #132]	@ (8005298 <HAL_RCC_OscConfig+0x77c>)
 8005212:	4013      	ands	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800521c:	3a01      	subs	r2, #1
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	4311      	orrs	r1, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005226:	0212      	lsls	r2, r2, #8
 8005228:	4311      	orrs	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800522e:	0852      	lsrs	r2, r2, #1
 8005230:	3a01      	subs	r2, #1
 8005232:	0552      	lsls	r2, r2, #21
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800523a:	0852      	lsrs	r2, r2, #1
 800523c:	3a01      	subs	r2, #1
 800523e:	0652      	lsls	r2, r2, #25
 8005240:	4311      	orrs	r1, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005246:	06d2      	lsls	r2, r2, #27
 8005248:	430a      	orrs	r2, r1
 800524a:	4912      	ldr	r1, [pc, #72]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 800524c:	4313      	orrs	r3, r2
 800524e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005250:	4b10      	ldr	r3, [pc, #64]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0f      	ldr	r2, [pc, #60]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800525c:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a0c      	ldr	r2, [pc, #48]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005266:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005268:	f7fd fa0c 	bl	8002684 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fd fa08 	bl	8002684 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e058      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	4b04      	ldr	r3, [pc, #16]	@ (8005294 <HAL_RCC_OscConfig+0x778>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800528e:	e050      	b.n	8005332 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04f      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
 8005294:	40021000 	.word	0x40021000
 8005298:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529c:	4b27      	ldr	r3, [pc, #156]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d144      	bne.n	8005332 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052a8:	4b24      	ldr	r3, [pc, #144]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a23      	ldr	r2, [pc, #140]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b4:	4b21      	ldr	r3, [pc, #132]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a20      	ldr	r2, [pc, #128]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c0:	f7fd f9e0 	bl	8002684 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fd f9dc 	bl	8002684 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e02c      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052da:	4b18      	ldr	r3, [pc, #96]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x7ac>
 80052e6:	e024      	b.n	8005332 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d01f      	beq.n	800532e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b13      	ldr	r3, [pc, #76]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a12      	ldr	r2, [pc, #72]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 80052f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fd f9c3 	bl	8002684 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7fd f9bf 	bl	8002684 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e00f      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005314:	4b09      	ldr	r3, [pc, #36]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005320:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	4905      	ldr	r1, [pc, #20]	@ (800533c <HAL_RCC_OscConfig+0x820>)
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCC_OscConfig+0x824>)
 8005328:	4013      	ands	r3, r2
 800532a:	60cb      	str	r3, [r1, #12]
 800532c:	e001      	b.n	8005332 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	feeefffc 	.word	0xfeeefffc

08005344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0e7      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b75      	ldr	r3, [pc, #468]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d910      	bls.n	8005388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b72      	ldr	r3, [pc, #456]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 0207 	bic.w	r2, r3, #7
 800536e:	4970      	ldr	r1, [pc, #448]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b6e      	ldr	r3, [pc, #440]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cf      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	4b66      	ldr	r3, [pc, #408]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d908      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a4:	4b63      	ldr	r3, [pc, #396]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4960      	ldr	r1, [pc, #384]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d04c      	beq.n	800545c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d107      	bne.n	80053da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d121      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0a6      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d107      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e2:	4b54      	ldr	r3, [pc, #336]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d115      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e09a      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e08e      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800540a:	4b4a      	ldr	r3, [pc, #296]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e086      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800541a:	4b46      	ldr	r3, [pc, #280]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4943      	ldr	r1, [pc, #268]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800542c:	f7fd f92a 	bl	8002684 <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005432:	e00a      	b.n	800544a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005434:	f7fd f926 	bl	8002684 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e06e      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	4b3a      	ldr	r3, [pc, #232]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 020c 	and.w	r2, r3, #12
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	429a      	cmp	r2, r3
 800545a:	d1eb      	bne.n	8005434 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005474:	429a      	cmp	r2, r3
 8005476:	d208      	bcs.n	800548a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005478:	4b2e      	ldr	r3, [pc, #184]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	492b      	ldr	r1, [pc, #172]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800548a:	4b29      	ldr	r3, [pc, #164]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d210      	bcs.n	80054ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005498:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 0207 	bic.w	r2, r3, #7
 80054a0:	4923      	ldr	r1, [pc, #140]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a8:	4b21      	ldr	r3, [pc, #132]	@ (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e036      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4918      	ldr	r1, [pc, #96]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e4:	4b13      	ldr	r3, [pc, #76]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4910      	ldr	r1, [pc, #64]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054f8:	f000 f824 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	490b      	ldr	r1, [pc, #44]	@ (8005538 <HAL_RCC_ClockConfig+0x1f4>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	4a09      	ldr	r2, [pc, #36]	@ (800553c <HAL_RCC_ClockConfig+0x1f8>)
 8005516:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005518:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <HAL_RCC_ClockConfig+0x1fc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fd f861 	bl	80025e4 <HAL_InitTick>
 8005522:	4603      	mov	r3, r0
 8005524:	72fb      	strb	r3, [r7, #11]

  return status;
 8005526:	7afb      	ldrb	r3, [r7, #11]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40022000 	.word	0x40022000
 8005534:	40021000 	.word	0x40021000
 8005538:	0800b3e4 	.word	0x0800b3e4
 800553c:	20000008 	.word	0x20000008
 8005540:	20000010 	.word	0x20000010

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	@ 0x24
 8005548:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005552:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800555c:	4b3b      	ldr	r3, [pc, #236]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x34>
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d121      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d11e      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005578:	4b34      	ldr	r3, [pc, #208]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d107      	bne.n	8005594 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005584:	4b31      	ldr	r3, [pc, #196]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e005      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005594:	4b2d      	ldr	r3, [pc, #180]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d102      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x110>)
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e004      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c8:	4b23      	ldr	r3, [pc, #140]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d134      	bne.n	800563c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055d2:	4b1e      	ldr	r3, [pc, #120]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_GetSysClockFreq+0xa6>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d003      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0xac>
 80055e8:	e005      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ec:	617b      	str	r3, [r7, #20]
      break;
 80055ee:	e005      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x114>)
 80055f2:	617b      	str	r3, [r7, #20]
      break;
 80055f4:	e002      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	617b      	str	r3, [r7, #20]
      break;
 80055fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055fc:	4b13      	ldr	r3, [pc, #76]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	3301      	adds	r3, #1
 8005608:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800560a:	4b10      	ldr	r3, [pc, #64]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	fb03 f202 	mul.w	r2, r3, r2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005622:	4b0a      	ldr	r3, [pc, #40]	@ (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	0e5b      	lsrs	r3, r3, #25
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	3301      	adds	r3, #1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800563c:	69bb      	ldr	r3, [r7, #24]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3724      	adds	r7, #36	@ 0x24
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	0800b3fc 	.word	0x0800b3fc
 8005654:	00f42400 	.word	0x00f42400
 8005658:	007a1200 	.word	0x007a1200

0800565c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x14>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000008 	.word	0x20000008

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005678:	f7ff fff0 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4904      	ldr	r1, [pc, #16]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x28>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40021000 	.word	0x40021000
 800569c:	0800b3f4 	.word	0x0800b3f4

080056a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056a4:	f7ff ffda 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0adb      	lsrs	r3, r3, #11
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4904      	ldr	r1, [pc, #16]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	0800b3f4 	.word	0x0800b3f4

080056cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056e4:	f7ff f9b6 	bl	8004a54 <HAL_PWREx_GetVoltageRange>
 80056e8:	6178      	str	r0, [r7, #20]
 80056ea:	e014      	b.n	8005716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ec:	4b25      	ldr	r3, [pc, #148]	@ (8005784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f0:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80056f8:	4b22      	ldr	r3, [pc, #136]	@ (8005784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005704:	f7ff f9a6 	bl	8004a54 <HAL_PWREx_GetVoltageRange>
 8005708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800570a:	4b1e      	ldr	r3, [pc, #120]	@ (8005784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005714:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571c:	d10b      	bne.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b80      	cmp	r3, #128	@ 0x80
 8005722:	d919      	bls.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2ba0      	cmp	r3, #160	@ 0xa0
 8005728:	d902      	bls.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800572a:	2302      	movs	r3, #2
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	e013      	b.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005730:	2301      	movs	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e010      	b.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b80      	cmp	r3, #128	@ 0x80
 800573a:	d902      	bls.n	8005742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800573c:	2303      	movs	r3, #3
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e00a      	b.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b80      	cmp	r3, #128	@ 0x80
 8005746:	d102      	bne.n	800574e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005748:	2302      	movs	r3, #2
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	e004      	b.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b70      	cmp	r3, #112	@ 0x70
 8005752:	d101      	bne.n	8005758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005754:	2301      	movs	r3, #1
 8005756:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 0207 	bic.w	r2, r3, #7
 8005760:	4909      	ldr	r1, [pc, #36]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005768:	4b07      	ldr	r3, [pc, #28]	@ (8005788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	429a      	cmp	r2, r3
 8005774:	d001      	beq.n	800577a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000
 8005788:	40022000 	.word	0x40022000

0800578c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005794:	2300      	movs	r3, #0
 8005796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005798:	2300      	movs	r3, #0
 800579a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d031      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057b0:	d01a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057b6:	d814      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057c0:	d10f      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80057c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	4a5c      	ldr	r2, [pc, #368]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057ce:	e00c      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f9de 	bl	8005b98 <RCCEx_PLLSAI1_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057e0:	e003      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	74fb      	strb	r3, [r7, #19]
      break;
 80057e6:	e000      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80057e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ea:	7cfb      	ldrb	r3, [r7, #19]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10b      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057f0:	4b51      	ldr	r3, [pc, #324]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	494e      	ldr	r1, [pc, #312]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005806:	e001      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 809e 	beq.w	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800581e:	4b46      	ldr	r3, [pc, #280]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005834:	4b40      	ldr	r3, [pc, #256]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005838:	4a3f      	ldr	r2, [pc, #252]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800583a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800583e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005840:	4b3d      	ldr	r3, [pc, #244]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584c:	2301      	movs	r3, #1
 800584e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005850:	4b3a      	ldr	r3, [pc, #232]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a39      	ldr	r2, [pc, #228]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800585a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800585c:	f7fc ff12 	bl	8002684 <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005862:	e009      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005864:	f7fc ff0e 	bl	8002684 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d902      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	74fb      	strb	r3, [r7, #19]
        break;
 8005876:	e005      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005878:	4b30      	ldr	r3, [pc, #192]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ef      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005884:	7cfb      	ldrb	r3, [r7, #19]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d15a      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800588a:	4b2b      	ldr	r3, [pc, #172]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005890:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005894:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01e      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d019      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058a6:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058b2:	4b21      	ldr	r3, [pc, #132]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058d2:	4a19      	ldr	r2, [pc, #100]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fc fece 	bl	8002684 <HAL_GetTick>
 80058e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ea:	e00b      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fc feca 	bl	8002684 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d902      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	74fb      	strb	r3, [r7, #19]
            break;
 8005902:	e006      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005904:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ec      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005912:	7cfb      	ldrb	r3, [r7, #19]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10b      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005918:	4b07      	ldr	r3, [pc, #28]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005926:	4904      	ldr	r1, [pc, #16]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800592e:	e009      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	74bb      	strb	r3, [r7, #18]
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000
 800593c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005944:	7c7b      	ldrb	r3, [r7, #17]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800594a:	4b8a      	ldr	r3, [pc, #552]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	4a89      	ldr	r2, [pc, #548]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005954:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005962:	4b84      	ldr	r3, [pc, #528]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005968:	f023 0203 	bic.w	r2, r3, #3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	4980      	ldr	r1, [pc, #512]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005984:	4b7b      	ldr	r3, [pc, #492]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f023 020c 	bic.w	r2, r3, #12
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	4978      	ldr	r1, [pc, #480]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059a6:	4b73      	ldr	r3, [pc, #460]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	496f      	ldr	r1, [pc, #444]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ce:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d6:	4967      	ldr	r1, [pc, #412]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059ea:	4b62      	ldr	r3, [pc, #392]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f8:	495e      	ldr	r1, [pc, #376]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0c:	4b59      	ldr	r3, [pc, #356]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	4956      	ldr	r1, [pc, #344]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a2e:	4b51      	ldr	r3, [pc, #324]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3c:	494d      	ldr	r1, [pc, #308]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d028      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a50:	4b48      	ldr	r3, [pc, #288]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	4945      	ldr	r1, [pc, #276]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a70:	4b40      	ldr	r3, [pc, #256]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4a3f      	ldr	r2, [pc, #252]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a7a:	60d3      	str	r3, [r2, #12]
 8005a7c:	e011      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a86:	d10c      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 f882 	bl	8005b98 <RCCEx_PLLSAI1_Config>
 8005a94:	4603      	mov	r3, r0
 8005a96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005a9e:	7cfb      	ldrb	r3, [r7, #19]
 8005aa0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d028      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aae:	4b31      	ldr	r3, [pc, #196]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abc:	492d      	ldr	r1, [pc, #180]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005acc:	d106      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ace:	4b29      	ldr	r3, [pc, #164]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4a28      	ldr	r2, [pc, #160]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ad4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ad8:	60d3      	str	r3, [r2, #12]
 8005ada:	e011      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	2101      	movs	r1, #1
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f853 	bl	8005b98 <RCCEx_PLLSAI1_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005af6:	7cfb      	ldrb	r3, [r7, #19]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005afc:	7cfb      	ldrb	r3, [r7, #19]
 8005afe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01c      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b0c:	4b19      	ldr	r3, [pc, #100]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1a:	4916      	ldr	r1, [pc, #88]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b2a:	d10c      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	2102      	movs	r1, #2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f830 	bl	8005b98 <RCCEx_PLLSAI1_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005b42:	7cfb      	ldrb	r3, [r7, #19]
 8005b44:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b52:	4b08      	ldr	r3, [pc, #32]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b58:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b60:	4904      	ldr	r1, [pc, #16]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b68:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000

08005b78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005b7c:	4b05      	ldr	r3, [pc, #20]	@ (8005b94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a04      	ldr	r2, [pc, #16]	@ (8005b94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b82:	f043 0304 	orr.w	r3, r3, #4
 8005b86:	6013      	str	r3, [r2, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40021000 	.word	0x40021000

08005b98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ba6:	4b74      	ldr	r3, [pc, #464]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d018      	beq.n	8005be4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bb2:	4b71      	ldr	r3, [pc, #452]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0203 	and.w	r2, r3, #3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d10d      	bne.n	8005bde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bca:	4b6b      	ldr	r3, [pc, #428]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d047      	beq.n	8005c6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
 8005be2:	e044      	b.n	8005c6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d018      	beq.n	8005c1e <RCCEx_PLLSAI1_Config+0x86>
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d825      	bhi.n	8005c3c <RCCEx_PLLSAI1_Config+0xa4>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d002      	beq.n	8005bfa <RCCEx_PLLSAI1_Config+0x62>
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d009      	beq.n	8005c0c <RCCEx_PLLSAI1_Config+0x74>
 8005bf8:	e020      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11d      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c0a:	e01a      	b.n	8005c42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d116      	bne.n	8005c46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c1c:	e013      	b.n	8005c46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c1e:	4b56      	ldr	r3, [pc, #344]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c2a:	4b53      	ldr	r3, [pc, #332]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c3a:	e006      	b.n	8005c4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c40:	e004      	b.n	8005c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c52:	4b49      	ldr	r3, [pc, #292]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6819      	ldr	r1, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	430b      	orrs	r3, r1
 8005c68:	4943      	ldr	r1, [pc, #268]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d17c      	bne.n	8005d6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c74:	4b40      	ldr	r3, [pc, #256]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a3f      	ldr	r2, [pc, #252]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c80:	f7fc fd00 	bl	8002684 <HAL_GetTick>
 8005c84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c86:	e009      	b.n	8005c9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c88:	f7fc fcfc 	bl	8002684 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d902      	bls.n	8005c9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	73fb      	strb	r3, [r7, #15]
        break;
 8005c9a:	e005      	b.n	8005ca8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c9c:	4b36      	ldr	r3, [pc, #216]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ef      	bne.n	8005c88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d15f      	bne.n	8005d6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d110      	bne.n	8005cd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cb4:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005cbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6892      	ldr	r2, [r2, #8]
 8005cc4:	0211      	lsls	r1, r2, #8
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68d2      	ldr	r2, [r2, #12]
 8005cca:	06d2      	lsls	r2, r2, #27
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	492a      	ldr	r1, [pc, #168]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	610b      	str	r3, [r1, #16]
 8005cd4:	e027      	b.n	8005d26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d112      	bne.n	8005d02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cdc:	4b26      	ldr	r3, [pc, #152]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005ce4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6892      	ldr	r2, [r2, #8]
 8005cec:	0211      	lsls	r1, r2, #8
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6912      	ldr	r2, [r2, #16]
 8005cf2:	0852      	lsrs	r2, r2, #1
 8005cf4:	3a01      	subs	r2, #1
 8005cf6:	0552      	lsls	r2, r2, #21
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	491f      	ldr	r1, [pc, #124]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	610b      	str	r3, [r1, #16]
 8005d00:	e011      	b.n	8005d26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d02:	4b1d      	ldr	r3, [pc, #116]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6892      	ldr	r2, [r2, #8]
 8005d12:	0211      	lsls	r1, r2, #8
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6952      	ldr	r2, [r2, #20]
 8005d18:	0852      	lsrs	r2, r2, #1
 8005d1a:	3a01      	subs	r2, #1
 8005d1c:	0652      	lsls	r2, r2, #25
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	4915      	ldr	r1, [pc, #84]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d26:	4b14      	ldr	r3, [pc, #80]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fc fca7 	bl	8002684 <HAL_GetTick>
 8005d36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d38:	e009      	b.n	8005d4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d3a:	f7fc fca3 	bl	8002684 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d902      	bls.n	8005d4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d4c:	e005      	b.n	8005d5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ef      	beq.n	8005d3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d60:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	4903      	ldr	r1, [pc, #12]	@ (8005d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40021000 	.word	0x40021000

08005d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e040      	b.n	8005e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fc fa36 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	@ 0x24
 8005da8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fe9a 	bl	8006afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fc6b 	bl	80066a4 <UART_SetConfig>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e01b      	b.n	8005e10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 ff19 	bl	8006c40 <UART_CheckIdleState>
 8005e0e:	4603      	mov	r3, r0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	@ 0x28
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d177      	bne.n	8005f20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Transmit+0x24>
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e070      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2221      	movs	r2, #33	@ 0x21
 8005e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e4e:	f7fc fc19 	bl	8002684 <HAL_GetTick>
 8005e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6c:	d108      	bne.n	8005e80 <HAL_UART_Transmit+0x68>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	61bb      	str	r3, [r7, #24]
 8005e7e:	e003      	b.n	8005e88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e88:	e02f      	b.n	8005eea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2180      	movs	r1, #128	@ 0x80
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 ff7b 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e03b      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	881a      	ldrh	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ebc:	b292      	uxth	r2, r2
 8005ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	e007      	b.n	8005ed8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1c9      	bne.n	8005e8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2140      	movs	r1, #64	@ 0x40
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 ff45 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e005      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e000      	b.n	8005f22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b08b      	sub	sp, #44	@ 0x2c
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d147      	bne.n	8005fd2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_UART_Transmit_IT+0x22>
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e040      	b.n	8005fd4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2221      	movs	r2, #33	@ 0x21
 8005f7a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f84:	d107      	bne.n	8005f96 <HAL_UART_Transmit_IT+0x6a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a13      	ldr	r2, [pc, #76]	@ (8005fe0 <HAL_UART_Transmit_IT+0xb4>)
 8005f92:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005f94:	e002      	b.n	8005f9c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a12      	ldr	r2, [pc, #72]	@ (8005fe4 <HAL_UART_Transmit_IT+0xb8>)
 8005f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	69f9      	ldr	r1, [r7, #28]
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e6      	bne.n	8005f9c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e000      	b.n	8005fd4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
  }
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	372c      	adds	r7, #44	@ 0x2c
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	080071a3 	.word	0x080071a3
 8005fe4:	080070ed 	.word	0x080070ed

08005fe8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	@ 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d137      	bne.n	8006070 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_UART_Receive_IT+0x24>
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e030      	b.n	8006072 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a18      	ldr	r2, [pc, #96]	@ (800607c <HAL_UART_Receive_IT+0x94>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d01f      	beq.n	8006060 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d018      	beq.n	8006060 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	623b      	str	r3, [r7, #32]
 800604e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e6      	bne.n	800602e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	461a      	mov	r2, r3
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 ff00 	bl	8006e6c <UART_Start_Receive_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	e000      	b.n	8006072 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	@ 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40008000 	.word	0x40008000

08006080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b0ba      	sub	sp, #232	@ 0xe8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80060aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80060ae:	4013      	ands	r3, r2
 80060b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80060b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d115      	bne.n	80060e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00f      	beq.n	80060e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 82ca 	beq.w	8006672 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
      }
      return;
 80060e6:	e2c4      	b.n	8006672 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80060e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8117 	beq.w	8006320 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006102:	4b85      	ldr	r3, [pc, #532]	@ (8006318 <HAL_UART_IRQHandler+0x298>)
 8006104:	4013      	ands	r3, r2
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 810a 	beq.w	8006320 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800610c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d011      	beq.n	800613c <HAL_UART_IRQHandler+0xbc>
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800611c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2201      	movs	r2, #1
 800612a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006132:	f043 0201 	orr.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800613c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d011      	beq.n	800616c <HAL_UART_IRQHandler+0xec>
 8006148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00b      	beq.n	800616c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2202      	movs	r2, #2
 800615a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006162:	f043 0204 	orr.w	r2, r3, #4
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800616c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d011      	beq.n	800619c <HAL_UART_IRQHandler+0x11c>
 8006178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2204      	movs	r2, #4
 800618a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006192:	f043 0202 	orr.w	r2, r3, #2
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800619c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d017      	beq.n	80061d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2208      	movs	r2, #8
 80061c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d012      	beq.n	800620a <HAL_UART_IRQHandler+0x18a>
 80061e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00c      	beq.n	800620a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8230 	beq.w	8006676 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006244:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d005      	beq.n	8006262 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800625a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800625e:	2b00      	cmp	r3, #0
 8006260:	d04f      	beq.n	8006302 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fec8 	bl	8006ff8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006272:	2b40      	cmp	r3, #64	@ 0x40
 8006274:	d141      	bne.n	80062fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800628c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1d9      	bne.n	8006276 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d013      	beq.n	80062f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ce:	4a13      	ldr	r2, [pc, #76]	@ (800631c <HAL_UART_IRQHandler+0x29c>)
 80062d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fd fbc5 	bl	8003a66 <HAL_DMA_Abort_IT>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d017      	beq.n	8006312 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80062ec:	4610      	mov	r0, r2
 80062ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	e00f      	b.n	8006312 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc f894 	bl	8002420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	e00b      	b.n	8006312 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fc f890 	bl	8002420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	e007      	b.n	8006312 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fc f88c 	bl	8002420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006310:	e1b1      	b.n	8006676 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006312:	bf00      	nop
    return;
 8006314:	e1af      	b.n	8006676 <HAL_UART_IRQHandler+0x5f6>
 8006316:	bf00      	nop
 8006318:	04000120 	.word	0x04000120
 800631c:	080070c1 	.word	0x080070c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 816a 	bne.w	80065fe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8163 	beq.w	80065fe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 815c 	beq.w	80065fe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2210      	movs	r2, #16
 800634c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006358:	2b40      	cmp	r3, #64	@ 0x40
 800635a:	f040 80d4 	bne.w	8006506 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800636a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 80ad 	beq.w	80064ce <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800637a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800637e:	429a      	cmp	r2, r3
 8006380:	f080 80a5 	bcs.w	80064ce <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800638a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 8086 	bne.w	80064ac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1da      	bne.n	80063a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800640e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006412:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006416:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e1      	bne.n	80063ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800643c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800644a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800644c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006450:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e3      	bne.n	8006426 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800647a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800647c:	f023 0310 	bic.w	r3, r3, #16
 8006480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800648e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006490:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800649c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e4      	bne.n	800646c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fd fa9f 	bl	80039ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8e0 	bl	800668c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80064cc:	e0d5      	b.n	800667a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064d8:	429a      	cmp	r2, r3
 80064da:	f040 80ce 	bne.w	800667a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	f040 80c5 	bne.w	800667a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f8c4 	bl	800668c <HAL_UARTEx_RxEventCallback>
      return;
 8006504:	e0b9      	b.n	800667a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006512:	b29b      	uxth	r3, r3
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80ab 	beq.w	800667e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 80a6 	beq.w	800667e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006546:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006554:	647b      	str	r3, [r7, #68]	@ 0x44
 8006556:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800655a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e4      	bne.n	8006532 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	623b      	str	r3, [r7, #32]
   return(result);
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800658c:	633a      	str	r2, [r7, #48]	@ 0x30
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e3      	bne.n	8006568 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f023 0310 	bic.w	r3, r3, #16
 80065c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	69b9      	ldr	r1, [r7, #24]
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	617b      	str	r3, [r7, #20]
   return(result);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e4      	bne.n	80065b4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f848 	bl	800668c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065fc:	e03f      	b.n	800667e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <HAL_UART_IRQHandler+0x5a8>
 800660a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800660e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d008      	beq.n	8006628 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800661e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 f805 	bl	8007630 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006626:	e02d      	b.n	8006684 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00e      	beq.n	8006652 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01c      	beq.n	8006682 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4798      	blx	r3
    }
    return;
 8006650:	e017      	b.n	8006682 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d012      	beq.n	8006684 <HAL_UART_IRQHandler+0x604>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fdf9 	bl	8007262 <UART_EndTransmit_IT>
    return;
 8006670:	e008      	b.n	8006684 <HAL_UART_IRQHandler+0x604>
      return;
 8006672:	bf00      	nop
 8006674:	e006      	b.n	8006684 <HAL_UART_IRQHandler+0x604>
    return;
 8006676:	bf00      	nop
 8006678:	e004      	b.n	8006684 <HAL_UART_IRQHandler+0x604>
      return;
 800667a:	bf00      	nop
 800667c:	e002      	b.n	8006684 <HAL_UART_IRQHandler+0x604>
      return;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <HAL_UART_IRQHandler+0x604>
    return;
 8006682:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006684:	37e8      	adds	r7, #232	@ 0xe8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop

0800668c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b08a      	sub	sp, #40	@ 0x28
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	431a      	orrs	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4bb4      	ldr	r3, [pc, #720]	@ (80069a4 <UART_SetConfig+0x300>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066dc:	430b      	orrs	r3, r1
 80066de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4aa9      	ldr	r2, [pc, #676]	@ (80069a8 <UART_SetConfig+0x304>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670c:	4313      	orrs	r3, r2
 800670e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006720:	430a      	orrs	r2, r1
 8006722:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4aa0      	ldr	r2, [pc, #640]	@ (80069ac <UART_SetConfig+0x308>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d126      	bne.n	800677c <UART_SetConfig+0xd8>
 800672e:	4ba0      	ldr	r3, [pc, #640]	@ (80069b0 <UART_SetConfig+0x30c>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	2b03      	cmp	r3, #3
 800673a:	d81b      	bhi.n	8006774 <UART_SetConfig+0xd0>
 800673c:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <UART_SetConfig+0xa0>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006755 	.word	0x08006755
 8006748:	08006765 	.word	0x08006765
 800674c:	0800675d 	.word	0x0800675d
 8006750:	0800676d 	.word	0x0800676d
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800675a:	e080      	b.n	800685e <UART_SetConfig+0x1ba>
 800675c:	2302      	movs	r3, #2
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006762:	e07c      	b.n	800685e <UART_SetConfig+0x1ba>
 8006764:	2304      	movs	r3, #4
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676a:	e078      	b.n	800685e <UART_SetConfig+0x1ba>
 800676c:	2308      	movs	r3, #8
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006772:	e074      	b.n	800685e <UART_SetConfig+0x1ba>
 8006774:	2310      	movs	r3, #16
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677a:	e070      	b.n	800685e <UART_SetConfig+0x1ba>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a8c      	ldr	r2, [pc, #560]	@ (80069b4 <UART_SetConfig+0x310>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d138      	bne.n	80067f8 <UART_SetConfig+0x154>
 8006786:	4b8a      	ldr	r3, [pc, #552]	@ (80069b0 <UART_SetConfig+0x30c>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678c:	f003 030c 	and.w	r3, r3, #12
 8006790:	2b0c      	cmp	r3, #12
 8006792:	d82d      	bhi.n	80067f0 <UART_SetConfig+0x14c>
 8006794:	a201      	add	r2, pc, #4	@ (adr r2, 800679c <UART_SetConfig+0xf8>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	080067d1 	.word	0x080067d1
 80067a0:	080067f1 	.word	0x080067f1
 80067a4:	080067f1 	.word	0x080067f1
 80067a8:	080067f1 	.word	0x080067f1
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	080067f1 	.word	0x080067f1
 80067b4:	080067f1 	.word	0x080067f1
 80067b8:	080067f1 	.word	0x080067f1
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	080067f1 	.word	0x080067f1
 80067c4:	080067f1 	.word	0x080067f1
 80067c8:	080067f1 	.word	0x080067f1
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e042      	b.n	800685e <UART_SetConfig+0x1ba>
 80067d8:	2302      	movs	r3, #2
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e03e      	b.n	800685e <UART_SetConfig+0x1ba>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e03a      	b.n	800685e <UART_SetConfig+0x1ba>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e036      	b.n	800685e <UART_SetConfig+0x1ba>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f6:	e032      	b.n	800685e <UART_SetConfig+0x1ba>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a6a      	ldr	r2, [pc, #424]	@ (80069a8 <UART_SetConfig+0x304>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d12a      	bne.n	8006858 <UART_SetConfig+0x1b4>
 8006802:	4b6b      	ldr	r3, [pc, #428]	@ (80069b0 <UART_SetConfig+0x30c>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800680c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006810:	d01a      	beq.n	8006848 <UART_SetConfig+0x1a4>
 8006812:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006816:	d81b      	bhi.n	8006850 <UART_SetConfig+0x1ac>
 8006818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800681c:	d00c      	beq.n	8006838 <UART_SetConfig+0x194>
 800681e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006822:	d815      	bhi.n	8006850 <UART_SetConfig+0x1ac>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <UART_SetConfig+0x18c>
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800682c:	d008      	beq.n	8006840 <UART_SetConfig+0x19c>
 800682e:	e00f      	b.n	8006850 <UART_SetConfig+0x1ac>
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006836:	e012      	b.n	800685e <UART_SetConfig+0x1ba>
 8006838:	2302      	movs	r3, #2
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683e:	e00e      	b.n	800685e <UART_SetConfig+0x1ba>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006846:	e00a      	b.n	800685e <UART_SetConfig+0x1ba>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684e:	e006      	b.n	800685e <UART_SetConfig+0x1ba>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006856:	e002      	b.n	800685e <UART_SetConfig+0x1ba>
 8006858:	2310      	movs	r3, #16
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a51      	ldr	r2, [pc, #324]	@ (80069a8 <UART_SetConfig+0x304>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d17a      	bne.n	800695e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006868:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800686c:	2b08      	cmp	r3, #8
 800686e:	d824      	bhi.n	80068ba <UART_SetConfig+0x216>
 8006870:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <UART_SetConfig+0x1d4>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068bb 	.word	0x080068bb
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068bb 	.word	0x080068bb
 8006888:	080068ab 	.word	0x080068ab
 800688c:	080068bb 	.word	0x080068bb
 8006890:	080068bb 	.word	0x080068bb
 8006894:	080068bb 	.word	0x080068bb
 8006898:	080068b3 	.word	0x080068b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800689c:	f7fe feea 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 80068a0:	61f8      	str	r0, [r7, #28]
        break;
 80068a2:	e010      	b.n	80068c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a4:	4b44      	ldr	r3, [pc, #272]	@ (80069b8 <UART_SetConfig+0x314>)
 80068a6:	61fb      	str	r3, [r7, #28]
        break;
 80068a8:	e00d      	b.n	80068c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068aa:	f7fe fe4b 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80068ae:	61f8      	str	r0, [r7, #28]
        break;
 80068b0:	e009      	b.n	80068c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b6:	61fb      	str	r3, [r7, #28]
        break;
 80068b8:	e005      	b.n	80068c6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8107 	beq.w	8006adc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d305      	bcc.n	80068ea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d903      	bls.n	80068f2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068f0:	e0f4      	b.n	8006adc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2200      	movs	r2, #0
 80068f6:	461c      	mov	r4, r3
 80068f8:	4615      	mov	r5, r2
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	022b      	lsls	r3, r5, #8
 8006904:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006908:	0222      	lsls	r2, r4, #8
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	6849      	ldr	r1, [r1, #4]
 800690e:	0849      	lsrs	r1, r1, #1
 8006910:	2000      	movs	r0, #0
 8006912:	4688      	mov	r8, r1
 8006914:	4681      	mov	r9, r0
 8006916:	eb12 0a08 	adds.w	sl, r2, r8
 800691a:	eb43 0b09 	adc.w	fp, r3, r9
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692c:	4650      	mov	r0, sl
 800692e:	4659      	mov	r1, fp
 8006930:	f7fa f994 	bl	8000c5c <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4613      	mov	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006942:	d308      	bcc.n	8006956 <UART_SetConfig+0x2b2>
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800694a:	d204      	bcs.n	8006956 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	60da      	str	r2, [r3, #12]
 8006954:	e0c2      	b.n	8006adc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800695c:	e0be      	b.n	8006adc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006966:	d16a      	bne.n	8006a3e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006968:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800696c:	2b08      	cmp	r3, #8
 800696e:	d834      	bhi.n	80069da <UART_SetConfig+0x336>
 8006970:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <UART_SetConfig+0x2d4>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069bd 	.word	0x080069bd
 8006980:	080069c5 	.word	0x080069c5
 8006984:	080069db 	.word	0x080069db
 8006988:	080069cb 	.word	0x080069cb
 800698c:	080069db 	.word	0x080069db
 8006990:	080069db 	.word	0x080069db
 8006994:	080069db 	.word	0x080069db
 8006998:	080069d3 	.word	0x080069d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800699c:	f7fe fe6a 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 80069a0:	61f8      	str	r0, [r7, #28]
        break;
 80069a2:	e020      	b.n	80069e6 <UART_SetConfig+0x342>
 80069a4:	efff69f3 	.word	0xefff69f3
 80069a8:	40008000 	.word	0x40008000
 80069ac:	40013800 	.word	0x40013800
 80069b0:	40021000 	.word	0x40021000
 80069b4:	40004400 	.word	0x40004400
 80069b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069bc:	f7fe fe70 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 80069c0:	61f8      	str	r0, [r7, #28]
        break;
 80069c2:	e010      	b.n	80069e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c4:	4b4c      	ldr	r3, [pc, #304]	@ (8006af8 <UART_SetConfig+0x454>)
 80069c6:	61fb      	str	r3, [r7, #28]
        break;
 80069c8:	e00d      	b.n	80069e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ca:	f7fe fdbb 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80069ce:	61f8      	str	r0, [r7, #28]
        break;
 80069d0:	e009      	b.n	80069e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d6:	61fb      	str	r3, [r7, #28]
        break;
 80069d8:	e005      	b.n	80069e6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d077      	beq.n	8006adc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	005a      	lsls	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	441a      	add	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b0f      	cmp	r3, #15
 8006a06:	d916      	bls.n	8006a36 <UART_SetConfig+0x392>
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0e:	d212      	bcs.n	8006a36 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f023 030f 	bic.w	r3, r3, #15
 8006a18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	8afb      	ldrh	r3, [r7, #22]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	8afa      	ldrh	r2, [r7, #22]
 8006a32:	60da      	str	r2, [r3, #12]
 8006a34:	e052      	b.n	8006adc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a3c:	e04e      	b.n	8006adc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d827      	bhi.n	8006a96 <UART_SetConfig+0x3f2>
 8006a46:	a201      	add	r2, pc, #4	@ (adr r2, 8006a4c <UART_SetConfig+0x3a8>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a81 	.word	0x08006a81
 8006a58:	08006a97 	.word	0x08006a97
 8006a5c:	08006a87 	.word	0x08006a87
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006a97 	.word	0x08006a97
 8006a6c:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fe fe00 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8006a74:	61f8      	str	r0, [r7, #28]
        break;
 8006a76:	e014      	b.n	8006aa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fe fe12 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8006a7c:	61f8      	str	r0, [r7, #28]
        break;
 8006a7e:	e010      	b.n	8006aa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b1d      	ldr	r3, [pc, #116]	@ (8006af8 <UART_SetConfig+0x454>)
 8006a82:	61fb      	str	r3, [r7, #28]
        break;
 8006a84:	e00d      	b.n	8006aa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fe fd5d 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8006a8a:	61f8      	str	r0, [r7, #28]
        break;
 8006a8c:	e009      	b.n	8006aa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a92:	61fb      	str	r3, [r7, #28]
        break;
 8006a94:	e005      	b.n	8006aa2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006aa0:	bf00      	nop
    }

    if (pclk != 0U)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d019      	beq.n	8006adc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	085a      	lsrs	r2, r3, #1
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	441a      	add	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b0f      	cmp	r3, #15
 8006ac0:	d909      	bls.n	8006ad6 <UART_SetConfig+0x432>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac8:	d205      	bcs.n	8006ad6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60da      	str	r2, [r3, #12]
 8006ad4:	e002      	b.n	8006adc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ae8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3728      	adds	r7, #40	@ 0x28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af6:	bf00      	nop
 8006af8:	00f42400 	.word	0x00f42400

08006afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01a      	beq.n	8006c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bfa:	d10a      	bne.n	8006c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b098      	sub	sp, #96	@ 0x60
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c50:	f7fb fd18 	bl	8002684 <HAL_GetTick>
 8006c54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d12e      	bne.n	8006cc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f88c 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d021      	beq.n	8006cc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e062      	b.n	8006d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d149      	bne.n	8006d64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f856 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d03c      	beq.n	8006d64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d3c:	61fa      	str	r2, [r7, #28]
 8006d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e011      	b.n	8006d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3758      	adds	r7, #88	@ 0x58
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	e04f      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006da8:	d04b      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006daa:	f7fb fc6b 	bl	8002684 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e04e      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d037      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b80      	cmp	r3, #128	@ 0x80
 8006dd6:	d034      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b40      	cmp	r3, #64	@ 0x40
 8006ddc:	d031      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d110      	bne.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f8ff 	bl	8006ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e029      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e1c:	d111      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f8e5 	bl	8006ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e00f      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d0a0      	beq.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b097      	sub	sp, #92	@ 0x5c
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e9e:	d10e      	bne.n	8006ebe <UART_Start_Receive_IT+0x52>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <UART_Start_Receive_IT+0x48>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006eae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006eb2:	e02d      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ebc:	e028      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10d      	bne.n	8006ee2 <UART_Start_Receive_IT+0x76>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <UART_Start_Receive_IT+0x6c>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	22ff      	movs	r2, #255	@ 0xff
 8006ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ed6:	e01b      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	227f      	movs	r2, #127	@ 0x7f
 8006edc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ee0:	e016      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eea:	d10d      	bne.n	8006f08 <UART_Start_Receive_IT+0x9c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <UART_Start_Receive_IT+0x92>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	227f      	movs	r2, #127	@ 0x7f
 8006ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006efc:	e008      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	223f      	movs	r2, #63	@ 0x3f
 8006f02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f06:	e003      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2222      	movs	r2, #34	@ 0x22
 8006f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f40:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006f42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5c:	d107      	bne.n	8006f6e <UART_Start_Receive_IT+0x102>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d103      	bne.n	8006f6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a21      	ldr	r2, [pc, #132]	@ (8006ff0 <UART_Start_Receive_IT+0x184>)
 8006f6a:	669a      	str	r2, [r3, #104]	@ 0x68
 8006f6c:	e002      	b.n	8006f74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4a20      	ldr	r2, [pc, #128]	@ (8006ff4 <UART_Start_Receive_IT+0x188>)
 8006f72:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d019      	beq.n	8006fb0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_Start_Receive_IT+0x110>
 8006fae:	e018      	b.n	8006fe2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f043 0320 	orr.w	r3, r3, #32
 8006fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fce:	623b      	str	r3, [r7, #32]
 8006fd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	69f9      	ldr	r1, [r7, #28]
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	375c      	adds	r7, #92	@ 0x5c
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	08007475 	.word	0x08007475
 8006ff4:	080072b9 	.word	0x080072b9

08006ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b095      	sub	sp, #84	@ 0x54
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800701e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007020:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e6      	bne.n	8007000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	61fb      	str	r3, [r7, #28]
   return(result);
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e5      	bne.n	8007032 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706a:	2b01      	cmp	r3, #1
 800706c:	d118      	bne.n	80070a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	60bb      	str	r3, [r7, #8]
   return(result);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0310 	bic.w	r3, r3, #16
 8007082:	647b      	str	r3, [r7, #68]	@ 0x44
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	613b      	str	r3, [r7, #16]
   return(result);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e6      	bne.n	800706e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070b4:	bf00      	nop
 80070b6:	3754      	adds	r7, #84	@ 0x54
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7fb f99e 	bl	8002420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b08f      	sub	sp, #60	@ 0x3c
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070f8:	2b21      	cmp	r3, #33	@ 0x21
 80070fa:	d14c      	bne.n	8007196 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d132      	bne.n	800716e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	61fb      	str	r3, [r7, #28]
   return(result);
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800711c:	637b      	str	r3, [r7, #52]	@ 0x34
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007128:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800712c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e6      	bne.n	8007108 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	60bb      	str	r3, [r7, #8]
   return(result);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800714e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6979      	ldr	r1, [r7, #20]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	613b      	str	r3, [r7, #16]
   return(result);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800716c:	e013      	b.n	8007196 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007196:	bf00      	nop
 8007198:	373c      	adds	r7, #60	@ 0x3c
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b091      	sub	sp, #68	@ 0x44
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ae:	2b21      	cmp	r3, #33	@ 0x21
 80071b0:	d151      	bne.n	8007256 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d132      	bne.n	8007224 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	623b      	str	r3, [r7, #32]
   return(result);
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80071de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e6      	bne.n	80071be <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	69b9      	ldr	r1, [r7, #24]
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	617b      	str	r3, [r7, #20]
   return(result);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007222:	e018      	b.n	8007256 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800722a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800722c:	881a      	ldrh	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007236:	b292      	uxth	r2, r2
 8007238:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800723e:	1c9a      	adds	r2, r3, #2
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007256:	bf00      	nop
 8007258:	3744      	adds	r7, #68	@ 0x44
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b088      	sub	sp, #32
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	60bb      	str	r3, [r7, #8]
   return(result);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	613b      	str	r3, [r7, #16]
   return(result);
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e6      	bne.n	800726a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2220      	movs	r2, #32
 80072a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fb f86d 	bl	8002388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ae:	bf00      	nop
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b09c      	sub	sp, #112	@ 0x70
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072d0:	2b22      	cmp	r3, #34	@ 0x22
 80072d2:	f040 80be 	bne.w	8007452 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80072dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80072e4:	b2d9      	uxtb	r1, r3
 80072e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f0:	400a      	ands	r2, r1
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 80a3 	bne.w	8007466 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800732e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800733e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007340:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800734c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e6      	bne.n	8007320 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	667b      	str	r3, [r7, #100]	@ 0x64
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007372:	647a      	str	r2, [r7, #68]	@ 0x44
 8007374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007378:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a34      	ldr	r2, [pc, #208]	@ (8007470 <UART_RxISR_8BIT+0x1b8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d01f      	beq.n	80073e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d018      	beq.n	80073e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	623b      	str	r3, [r7, #32]
   return(result);
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e6      	bne.n	80073b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d12e      	bne.n	800744a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0310 	bic.w	r3, r3, #16
 8007406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	617b      	str	r3, [r7, #20]
   return(result);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e6      	bne.n	80073f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b10      	cmp	r3, #16
 8007430:	d103      	bne.n	800743a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2210      	movs	r2, #16
 8007438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff f922 	bl	800668c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007448:	e00d      	b.n	8007466 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa ffba 	bl	80023c4 <HAL_UART_RxCpltCallback>
}
 8007450:	e009      	b.n	8007466 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	8b1b      	ldrh	r3, [r3, #24]
 8007458:	b29a      	uxth	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0208 	orr.w	r2, r2, #8
 8007462:	b292      	uxth	r2, r2
 8007464:	831a      	strh	r2, [r3, #24]
}
 8007466:	bf00      	nop
 8007468:	3770      	adds	r7, #112	@ 0x70
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40008000 	.word	0x40008000

08007474 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b09c      	sub	sp, #112	@ 0x70
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007482:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800748c:	2b22      	cmp	r3, #34	@ 0x22
 800748e:	f040 80be 	bne.w	800760e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007498:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80074a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80074a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074aa:	4013      	ands	r3, r2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b6:	1c9a      	adds	r2, r3, #2
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 80a3 	bne.w	8007622 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80074ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80074fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007500:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e6      	bne.n	80074dc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	663b      	str	r3, [r7, #96]	@ 0x60
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800752e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007534:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e5      	bne.n	800750e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a34      	ldr	r2, [pc, #208]	@ (800762c <UART_RxISR_16BIT+0x1b8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d01f      	beq.n	80075a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d018      	beq.n	80075a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	61fb      	str	r3, [r7, #28]
   return(result);
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800758e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e6      	bne.n	800756e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d12e      	bne.n	8007606 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 0310 	bic.w	r3, r3, #16
 80075c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6979      	ldr	r1, [r7, #20]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	613b      	str	r3, [r7, #16]
   return(result);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e6      	bne.n	80075ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b10      	cmp	r3, #16
 80075ec:	d103      	bne.n	80075f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2210      	movs	r2, #16
 80075f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff f844 	bl	800668c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007604:	e00d      	b.n	8007622 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fa fedc 	bl	80023c4 <HAL_UART_RxCpltCallback>
}
 800760c:	e009      	b.n	8007622 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	8b1b      	ldrh	r3, [r3, #24]
 8007614:	b29a      	uxth	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0208 	orr.w	r2, r2, #8
 800761e:	b292      	uxth	r2, r2
 8007620:	831a      	strh	r2, [r3, #24]
}
 8007622:	bf00      	nop
 8007624:	3770      	adds	r7, #112	@ 0x70
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40008000 	.word	0x40008000

08007630 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <__assert_func>:
 8007644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007646:	4614      	mov	r4, r2
 8007648:	461a      	mov	r2, r3
 800764a:	4b09      	ldr	r3, [pc, #36]	@ (8007670 <__assert_func+0x2c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4605      	mov	r5, r0
 8007650:	68d8      	ldr	r0, [r3, #12]
 8007652:	b954      	cbnz	r4, 800766a <__assert_func+0x26>
 8007654:	4b07      	ldr	r3, [pc, #28]	@ (8007674 <__assert_func+0x30>)
 8007656:	461c      	mov	r4, r3
 8007658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800765c:	9100      	str	r1, [sp, #0]
 800765e:	462b      	mov	r3, r5
 8007660:	4905      	ldr	r1, [pc, #20]	@ (8007678 <__assert_func+0x34>)
 8007662:	f000 fd3d 	bl	80080e0 <fiprintf>
 8007666:	f000 fdd4 	bl	8008212 <abort>
 800766a:	4b04      	ldr	r3, [pc, #16]	@ (800767c <__assert_func+0x38>)
 800766c:	e7f4      	b.n	8007658 <__assert_func+0x14>
 800766e:	bf00      	nop
 8007670:	20000024 	.word	0x20000024
 8007674:	0800b467 	.word	0x0800b467
 8007678:	0800b439 	.word	0x0800b439
 800767c:	0800b42c 	.word	0x0800b42c

08007680 <__cvt>:
 8007680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007684:	ec57 6b10 	vmov	r6, r7, d0
 8007688:	2f00      	cmp	r7, #0
 800768a:	460c      	mov	r4, r1
 800768c:	4619      	mov	r1, r3
 800768e:	463b      	mov	r3, r7
 8007690:	bfbb      	ittet	lt
 8007692:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007696:	461f      	movlt	r7, r3
 8007698:	2300      	movge	r3, #0
 800769a:	232d      	movlt	r3, #45	@ 0x2d
 800769c:	700b      	strb	r3, [r1, #0]
 800769e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076a4:	4691      	mov	r9, r2
 80076a6:	f023 0820 	bic.w	r8, r3, #32
 80076aa:	bfbc      	itt	lt
 80076ac:	4632      	movlt	r2, r6
 80076ae:	4616      	movlt	r6, r2
 80076b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076b4:	d005      	beq.n	80076c2 <__cvt+0x42>
 80076b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076ba:	d100      	bne.n	80076be <__cvt+0x3e>
 80076bc:	3401      	adds	r4, #1
 80076be:	2102      	movs	r1, #2
 80076c0:	e000      	b.n	80076c4 <__cvt+0x44>
 80076c2:	2103      	movs	r1, #3
 80076c4:	ab03      	add	r3, sp, #12
 80076c6:	9301      	str	r3, [sp, #4]
 80076c8:	ab02      	add	r3, sp, #8
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	ec47 6b10 	vmov	d0, r6, r7
 80076d0:	4653      	mov	r3, sl
 80076d2:	4622      	mov	r2, r4
 80076d4:	f000 fe2c 	bl	8008330 <_dtoa_r>
 80076d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80076dc:	4605      	mov	r5, r0
 80076de:	d119      	bne.n	8007714 <__cvt+0x94>
 80076e0:	f019 0f01 	tst.w	r9, #1
 80076e4:	d00e      	beq.n	8007704 <__cvt+0x84>
 80076e6:	eb00 0904 	add.w	r9, r0, r4
 80076ea:	2200      	movs	r2, #0
 80076ec:	2300      	movs	r3, #0
 80076ee:	4630      	mov	r0, r6
 80076f0:	4639      	mov	r1, r7
 80076f2:	f7f9 f9f3 	bl	8000adc <__aeabi_dcmpeq>
 80076f6:	b108      	cbz	r0, 80076fc <__cvt+0x7c>
 80076f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80076fc:	2230      	movs	r2, #48	@ 0x30
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	454b      	cmp	r3, r9
 8007702:	d31e      	bcc.n	8007742 <__cvt+0xc2>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007708:	1b5b      	subs	r3, r3, r5
 800770a:	4628      	mov	r0, r5
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	b004      	add	sp, #16
 8007710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007714:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007718:	eb00 0904 	add.w	r9, r0, r4
 800771c:	d1e5      	bne.n	80076ea <__cvt+0x6a>
 800771e:	7803      	ldrb	r3, [r0, #0]
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d10a      	bne.n	800773a <__cvt+0xba>
 8007724:	2200      	movs	r2, #0
 8007726:	2300      	movs	r3, #0
 8007728:	4630      	mov	r0, r6
 800772a:	4639      	mov	r1, r7
 800772c:	f7f9 f9d6 	bl	8000adc <__aeabi_dcmpeq>
 8007730:	b918      	cbnz	r0, 800773a <__cvt+0xba>
 8007732:	f1c4 0401 	rsb	r4, r4, #1
 8007736:	f8ca 4000 	str.w	r4, [sl]
 800773a:	f8da 3000 	ldr.w	r3, [sl]
 800773e:	4499      	add	r9, r3
 8007740:	e7d3      	b.n	80076ea <__cvt+0x6a>
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	9103      	str	r1, [sp, #12]
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e7d9      	b.n	80076fe <__cvt+0x7e>

0800774a <__exponent>:
 800774a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800774c:	2900      	cmp	r1, #0
 800774e:	bfba      	itte	lt
 8007750:	4249      	neglt	r1, r1
 8007752:	232d      	movlt	r3, #45	@ 0x2d
 8007754:	232b      	movge	r3, #43	@ 0x2b
 8007756:	2909      	cmp	r1, #9
 8007758:	7002      	strb	r2, [r0, #0]
 800775a:	7043      	strb	r3, [r0, #1]
 800775c:	dd29      	ble.n	80077b2 <__exponent+0x68>
 800775e:	f10d 0307 	add.w	r3, sp, #7
 8007762:	461d      	mov	r5, r3
 8007764:	270a      	movs	r7, #10
 8007766:	461a      	mov	r2, r3
 8007768:	fbb1 f6f7 	udiv	r6, r1, r7
 800776c:	fb07 1416 	mls	r4, r7, r6, r1
 8007770:	3430      	adds	r4, #48	@ 0x30
 8007772:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007776:	460c      	mov	r4, r1
 8007778:	2c63      	cmp	r4, #99	@ 0x63
 800777a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800777e:	4631      	mov	r1, r6
 8007780:	dcf1      	bgt.n	8007766 <__exponent+0x1c>
 8007782:	3130      	adds	r1, #48	@ 0x30
 8007784:	1e94      	subs	r4, r2, #2
 8007786:	f803 1c01 	strb.w	r1, [r3, #-1]
 800778a:	1c41      	adds	r1, r0, #1
 800778c:	4623      	mov	r3, r4
 800778e:	42ab      	cmp	r3, r5
 8007790:	d30a      	bcc.n	80077a8 <__exponent+0x5e>
 8007792:	f10d 0309 	add.w	r3, sp, #9
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	42ac      	cmp	r4, r5
 800779a:	bf88      	it	hi
 800779c:	2300      	movhi	r3, #0
 800779e:	3302      	adds	r3, #2
 80077a0:	4403      	add	r3, r0
 80077a2:	1a18      	subs	r0, r3, r0
 80077a4:	b003      	add	sp, #12
 80077a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077b0:	e7ed      	b.n	800778e <__exponent+0x44>
 80077b2:	2330      	movs	r3, #48	@ 0x30
 80077b4:	3130      	adds	r1, #48	@ 0x30
 80077b6:	7083      	strb	r3, [r0, #2]
 80077b8:	70c1      	strb	r1, [r0, #3]
 80077ba:	1d03      	adds	r3, r0, #4
 80077bc:	e7f1      	b.n	80077a2 <__exponent+0x58>
	...

080077c0 <_printf_float>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	b08d      	sub	sp, #52	@ 0x34
 80077c6:	460c      	mov	r4, r1
 80077c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077cc:	4616      	mov	r6, r2
 80077ce:	461f      	mov	r7, r3
 80077d0:	4605      	mov	r5, r0
 80077d2:	f000 fcd7 	bl	8008184 <_localeconv_r>
 80077d6:	6803      	ldr	r3, [r0, #0]
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7f8 fd48 	bl	8000270 <strlen>
 80077e0:	2300      	movs	r3, #0
 80077e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077e4:	f8d8 3000 	ldr.w	r3, [r8]
 80077e8:	9005      	str	r0, [sp, #20]
 80077ea:	3307      	adds	r3, #7
 80077ec:	f023 0307 	bic.w	r3, r3, #7
 80077f0:	f103 0208 	add.w	r2, r3, #8
 80077f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80077f8:	f8d4 b000 	ldr.w	fp, [r4]
 80077fc:	f8c8 2000 	str.w	r2, [r8]
 8007800:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007804:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	f8cd 8018 	str.w	r8, [sp, #24]
 800780e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007816:	4b9c      	ldr	r3, [pc, #624]	@ (8007a88 <_printf_float+0x2c8>)
 8007818:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800781c:	f7f9 f990 	bl	8000b40 <__aeabi_dcmpun>
 8007820:	bb70      	cbnz	r0, 8007880 <_printf_float+0xc0>
 8007822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007826:	4b98      	ldr	r3, [pc, #608]	@ (8007a88 <_printf_float+0x2c8>)
 8007828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800782c:	f7f9 f96a 	bl	8000b04 <__aeabi_dcmple>
 8007830:	bb30      	cbnz	r0, 8007880 <_printf_float+0xc0>
 8007832:	2200      	movs	r2, #0
 8007834:	2300      	movs	r3, #0
 8007836:	4640      	mov	r0, r8
 8007838:	4649      	mov	r1, r9
 800783a:	f7f9 f959 	bl	8000af0 <__aeabi_dcmplt>
 800783e:	b110      	cbz	r0, 8007846 <_printf_float+0x86>
 8007840:	232d      	movs	r3, #45	@ 0x2d
 8007842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007846:	4a91      	ldr	r2, [pc, #580]	@ (8007a8c <_printf_float+0x2cc>)
 8007848:	4b91      	ldr	r3, [pc, #580]	@ (8007a90 <_printf_float+0x2d0>)
 800784a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800784e:	bf94      	ite	ls
 8007850:	4690      	movls	r8, r2
 8007852:	4698      	movhi	r8, r3
 8007854:	2303      	movs	r3, #3
 8007856:	6123      	str	r3, [r4, #16]
 8007858:	f02b 0304 	bic.w	r3, fp, #4
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	f04f 0900 	mov.w	r9, #0
 8007862:	9700      	str	r7, [sp, #0]
 8007864:	4633      	mov	r3, r6
 8007866:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007868:	4621      	mov	r1, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f000 f9d2 	bl	8007c14 <_printf_common>
 8007870:	3001      	adds	r0, #1
 8007872:	f040 808d 	bne.w	8007990 <_printf_float+0x1d0>
 8007876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800787a:	b00d      	add	sp, #52	@ 0x34
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	4642      	mov	r2, r8
 8007882:	464b      	mov	r3, r9
 8007884:	4640      	mov	r0, r8
 8007886:	4649      	mov	r1, r9
 8007888:	f7f9 f95a 	bl	8000b40 <__aeabi_dcmpun>
 800788c:	b140      	cbz	r0, 80078a0 <_printf_float+0xe0>
 800788e:	464b      	mov	r3, r9
 8007890:	2b00      	cmp	r3, #0
 8007892:	bfbc      	itt	lt
 8007894:	232d      	movlt	r3, #45	@ 0x2d
 8007896:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800789a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a94 <_printf_float+0x2d4>)
 800789c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a98 <_printf_float+0x2d8>)
 800789e:	e7d4      	b.n	800784a <_printf_float+0x8a>
 80078a0:	6863      	ldr	r3, [r4, #4]
 80078a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078a6:	9206      	str	r2, [sp, #24]
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	d13b      	bne.n	8007924 <_printf_float+0x164>
 80078ac:	2306      	movs	r3, #6
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078b4:	2300      	movs	r3, #0
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	9303      	str	r3, [sp, #12]
 80078ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80078bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078c0:	ab09      	add	r3, sp, #36	@ 0x24
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	6861      	ldr	r1, [r4, #4]
 80078c6:	ec49 8b10 	vmov	d0, r8, r9
 80078ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078ce:	4628      	mov	r0, r5
 80078d0:	f7ff fed6 	bl	8007680 <__cvt>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078d8:	2b47      	cmp	r3, #71	@ 0x47
 80078da:	4680      	mov	r8, r0
 80078dc:	d129      	bne.n	8007932 <_printf_float+0x172>
 80078de:	1cc8      	adds	r0, r1, #3
 80078e0:	db02      	blt.n	80078e8 <_printf_float+0x128>
 80078e2:	6863      	ldr	r3, [r4, #4]
 80078e4:	4299      	cmp	r1, r3
 80078e6:	dd41      	ble.n	800796c <_printf_float+0x1ac>
 80078e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80078ec:	fa5f fa8a 	uxtb.w	sl, sl
 80078f0:	3901      	subs	r1, #1
 80078f2:	4652      	mov	r2, sl
 80078f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80078f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80078fa:	f7ff ff26 	bl	800774a <__exponent>
 80078fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007900:	1813      	adds	r3, r2, r0
 8007902:	2a01      	cmp	r2, #1
 8007904:	4681      	mov	r9, r0
 8007906:	6123      	str	r3, [r4, #16]
 8007908:	dc02      	bgt.n	8007910 <_printf_float+0x150>
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	07d2      	lsls	r2, r2, #31
 800790e:	d501      	bpl.n	8007914 <_printf_float+0x154>
 8007910:	3301      	adds	r3, #1
 8007912:	6123      	str	r3, [r4, #16]
 8007914:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0a2      	beq.n	8007862 <_printf_float+0xa2>
 800791c:	232d      	movs	r3, #45	@ 0x2d
 800791e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007922:	e79e      	b.n	8007862 <_printf_float+0xa2>
 8007924:	9a06      	ldr	r2, [sp, #24]
 8007926:	2a47      	cmp	r2, #71	@ 0x47
 8007928:	d1c2      	bne.n	80078b0 <_printf_float+0xf0>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1c0      	bne.n	80078b0 <_printf_float+0xf0>
 800792e:	2301      	movs	r3, #1
 8007930:	e7bd      	b.n	80078ae <_printf_float+0xee>
 8007932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007936:	d9db      	bls.n	80078f0 <_printf_float+0x130>
 8007938:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800793c:	d118      	bne.n	8007970 <_printf_float+0x1b0>
 800793e:	2900      	cmp	r1, #0
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	dd0b      	ble.n	800795c <_printf_float+0x19c>
 8007944:	6121      	str	r1, [r4, #16]
 8007946:	b913      	cbnz	r3, 800794e <_printf_float+0x18e>
 8007948:	6822      	ldr	r2, [r4, #0]
 800794a:	07d0      	lsls	r0, r2, #31
 800794c:	d502      	bpl.n	8007954 <_printf_float+0x194>
 800794e:	3301      	adds	r3, #1
 8007950:	440b      	add	r3, r1
 8007952:	6123      	str	r3, [r4, #16]
 8007954:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	e7db      	b.n	8007914 <_printf_float+0x154>
 800795c:	b913      	cbnz	r3, 8007964 <_printf_float+0x1a4>
 800795e:	6822      	ldr	r2, [r4, #0]
 8007960:	07d2      	lsls	r2, r2, #31
 8007962:	d501      	bpl.n	8007968 <_printf_float+0x1a8>
 8007964:	3302      	adds	r3, #2
 8007966:	e7f4      	b.n	8007952 <_printf_float+0x192>
 8007968:	2301      	movs	r3, #1
 800796a:	e7f2      	b.n	8007952 <_printf_float+0x192>
 800796c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007972:	4299      	cmp	r1, r3
 8007974:	db05      	blt.n	8007982 <_printf_float+0x1c2>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	6121      	str	r1, [r4, #16]
 800797a:	07d8      	lsls	r0, r3, #31
 800797c:	d5ea      	bpl.n	8007954 <_printf_float+0x194>
 800797e:	1c4b      	adds	r3, r1, #1
 8007980:	e7e7      	b.n	8007952 <_printf_float+0x192>
 8007982:	2900      	cmp	r1, #0
 8007984:	bfd4      	ite	le
 8007986:	f1c1 0202 	rsble	r2, r1, #2
 800798a:	2201      	movgt	r2, #1
 800798c:	4413      	add	r3, r2
 800798e:	e7e0      	b.n	8007952 <_printf_float+0x192>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	055a      	lsls	r2, r3, #21
 8007994:	d407      	bmi.n	80079a6 <_printf_float+0x1e6>
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	4642      	mov	r2, r8
 800799a:	4631      	mov	r1, r6
 800799c:	4628      	mov	r0, r5
 800799e:	47b8      	blx	r7
 80079a0:	3001      	adds	r0, #1
 80079a2:	d12b      	bne.n	80079fc <_printf_float+0x23c>
 80079a4:	e767      	b.n	8007876 <_printf_float+0xb6>
 80079a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079aa:	f240 80dd 	bls.w	8007b68 <_printf_float+0x3a8>
 80079ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	f7f9 f891 	bl	8000adc <__aeabi_dcmpeq>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d033      	beq.n	8007a26 <_printf_float+0x266>
 80079be:	4a37      	ldr	r2, [pc, #220]	@ (8007a9c <_printf_float+0x2dc>)
 80079c0:	2301      	movs	r3, #1
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	f43f af54 	beq.w	8007876 <_printf_float+0xb6>
 80079ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079d2:	4543      	cmp	r3, r8
 80079d4:	db02      	blt.n	80079dc <_printf_float+0x21c>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	07d8      	lsls	r0, r3, #31
 80079da:	d50f      	bpl.n	80079fc <_printf_float+0x23c>
 80079dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f af45 	beq.w	8007876 <_printf_float+0xb6>
 80079ec:	f04f 0900 	mov.w	r9, #0
 80079f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80079f4:	f104 0a1a 	add.w	sl, r4, #26
 80079f8:	45c8      	cmp	r8, r9
 80079fa:	dc09      	bgt.n	8007a10 <_printf_float+0x250>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	079b      	lsls	r3, r3, #30
 8007a00:	f100 8103 	bmi.w	8007c0a <_printf_float+0x44a>
 8007a04:	68e0      	ldr	r0, [r4, #12]
 8007a06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a08:	4298      	cmp	r0, r3
 8007a0a:	bfb8      	it	lt
 8007a0c:	4618      	movlt	r0, r3
 8007a0e:	e734      	b.n	800787a <_printf_float+0xba>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4652      	mov	r2, sl
 8007a14:	4631      	mov	r1, r6
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b8      	blx	r7
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f43f af2b 	beq.w	8007876 <_printf_float+0xb6>
 8007a20:	f109 0901 	add.w	r9, r9, #1
 8007a24:	e7e8      	b.n	80079f8 <_printf_float+0x238>
 8007a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dc39      	bgt.n	8007aa0 <_printf_float+0x2e0>
 8007a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a9c <_printf_float+0x2dc>)
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4631      	mov	r1, r6
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b8      	blx	r7
 8007a36:	3001      	adds	r0, #1
 8007a38:	f43f af1d 	beq.w	8007876 <_printf_float+0xb6>
 8007a3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a40:	ea59 0303 	orrs.w	r3, r9, r3
 8007a44:	d102      	bne.n	8007a4c <_printf_float+0x28c>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	07d9      	lsls	r1, r3, #31
 8007a4a:	d5d7      	bpl.n	80079fc <_printf_float+0x23c>
 8007a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f af0d 	beq.w	8007876 <_printf_float+0xb6>
 8007a5c:	f04f 0a00 	mov.w	sl, #0
 8007a60:	f104 0b1a 	add.w	fp, r4, #26
 8007a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a66:	425b      	negs	r3, r3
 8007a68:	4553      	cmp	r3, sl
 8007a6a:	dc01      	bgt.n	8007a70 <_printf_float+0x2b0>
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	e793      	b.n	8007998 <_printf_float+0x1d8>
 8007a70:	2301      	movs	r3, #1
 8007a72:	465a      	mov	r2, fp
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f43f aefb 	beq.w	8007876 <_printf_float+0xb6>
 8007a80:	f10a 0a01 	add.w	sl, sl, #1
 8007a84:	e7ee      	b.n	8007a64 <_printf_float+0x2a4>
 8007a86:	bf00      	nop
 8007a88:	7fefffff 	.word	0x7fefffff
 8007a8c:	0800b468 	.word	0x0800b468
 8007a90:	0800b46c 	.word	0x0800b46c
 8007a94:	0800b470 	.word	0x0800b470
 8007a98:	0800b474 	.word	0x0800b474
 8007a9c:	0800b478 	.word	0x0800b478
 8007aa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007aa2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007aa6:	4553      	cmp	r3, sl
 8007aa8:	bfa8      	it	ge
 8007aaa:	4653      	movge	r3, sl
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	4699      	mov	r9, r3
 8007ab0:	dc36      	bgt.n	8007b20 <_printf_float+0x360>
 8007ab2:	f04f 0b00 	mov.w	fp, #0
 8007ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aba:	f104 021a 	add.w	r2, r4, #26
 8007abe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ac0:	9306      	str	r3, [sp, #24]
 8007ac2:	eba3 0309 	sub.w	r3, r3, r9
 8007ac6:	455b      	cmp	r3, fp
 8007ac8:	dc31      	bgt.n	8007b2e <_printf_float+0x36e>
 8007aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007acc:	459a      	cmp	sl, r3
 8007ace:	dc3a      	bgt.n	8007b46 <_printf_float+0x386>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	07da      	lsls	r2, r3, #31
 8007ad4:	d437      	bmi.n	8007b46 <_printf_float+0x386>
 8007ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad8:	ebaa 0903 	sub.w	r9, sl, r3
 8007adc:	9b06      	ldr	r3, [sp, #24]
 8007ade:	ebaa 0303 	sub.w	r3, sl, r3
 8007ae2:	4599      	cmp	r9, r3
 8007ae4:	bfa8      	it	ge
 8007ae6:	4699      	movge	r9, r3
 8007ae8:	f1b9 0f00 	cmp.w	r9, #0
 8007aec:	dc33      	bgt.n	8007b56 <_printf_float+0x396>
 8007aee:	f04f 0800 	mov.w	r8, #0
 8007af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af6:	f104 0b1a 	add.w	fp, r4, #26
 8007afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afc:	ebaa 0303 	sub.w	r3, sl, r3
 8007b00:	eba3 0309 	sub.w	r3, r3, r9
 8007b04:	4543      	cmp	r3, r8
 8007b06:	f77f af79 	ble.w	80079fc <_printf_float+0x23c>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	465a      	mov	r2, fp
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f aeae 	beq.w	8007876 <_printf_float+0xb6>
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	e7ec      	b.n	8007afa <_printf_float+0x33a>
 8007b20:	4642      	mov	r2, r8
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d1c2      	bne.n	8007ab2 <_printf_float+0x2f2>
 8007b2c:	e6a3      	b.n	8007876 <_printf_float+0xb6>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	9206      	str	r2, [sp, #24]
 8007b36:	47b8      	blx	r7
 8007b38:	3001      	adds	r0, #1
 8007b3a:	f43f ae9c 	beq.w	8007876 <_printf_float+0xb6>
 8007b3e:	9a06      	ldr	r2, [sp, #24]
 8007b40:	f10b 0b01 	add.w	fp, fp, #1
 8007b44:	e7bb      	b.n	8007abe <_printf_float+0x2fe>
 8007b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	d1c0      	bne.n	8007ad6 <_printf_float+0x316>
 8007b54:	e68f      	b.n	8007876 <_printf_float+0xb6>
 8007b56:	9a06      	ldr	r2, [sp, #24]
 8007b58:	464b      	mov	r3, r9
 8007b5a:	4442      	add	r2, r8
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	d1c3      	bne.n	8007aee <_printf_float+0x32e>
 8007b66:	e686      	b.n	8007876 <_printf_float+0xb6>
 8007b68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b6c:	f1ba 0f01 	cmp.w	sl, #1
 8007b70:	dc01      	bgt.n	8007b76 <_printf_float+0x3b6>
 8007b72:	07db      	lsls	r3, r3, #31
 8007b74:	d536      	bpl.n	8007be4 <_printf_float+0x424>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4642      	mov	r2, r8
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b8      	blx	r7
 8007b80:	3001      	adds	r0, #1
 8007b82:	f43f ae78 	beq.w	8007876 <_printf_float+0xb6>
 8007b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b8      	blx	r7
 8007b90:	3001      	adds	r0, #1
 8007b92:	f43f ae70 	beq.w	8007876 <_printf_float+0xb6>
 8007b96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007ba2:	f7f8 ff9b 	bl	8000adc <__aeabi_dcmpeq>
 8007ba6:	b9c0      	cbnz	r0, 8007bda <_printf_float+0x41a>
 8007ba8:	4653      	mov	r3, sl
 8007baa:	f108 0201 	add.w	r2, r8, #1
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d10c      	bne.n	8007bd2 <_printf_float+0x412>
 8007bb8:	e65d      	b.n	8007876 <_printf_float+0xb6>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	465a      	mov	r2, fp
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f43f ae56 	beq.w	8007876 <_printf_float+0xb6>
 8007bca:	f108 0801 	add.w	r8, r8, #1
 8007bce:	45d0      	cmp	r8, sl
 8007bd0:	dbf3      	blt.n	8007bba <_printf_float+0x3fa>
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007bd8:	e6df      	b.n	800799a <_printf_float+0x1da>
 8007bda:	f04f 0800 	mov.w	r8, #0
 8007bde:	f104 0b1a 	add.w	fp, r4, #26
 8007be2:	e7f4      	b.n	8007bce <_printf_float+0x40e>
 8007be4:	2301      	movs	r3, #1
 8007be6:	4642      	mov	r2, r8
 8007be8:	e7e1      	b.n	8007bae <_printf_float+0x3ee>
 8007bea:	2301      	movs	r3, #1
 8007bec:	464a      	mov	r2, r9
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	f43f ae3e 	beq.w	8007876 <_printf_float+0xb6>
 8007bfa:	f108 0801 	add.w	r8, r8, #1
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c02:	1a5b      	subs	r3, r3, r1
 8007c04:	4543      	cmp	r3, r8
 8007c06:	dcf0      	bgt.n	8007bea <_printf_float+0x42a>
 8007c08:	e6fc      	b.n	8007a04 <_printf_float+0x244>
 8007c0a:	f04f 0800 	mov.w	r8, #0
 8007c0e:	f104 0919 	add.w	r9, r4, #25
 8007c12:	e7f4      	b.n	8007bfe <_printf_float+0x43e>

08007c14 <_printf_common>:
 8007c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	4616      	mov	r6, r2
 8007c1a:	4698      	mov	r8, r3
 8007c1c:	688a      	ldr	r2, [r1, #8]
 8007c1e:	690b      	ldr	r3, [r1, #16]
 8007c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	bfb8      	it	lt
 8007c28:	4613      	movlt	r3, r2
 8007c2a:	6033      	str	r3, [r6, #0]
 8007c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c30:	4607      	mov	r7, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	b10a      	cbz	r2, 8007c3a <_printf_common+0x26>
 8007c36:	3301      	adds	r3, #1
 8007c38:	6033      	str	r3, [r6, #0]
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	0699      	lsls	r1, r3, #26
 8007c3e:	bf42      	ittt	mi
 8007c40:	6833      	ldrmi	r3, [r6, #0]
 8007c42:	3302      	addmi	r3, #2
 8007c44:	6033      	strmi	r3, [r6, #0]
 8007c46:	6825      	ldr	r5, [r4, #0]
 8007c48:	f015 0506 	ands.w	r5, r5, #6
 8007c4c:	d106      	bne.n	8007c5c <_printf_common+0x48>
 8007c4e:	f104 0a19 	add.w	sl, r4, #25
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	6832      	ldr	r2, [r6, #0]
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	42ab      	cmp	r3, r5
 8007c5a:	dc26      	bgt.n	8007caa <_printf_common+0x96>
 8007c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c60:	6822      	ldr	r2, [r4, #0]
 8007c62:	3b00      	subs	r3, #0
 8007c64:	bf18      	it	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	0692      	lsls	r2, r2, #26
 8007c6a:	d42b      	bmi.n	8007cc4 <_printf_common+0xb0>
 8007c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c70:	4641      	mov	r1, r8
 8007c72:	4638      	mov	r0, r7
 8007c74:	47c8      	blx	r9
 8007c76:	3001      	adds	r0, #1
 8007c78:	d01e      	beq.n	8007cb8 <_printf_common+0xa4>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	6922      	ldr	r2, [r4, #16]
 8007c7e:	f003 0306 	and.w	r3, r3, #6
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	bf02      	ittt	eq
 8007c86:	68e5      	ldreq	r5, [r4, #12]
 8007c88:	6833      	ldreq	r3, [r6, #0]
 8007c8a:	1aed      	subeq	r5, r5, r3
 8007c8c:	68a3      	ldr	r3, [r4, #8]
 8007c8e:	bf0c      	ite	eq
 8007c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c94:	2500      	movne	r5, #0
 8007c96:	4293      	cmp	r3, r2
 8007c98:	bfc4      	itt	gt
 8007c9a:	1a9b      	subgt	r3, r3, r2
 8007c9c:	18ed      	addgt	r5, r5, r3
 8007c9e:	2600      	movs	r6, #0
 8007ca0:	341a      	adds	r4, #26
 8007ca2:	42b5      	cmp	r5, r6
 8007ca4:	d11a      	bne.n	8007cdc <_printf_common+0xc8>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e008      	b.n	8007cbc <_printf_common+0xa8>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4652      	mov	r2, sl
 8007cae:	4641      	mov	r1, r8
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	47c8      	blx	r9
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d103      	bne.n	8007cc0 <_printf_common+0xac>
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	e7c6      	b.n	8007c52 <_printf_common+0x3e>
 8007cc4:	18e1      	adds	r1, r4, r3
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	2030      	movs	r0, #48	@ 0x30
 8007cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cce:	4422      	add	r2, r4
 8007cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cd8:	3302      	adds	r3, #2
 8007cda:	e7c7      	b.n	8007c6c <_printf_common+0x58>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	4622      	mov	r2, r4
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	47c8      	blx	r9
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d0e6      	beq.n	8007cb8 <_printf_common+0xa4>
 8007cea:	3601      	adds	r6, #1
 8007cec:	e7d9      	b.n	8007ca2 <_printf_common+0x8e>
	...

08007cf0 <_printf_i>:
 8007cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	7e0f      	ldrb	r7, [r1, #24]
 8007cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cf8:	2f78      	cmp	r7, #120	@ 0x78
 8007cfa:	4691      	mov	r9, r2
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	469a      	mov	sl, r3
 8007d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d06:	d807      	bhi.n	8007d18 <_printf_i+0x28>
 8007d08:	2f62      	cmp	r7, #98	@ 0x62
 8007d0a:	d80a      	bhi.n	8007d22 <_printf_i+0x32>
 8007d0c:	2f00      	cmp	r7, #0
 8007d0e:	f000 80d2 	beq.w	8007eb6 <_printf_i+0x1c6>
 8007d12:	2f58      	cmp	r7, #88	@ 0x58
 8007d14:	f000 80b9 	beq.w	8007e8a <_printf_i+0x19a>
 8007d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d20:	e03a      	b.n	8007d98 <_printf_i+0xa8>
 8007d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d26:	2b15      	cmp	r3, #21
 8007d28:	d8f6      	bhi.n	8007d18 <_printf_i+0x28>
 8007d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d30 <_printf_i+0x40>)
 8007d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d30:	08007d89 	.word	0x08007d89
 8007d34:	08007d9d 	.word	0x08007d9d
 8007d38:	08007d19 	.word	0x08007d19
 8007d3c:	08007d19 	.word	0x08007d19
 8007d40:	08007d19 	.word	0x08007d19
 8007d44:	08007d19 	.word	0x08007d19
 8007d48:	08007d9d 	.word	0x08007d9d
 8007d4c:	08007d19 	.word	0x08007d19
 8007d50:	08007d19 	.word	0x08007d19
 8007d54:	08007d19 	.word	0x08007d19
 8007d58:	08007d19 	.word	0x08007d19
 8007d5c:	08007e9d 	.word	0x08007e9d
 8007d60:	08007dc7 	.word	0x08007dc7
 8007d64:	08007e57 	.word	0x08007e57
 8007d68:	08007d19 	.word	0x08007d19
 8007d6c:	08007d19 	.word	0x08007d19
 8007d70:	08007ebf 	.word	0x08007ebf
 8007d74:	08007d19 	.word	0x08007d19
 8007d78:	08007dc7 	.word	0x08007dc7
 8007d7c:	08007d19 	.word	0x08007d19
 8007d80:	08007d19 	.word	0x08007d19
 8007d84:	08007e5f 	.word	0x08007e5f
 8007d88:	6833      	ldr	r3, [r6, #0]
 8007d8a:	1d1a      	adds	r2, r3, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6032      	str	r2, [r6, #0]
 8007d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e09d      	b.n	8007ed8 <_printf_i+0x1e8>
 8007d9c:	6833      	ldr	r3, [r6, #0]
 8007d9e:	6820      	ldr	r0, [r4, #0]
 8007da0:	1d19      	adds	r1, r3, #4
 8007da2:	6031      	str	r1, [r6, #0]
 8007da4:	0606      	lsls	r6, r0, #24
 8007da6:	d501      	bpl.n	8007dac <_printf_i+0xbc>
 8007da8:	681d      	ldr	r5, [r3, #0]
 8007daa:	e003      	b.n	8007db4 <_printf_i+0xc4>
 8007dac:	0645      	lsls	r5, r0, #25
 8007dae:	d5fb      	bpl.n	8007da8 <_printf_i+0xb8>
 8007db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	da03      	bge.n	8007dc0 <_printf_i+0xd0>
 8007db8:	232d      	movs	r3, #45	@ 0x2d
 8007dba:	426d      	negs	r5, r5
 8007dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dc0:	4859      	ldr	r0, [pc, #356]	@ (8007f28 <_printf_i+0x238>)
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	e011      	b.n	8007dea <_printf_i+0xfa>
 8007dc6:	6821      	ldr	r1, [r4, #0]
 8007dc8:	6833      	ldr	r3, [r6, #0]
 8007dca:	0608      	lsls	r0, r1, #24
 8007dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dd0:	d402      	bmi.n	8007dd8 <_printf_i+0xe8>
 8007dd2:	0649      	lsls	r1, r1, #25
 8007dd4:	bf48      	it	mi
 8007dd6:	b2ad      	uxthmi	r5, r5
 8007dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dda:	4853      	ldr	r0, [pc, #332]	@ (8007f28 <_printf_i+0x238>)
 8007ddc:	6033      	str	r3, [r6, #0]
 8007dde:	bf14      	ite	ne
 8007de0:	230a      	movne	r3, #10
 8007de2:	2308      	moveq	r3, #8
 8007de4:	2100      	movs	r1, #0
 8007de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007dea:	6866      	ldr	r6, [r4, #4]
 8007dec:	60a6      	str	r6, [r4, #8]
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	bfa2      	ittt	ge
 8007df2:	6821      	ldrge	r1, [r4, #0]
 8007df4:	f021 0104 	bicge.w	r1, r1, #4
 8007df8:	6021      	strge	r1, [r4, #0]
 8007dfa:	b90d      	cbnz	r5, 8007e00 <_printf_i+0x110>
 8007dfc:	2e00      	cmp	r6, #0
 8007dfe:	d04b      	beq.n	8007e98 <_printf_i+0x1a8>
 8007e00:	4616      	mov	r6, r2
 8007e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e06:	fb03 5711 	mls	r7, r3, r1, r5
 8007e0a:	5dc7      	ldrb	r7, [r0, r7]
 8007e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e10:	462f      	mov	r7, r5
 8007e12:	42bb      	cmp	r3, r7
 8007e14:	460d      	mov	r5, r1
 8007e16:	d9f4      	bls.n	8007e02 <_printf_i+0x112>
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d10b      	bne.n	8007e34 <_printf_i+0x144>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	07df      	lsls	r7, r3, #31
 8007e20:	d508      	bpl.n	8007e34 <_printf_i+0x144>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	6861      	ldr	r1, [r4, #4]
 8007e26:	4299      	cmp	r1, r3
 8007e28:	bfde      	ittt	le
 8007e2a:	2330      	movle	r3, #48	@ 0x30
 8007e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e30:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e34:	1b92      	subs	r2, r2, r6
 8007e36:	6122      	str	r2, [r4, #16]
 8007e38:	f8cd a000 	str.w	sl, [sp]
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	aa03      	add	r2, sp, #12
 8007e40:	4621      	mov	r1, r4
 8007e42:	4640      	mov	r0, r8
 8007e44:	f7ff fee6 	bl	8007c14 <_printf_common>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d14a      	bne.n	8007ee2 <_printf_i+0x1f2>
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e50:	b004      	add	sp, #16
 8007e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	f043 0320 	orr.w	r3, r3, #32
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	4833      	ldr	r0, [pc, #204]	@ (8007f2c <_printf_i+0x23c>)
 8007e60:	2778      	movs	r7, #120	@ 0x78
 8007e62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	6831      	ldr	r1, [r6, #0]
 8007e6a:	061f      	lsls	r7, r3, #24
 8007e6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e70:	d402      	bmi.n	8007e78 <_printf_i+0x188>
 8007e72:	065f      	lsls	r7, r3, #25
 8007e74:	bf48      	it	mi
 8007e76:	b2ad      	uxthmi	r5, r5
 8007e78:	6031      	str	r1, [r6, #0]
 8007e7a:	07d9      	lsls	r1, r3, #31
 8007e7c:	bf44      	itt	mi
 8007e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e82:	6023      	strmi	r3, [r4, #0]
 8007e84:	b11d      	cbz	r5, 8007e8e <_printf_i+0x19e>
 8007e86:	2310      	movs	r3, #16
 8007e88:	e7ac      	b.n	8007de4 <_printf_i+0xf4>
 8007e8a:	4827      	ldr	r0, [pc, #156]	@ (8007f28 <_printf_i+0x238>)
 8007e8c:	e7e9      	b.n	8007e62 <_printf_i+0x172>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	f023 0320 	bic.w	r3, r3, #32
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	e7f6      	b.n	8007e86 <_printf_i+0x196>
 8007e98:	4616      	mov	r6, r2
 8007e9a:	e7bd      	b.n	8007e18 <_printf_i+0x128>
 8007e9c:	6833      	ldr	r3, [r6, #0]
 8007e9e:	6825      	ldr	r5, [r4, #0]
 8007ea0:	6961      	ldr	r1, [r4, #20]
 8007ea2:	1d18      	adds	r0, r3, #4
 8007ea4:	6030      	str	r0, [r6, #0]
 8007ea6:	062e      	lsls	r6, r5, #24
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_i+0x1c0>
 8007eac:	6019      	str	r1, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <_printf_i+0x1c6>
 8007eb0:	0668      	lsls	r0, r5, #25
 8007eb2:	d5fb      	bpl.n	8007eac <_printf_i+0x1bc>
 8007eb4:	8019      	strh	r1, [r3, #0]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	4616      	mov	r6, r2
 8007ebc:	e7bc      	b.n	8007e38 <_printf_i+0x148>
 8007ebe:	6833      	ldr	r3, [r6, #0]
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	6032      	str	r2, [r6, #0]
 8007ec4:	681e      	ldr	r6, [r3, #0]
 8007ec6:	6862      	ldr	r2, [r4, #4]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7f8 f980 	bl	80001d0 <memchr>
 8007ed0:	b108      	cbz	r0, 8007ed6 <_printf_i+0x1e6>
 8007ed2:	1b80      	subs	r0, r0, r6
 8007ed4:	6060      	str	r0, [r4, #4]
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	2300      	movs	r3, #0
 8007edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ee0:	e7aa      	b.n	8007e38 <_printf_i+0x148>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	47d0      	blx	sl
 8007eec:	3001      	adds	r0, #1
 8007eee:	d0ad      	beq.n	8007e4c <_printf_i+0x15c>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	079b      	lsls	r3, r3, #30
 8007ef4:	d413      	bmi.n	8007f1e <_printf_i+0x22e>
 8007ef6:	68e0      	ldr	r0, [r4, #12]
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	4298      	cmp	r0, r3
 8007efc:	bfb8      	it	lt
 8007efe:	4618      	movlt	r0, r3
 8007f00:	e7a6      	b.n	8007e50 <_printf_i+0x160>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4632      	mov	r2, r6
 8007f06:	4649      	mov	r1, r9
 8007f08:	4640      	mov	r0, r8
 8007f0a:	47d0      	blx	sl
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d09d      	beq.n	8007e4c <_printf_i+0x15c>
 8007f10:	3501      	adds	r5, #1
 8007f12:	68e3      	ldr	r3, [r4, #12]
 8007f14:	9903      	ldr	r1, [sp, #12]
 8007f16:	1a5b      	subs	r3, r3, r1
 8007f18:	42ab      	cmp	r3, r5
 8007f1a:	dcf2      	bgt.n	8007f02 <_printf_i+0x212>
 8007f1c:	e7eb      	b.n	8007ef6 <_printf_i+0x206>
 8007f1e:	2500      	movs	r5, #0
 8007f20:	f104 0619 	add.w	r6, r4, #25
 8007f24:	e7f5      	b.n	8007f12 <_printf_i+0x222>
 8007f26:	bf00      	nop
 8007f28:	0800b47a 	.word	0x0800b47a
 8007f2c:	0800b48b 	.word	0x0800b48b

08007f30 <sniprintf>:
 8007f30:	b40c      	push	{r2, r3}
 8007f32:	b530      	push	{r4, r5, lr}
 8007f34:	4b17      	ldr	r3, [pc, #92]	@ (8007f94 <sniprintf+0x64>)
 8007f36:	1e0c      	subs	r4, r1, #0
 8007f38:	681d      	ldr	r5, [r3, #0]
 8007f3a:	b09d      	sub	sp, #116	@ 0x74
 8007f3c:	da08      	bge.n	8007f50 <sniprintf+0x20>
 8007f3e:	238b      	movs	r3, #139	@ 0x8b
 8007f40:	602b      	str	r3, [r5, #0]
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f46:	b01d      	add	sp, #116	@ 0x74
 8007f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f4c:	b002      	add	sp, #8
 8007f4e:	4770      	bx	lr
 8007f50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f58:	bf14      	ite	ne
 8007f5a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007f5e:	4623      	moveq	r3, r4
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	9307      	str	r3, [sp, #28]
 8007f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f68:	9002      	str	r0, [sp, #8]
 8007f6a:	9006      	str	r0, [sp, #24]
 8007f6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f72:	ab21      	add	r3, sp, #132	@ 0x84
 8007f74:	a902      	add	r1, sp, #8
 8007f76:	4628      	mov	r0, r5
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	f000 fff9 	bl	8008f70 <_svfiprintf_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	bfbc      	itt	lt
 8007f82:	238b      	movlt	r3, #139	@ 0x8b
 8007f84:	602b      	strlt	r3, [r5, #0]
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	d0dd      	beq.n	8007f46 <sniprintf+0x16>
 8007f8a:	9b02      	ldr	r3, [sp, #8]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e7d9      	b.n	8007f46 <sniprintf+0x16>
 8007f92:	bf00      	nop
 8007f94:	20000024 	.word	0x20000024

08007f98 <std>:
 8007f98:	2300      	movs	r3, #0
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fa6:	6083      	str	r3, [r0, #8]
 8007fa8:	8181      	strh	r1, [r0, #12]
 8007faa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fac:	81c2      	strh	r2, [r0, #14]
 8007fae:	6183      	str	r3, [r0, #24]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	305c      	adds	r0, #92	@ 0x5c
 8007fb6:	f000 f8dd 	bl	8008174 <memset>
 8007fba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <std+0x58>)
 8007fbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <std+0x5c>)
 8007fc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <std+0x60>)
 8007fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x64>)
 8007fc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <std+0x68>)
 8007fcc:	6224      	str	r4, [r4, #32]
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d006      	beq.n	8007fe0 <std+0x48>
 8007fd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fd6:	4294      	cmp	r4, r2
 8007fd8:	d002      	beq.n	8007fe0 <std+0x48>
 8007fda:	33d0      	adds	r3, #208	@ 0xd0
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	d105      	bne.n	8007fec <std+0x54>
 8007fe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe8:	f000 b8fa 	b.w	80081e0 <__retarget_lock_init_recursive>
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	bf00      	nop
 8007ff0:	08009db5 	.word	0x08009db5
 8007ff4:	08009dd7 	.word	0x08009dd7
 8007ff8:	08009e0f 	.word	0x08009e0f
 8007ffc:	08009e33 	.word	0x08009e33
 8008000:	20000968 	.word	0x20000968

08008004 <stdio_exit_handler>:
 8008004:	4a02      	ldr	r2, [pc, #8]	@ (8008010 <stdio_exit_handler+0xc>)
 8008006:	4903      	ldr	r1, [pc, #12]	@ (8008014 <stdio_exit_handler+0x10>)
 8008008:	4803      	ldr	r0, [pc, #12]	@ (8008018 <stdio_exit_handler+0x14>)
 800800a:	f000 b87b 	b.w	8008104 <_fwalk_sglue>
 800800e:	bf00      	nop
 8008010:	20000018 	.word	0x20000018
 8008014:	08009649 	.word	0x08009649
 8008018:	20000028 	.word	0x20000028

0800801c <cleanup_stdio>:
 800801c:	6841      	ldr	r1, [r0, #4]
 800801e:	4b0c      	ldr	r3, [pc, #48]	@ (8008050 <cleanup_stdio+0x34>)
 8008020:	4299      	cmp	r1, r3
 8008022:	b510      	push	{r4, lr}
 8008024:	4604      	mov	r4, r0
 8008026:	d001      	beq.n	800802c <cleanup_stdio+0x10>
 8008028:	f001 fb0e 	bl	8009648 <_fflush_r>
 800802c:	68a1      	ldr	r1, [r4, #8]
 800802e:	4b09      	ldr	r3, [pc, #36]	@ (8008054 <cleanup_stdio+0x38>)
 8008030:	4299      	cmp	r1, r3
 8008032:	d002      	beq.n	800803a <cleanup_stdio+0x1e>
 8008034:	4620      	mov	r0, r4
 8008036:	f001 fb07 	bl	8009648 <_fflush_r>
 800803a:	68e1      	ldr	r1, [r4, #12]
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <cleanup_stdio+0x3c>)
 800803e:	4299      	cmp	r1, r3
 8008040:	d004      	beq.n	800804c <cleanup_stdio+0x30>
 8008042:	4620      	mov	r0, r4
 8008044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008048:	f001 bafe 	b.w	8009648 <_fflush_r>
 800804c:	bd10      	pop	{r4, pc}
 800804e:	bf00      	nop
 8008050:	20000968 	.word	0x20000968
 8008054:	200009d0 	.word	0x200009d0
 8008058:	20000a38 	.word	0x20000a38

0800805c <global_stdio_init.part.0>:
 800805c:	b510      	push	{r4, lr}
 800805e:	4b0b      	ldr	r3, [pc, #44]	@ (800808c <global_stdio_init.part.0+0x30>)
 8008060:	4c0b      	ldr	r4, [pc, #44]	@ (8008090 <global_stdio_init.part.0+0x34>)
 8008062:	4a0c      	ldr	r2, [pc, #48]	@ (8008094 <global_stdio_init.part.0+0x38>)
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	4620      	mov	r0, r4
 8008068:	2200      	movs	r2, #0
 800806a:	2104      	movs	r1, #4
 800806c:	f7ff ff94 	bl	8007f98 <std>
 8008070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008074:	2201      	movs	r2, #1
 8008076:	2109      	movs	r1, #9
 8008078:	f7ff ff8e 	bl	8007f98 <std>
 800807c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008080:	2202      	movs	r2, #2
 8008082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008086:	2112      	movs	r1, #18
 8008088:	f7ff bf86 	b.w	8007f98 <std>
 800808c:	20000aa0 	.word	0x20000aa0
 8008090:	20000968 	.word	0x20000968
 8008094:	08008005 	.word	0x08008005

08008098 <__sfp_lock_acquire>:
 8008098:	4801      	ldr	r0, [pc, #4]	@ (80080a0 <__sfp_lock_acquire+0x8>)
 800809a:	f000 b8a2 	b.w	80081e2 <__retarget_lock_acquire_recursive>
 800809e:	bf00      	nop
 80080a0:	20000aa5 	.word	0x20000aa5

080080a4 <__sfp_lock_release>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__sfp_lock_release+0x8>)
 80080a6:	f000 b89d 	b.w	80081e4 <__retarget_lock_release_recursive>
 80080aa:	bf00      	nop
 80080ac:	20000aa5 	.word	0x20000aa5

080080b0 <__sinit>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	4604      	mov	r4, r0
 80080b4:	f7ff fff0 	bl	8008098 <__sfp_lock_acquire>
 80080b8:	6a23      	ldr	r3, [r4, #32]
 80080ba:	b11b      	cbz	r3, 80080c4 <__sinit+0x14>
 80080bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c0:	f7ff bff0 	b.w	80080a4 <__sfp_lock_release>
 80080c4:	4b04      	ldr	r3, [pc, #16]	@ (80080d8 <__sinit+0x28>)
 80080c6:	6223      	str	r3, [r4, #32]
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <__sinit+0x2c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f5      	bne.n	80080bc <__sinit+0xc>
 80080d0:	f7ff ffc4 	bl	800805c <global_stdio_init.part.0>
 80080d4:	e7f2      	b.n	80080bc <__sinit+0xc>
 80080d6:	bf00      	nop
 80080d8:	0800801d 	.word	0x0800801d
 80080dc:	20000aa0 	.word	0x20000aa0

080080e0 <fiprintf>:
 80080e0:	b40e      	push	{r1, r2, r3}
 80080e2:	b503      	push	{r0, r1, lr}
 80080e4:	4601      	mov	r1, r0
 80080e6:	ab03      	add	r3, sp, #12
 80080e8:	4805      	ldr	r0, [pc, #20]	@ (8008100 <fiprintf+0x20>)
 80080ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	f001 f863 	bl	80091bc <_vfiprintf_r>
 80080f6:	b002      	add	sp, #8
 80080f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080fc:	b003      	add	sp, #12
 80080fe:	4770      	bx	lr
 8008100:	20000024 	.word	0x20000024

08008104 <_fwalk_sglue>:
 8008104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008108:	4607      	mov	r7, r0
 800810a:	4688      	mov	r8, r1
 800810c:	4614      	mov	r4, r2
 800810e:	2600      	movs	r6, #0
 8008110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008114:	f1b9 0901 	subs.w	r9, r9, #1
 8008118:	d505      	bpl.n	8008126 <_fwalk_sglue+0x22>
 800811a:	6824      	ldr	r4, [r4, #0]
 800811c:	2c00      	cmp	r4, #0
 800811e:	d1f7      	bne.n	8008110 <_fwalk_sglue+0xc>
 8008120:	4630      	mov	r0, r6
 8008122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008126:	89ab      	ldrh	r3, [r5, #12]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d907      	bls.n	800813c <_fwalk_sglue+0x38>
 800812c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008130:	3301      	adds	r3, #1
 8008132:	d003      	beq.n	800813c <_fwalk_sglue+0x38>
 8008134:	4629      	mov	r1, r5
 8008136:	4638      	mov	r0, r7
 8008138:	47c0      	blx	r8
 800813a:	4306      	orrs	r6, r0
 800813c:	3568      	adds	r5, #104	@ 0x68
 800813e:	e7e9      	b.n	8008114 <_fwalk_sglue+0x10>

08008140 <memmove>:
 8008140:	4288      	cmp	r0, r1
 8008142:	b510      	push	{r4, lr}
 8008144:	eb01 0402 	add.w	r4, r1, r2
 8008148:	d902      	bls.n	8008150 <memmove+0x10>
 800814a:	4284      	cmp	r4, r0
 800814c:	4623      	mov	r3, r4
 800814e:	d807      	bhi.n	8008160 <memmove+0x20>
 8008150:	1e43      	subs	r3, r0, #1
 8008152:	42a1      	cmp	r1, r4
 8008154:	d008      	beq.n	8008168 <memmove+0x28>
 8008156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800815a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800815e:	e7f8      	b.n	8008152 <memmove+0x12>
 8008160:	4402      	add	r2, r0
 8008162:	4601      	mov	r1, r0
 8008164:	428a      	cmp	r2, r1
 8008166:	d100      	bne.n	800816a <memmove+0x2a>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800816e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008172:	e7f7      	b.n	8008164 <memmove+0x24>

08008174 <memset>:
 8008174:	4402      	add	r2, r0
 8008176:	4603      	mov	r3, r0
 8008178:	4293      	cmp	r3, r2
 800817a:	d100      	bne.n	800817e <memset+0xa>
 800817c:	4770      	bx	lr
 800817e:	f803 1b01 	strb.w	r1, [r3], #1
 8008182:	e7f9      	b.n	8008178 <memset+0x4>

08008184 <_localeconv_r>:
 8008184:	4800      	ldr	r0, [pc, #0]	@ (8008188 <_localeconv_r+0x4>)
 8008186:	4770      	bx	lr
 8008188:	20000164 	.word	0x20000164

0800818c <__errno>:
 800818c:	4b01      	ldr	r3, [pc, #4]	@ (8008194 <__errno+0x8>)
 800818e:	6818      	ldr	r0, [r3, #0]
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000024 	.word	0x20000024

08008198 <__libc_init_array>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	4d0d      	ldr	r5, [pc, #52]	@ (80081d0 <__libc_init_array+0x38>)
 800819c:	4c0d      	ldr	r4, [pc, #52]	@ (80081d4 <__libc_init_array+0x3c>)
 800819e:	1b64      	subs	r4, r4, r5
 80081a0:	10a4      	asrs	r4, r4, #2
 80081a2:	2600      	movs	r6, #0
 80081a4:	42a6      	cmp	r6, r4
 80081a6:	d109      	bne.n	80081bc <__libc_init_array+0x24>
 80081a8:	4d0b      	ldr	r5, [pc, #44]	@ (80081d8 <__libc_init_array+0x40>)
 80081aa:	4c0c      	ldr	r4, [pc, #48]	@ (80081dc <__libc_init_array+0x44>)
 80081ac:	f002 f8ac 	bl	800a308 <_init>
 80081b0:	1b64      	subs	r4, r4, r5
 80081b2:	10a4      	asrs	r4, r4, #2
 80081b4:	2600      	movs	r6, #0
 80081b6:	42a6      	cmp	r6, r4
 80081b8:	d105      	bne.n	80081c6 <__libc_init_array+0x2e>
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c0:	4798      	blx	r3
 80081c2:	3601      	adds	r6, #1
 80081c4:	e7ee      	b.n	80081a4 <__libc_init_array+0xc>
 80081c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ca:	4798      	blx	r3
 80081cc:	3601      	adds	r6, #1
 80081ce:	e7f2      	b.n	80081b6 <__libc_init_array+0x1e>
 80081d0:	0800b7a4 	.word	0x0800b7a4
 80081d4:	0800b7a4 	.word	0x0800b7a4
 80081d8:	0800b7a4 	.word	0x0800b7a4
 80081dc:	0800b7a8 	.word	0x0800b7a8

080081e0 <__retarget_lock_init_recursive>:
 80081e0:	4770      	bx	lr

080081e2 <__retarget_lock_acquire_recursive>:
 80081e2:	4770      	bx	lr

080081e4 <__retarget_lock_release_recursive>:
 80081e4:	4770      	bx	lr

080081e6 <memcpy>:
 80081e6:	440a      	add	r2, r1
 80081e8:	4291      	cmp	r1, r2
 80081ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80081ee:	d100      	bne.n	80081f2 <memcpy+0xc>
 80081f0:	4770      	bx	lr
 80081f2:	b510      	push	{r4, lr}
 80081f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081fc:	4291      	cmp	r1, r2
 80081fe:	d1f9      	bne.n	80081f4 <memcpy+0xe>
 8008200:	bd10      	pop	{r4, pc}

08008202 <strcpy>:
 8008202:	4603      	mov	r3, r0
 8008204:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008208:	f803 2b01 	strb.w	r2, [r3], #1
 800820c:	2a00      	cmp	r2, #0
 800820e:	d1f9      	bne.n	8008204 <strcpy+0x2>
 8008210:	4770      	bx	lr

08008212 <abort>:
 8008212:	b508      	push	{r3, lr}
 8008214:	2006      	movs	r0, #6
 8008216:	f001 ffa1 	bl	800a15c <raise>
 800821a:	2001      	movs	r0, #1
 800821c:	f7f9 febd 	bl	8001f9a <_exit>

08008220 <quorem>:
 8008220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	6903      	ldr	r3, [r0, #16]
 8008226:	690c      	ldr	r4, [r1, #16]
 8008228:	42a3      	cmp	r3, r4
 800822a:	4607      	mov	r7, r0
 800822c:	db7e      	blt.n	800832c <quorem+0x10c>
 800822e:	3c01      	subs	r4, #1
 8008230:	f101 0814 	add.w	r8, r1, #20
 8008234:	00a3      	lsls	r3, r4, #2
 8008236:	f100 0514 	add.w	r5, r0, #20
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800824a:	3301      	adds	r3, #1
 800824c:	429a      	cmp	r2, r3
 800824e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008252:	fbb2 f6f3 	udiv	r6, r2, r3
 8008256:	d32e      	bcc.n	80082b6 <quorem+0x96>
 8008258:	f04f 0a00 	mov.w	sl, #0
 800825c:	46c4      	mov	ip, r8
 800825e:	46ae      	mov	lr, r5
 8008260:	46d3      	mov	fp, sl
 8008262:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008266:	b298      	uxth	r0, r3
 8008268:	fb06 a000 	mla	r0, r6, r0, sl
 800826c:	0c02      	lsrs	r2, r0, #16
 800826e:	0c1b      	lsrs	r3, r3, #16
 8008270:	fb06 2303 	mla	r3, r6, r3, r2
 8008274:	f8de 2000 	ldr.w	r2, [lr]
 8008278:	b280      	uxth	r0, r0
 800827a:	b292      	uxth	r2, r2
 800827c:	1a12      	subs	r2, r2, r0
 800827e:	445a      	add	r2, fp
 8008280:	f8de 0000 	ldr.w	r0, [lr]
 8008284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008288:	b29b      	uxth	r3, r3
 800828a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800828e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008292:	b292      	uxth	r2, r2
 8008294:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008298:	45e1      	cmp	r9, ip
 800829a:	f84e 2b04 	str.w	r2, [lr], #4
 800829e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082a2:	d2de      	bcs.n	8008262 <quorem+0x42>
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	58eb      	ldr	r3, [r5, r3]
 80082a8:	b92b      	cbnz	r3, 80082b6 <quorem+0x96>
 80082aa:	9b01      	ldr	r3, [sp, #4]
 80082ac:	3b04      	subs	r3, #4
 80082ae:	429d      	cmp	r5, r3
 80082b0:	461a      	mov	r2, r3
 80082b2:	d32f      	bcc.n	8008314 <quorem+0xf4>
 80082b4:	613c      	str	r4, [r7, #16]
 80082b6:	4638      	mov	r0, r7
 80082b8:	f001 fc74 	bl	8009ba4 <__mcmp>
 80082bc:	2800      	cmp	r0, #0
 80082be:	db25      	blt.n	800830c <quorem+0xec>
 80082c0:	4629      	mov	r1, r5
 80082c2:	2000      	movs	r0, #0
 80082c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80082c8:	f8d1 c000 	ldr.w	ip, [r1]
 80082cc:	fa1f fe82 	uxth.w	lr, r2
 80082d0:	fa1f f38c 	uxth.w	r3, ip
 80082d4:	eba3 030e 	sub.w	r3, r3, lr
 80082d8:	4403      	add	r3, r0
 80082da:	0c12      	lsrs	r2, r2, #16
 80082dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ea:	45c1      	cmp	r9, r8
 80082ec:	f841 3b04 	str.w	r3, [r1], #4
 80082f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082f4:	d2e6      	bcs.n	80082c4 <quorem+0xa4>
 80082f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082fe:	b922      	cbnz	r2, 800830a <quorem+0xea>
 8008300:	3b04      	subs	r3, #4
 8008302:	429d      	cmp	r5, r3
 8008304:	461a      	mov	r2, r3
 8008306:	d30b      	bcc.n	8008320 <quorem+0x100>
 8008308:	613c      	str	r4, [r7, #16]
 800830a:	3601      	adds	r6, #1
 800830c:	4630      	mov	r0, r6
 800830e:	b003      	add	sp, #12
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	6812      	ldr	r2, [r2, #0]
 8008316:	3b04      	subs	r3, #4
 8008318:	2a00      	cmp	r2, #0
 800831a:	d1cb      	bne.n	80082b4 <quorem+0x94>
 800831c:	3c01      	subs	r4, #1
 800831e:	e7c6      	b.n	80082ae <quorem+0x8e>
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	3b04      	subs	r3, #4
 8008324:	2a00      	cmp	r2, #0
 8008326:	d1ef      	bne.n	8008308 <quorem+0xe8>
 8008328:	3c01      	subs	r4, #1
 800832a:	e7ea      	b.n	8008302 <quorem+0xe2>
 800832c:	2000      	movs	r0, #0
 800832e:	e7ee      	b.n	800830e <quorem+0xee>

08008330 <_dtoa_r>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	69c7      	ldr	r7, [r0, #28]
 8008336:	b099      	sub	sp, #100	@ 0x64
 8008338:	ed8d 0b02 	vstr	d0, [sp, #8]
 800833c:	ec55 4b10 	vmov	r4, r5, d0
 8008340:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008342:	9109      	str	r1, [sp, #36]	@ 0x24
 8008344:	4683      	mov	fp, r0
 8008346:	920e      	str	r2, [sp, #56]	@ 0x38
 8008348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800834a:	b97f      	cbnz	r7, 800836c <_dtoa_r+0x3c>
 800834c:	2010      	movs	r0, #16
 800834e:	f001 f84d 	bl	80093ec <malloc>
 8008352:	4602      	mov	r2, r0
 8008354:	f8cb 001c 	str.w	r0, [fp, #28]
 8008358:	b920      	cbnz	r0, 8008364 <_dtoa_r+0x34>
 800835a:	4ba7      	ldr	r3, [pc, #668]	@ (80085f8 <_dtoa_r+0x2c8>)
 800835c:	21ef      	movs	r1, #239	@ 0xef
 800835e:	48a7      	ldr	r0, [pc, #668]	@ (80085fc <_dtoa_r+0x2cc>)
 8008360:	f7ff f970 	bl	8007644 <__assert_func>
 8008364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008368:	6007      	str	r7, [r0, #0]
 800836a:	60c7      	str	r7, [r0, #12]
 800836c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008370:	6819      	ldr	r1, [r3, #0]
 8008372:	b159      	cbz	r1, 800838c <_dtoa_r+0x5c>
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	604a      	str	r2, [r1, #4]
 8008378:	2301      	movs	r3, #1
 800837a:	4093      	lsls	r3, r2
 800837c:	608b      	str	r3, [r1, #8]
 800837e:	4658      	mov	r0, fp
 8008380:	f001 f9d6 	bl	8009730 <_Bfree>
 8008384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	1e2b      	subs	r3, r5, #0
 800838e:	bfb9      	ittee	lt
 8008390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008394:	9303      	strlt	r3, [sp, #12]
 8008396:	2300      	movge	r3, #0
 8008398:	6033      	strge	r3, [r6, #0]
 800839a:	9f03      	ldr	r7, [sp, #12]
 800839c:	4b98      	ldr	r3, [pc, #608]	@ (8008600 <_dtoa_r+0x2d0>)
 800839e:	bfbc      	itt	lt
 80083a0:	2201      	movlt	r2, #1
 80083a2:	6032      	strlt	r2, [r6, #0]
 80083a4:	43bb      	bics	r3, r7
 80083a6:	d112      	bne.n	80083ce <_dtoa_r+0x9e>
 80083a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083b4:	4323      	orrs	r3, r4
 80083b6:	f000 854d 	beq.w	8008e54 <_dtoa_r+0xb24>
 80083ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008614 <_dtoa_r+0x2e4>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 854f 	beq.w	8008e64 <_dtoa_r+0xb34>
 80083c6:	f10a 0303 	add.w	r3, sl, #3
 80083ca:	f000 bd49 	b.w	8008e60 <_dtoa_r+0xb30>
 80083ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	ec51 0b17 	vmov	r0, r1, d7
 80083d8:	2300      	movs	r3, #0
 80083da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083de:	f7f8 fb7d 	bl	8000adc <__aeabi_dcmpeq>
 80083e2:	4680      	mov	r8, r0
 80083e4:	b158      	cbz	r0, 80083fe <_dtoa_r+0xce>
 80083e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083e8:	2301      	movs	r3, #1
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083ee:	b113      	cbz	r3, 80083f6 <_dtoa_r+0xc6>
 80083f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083f2:	4b84      	ldr	r3, [pc, #528]	@ (8008604 <_dtoa_r+0x2d4>)
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008618 <_dtoa_r+0x2e8>
 80083fa:	f000 bd33 	b.w	8008e64 <_dtoa_r+0xb34>
 80083fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008402:	aa16      	add	r2, sp, #88	@ 0x58
 8008404:	a917      	add	r1, sp, #92	@ 0x5c
 8008406:	4658      	mov	r0, fp
 8008408:	f001 fc7c 	bl	8009d04 <__d2b>
 800840c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008410:	4681      	mov	r9, r0
 8008412:	2e00      	cmp	r6, #0
 8008414:	d077      	beq.n	8008506 <_dtoa_r+0x1d6>
 8008416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008418:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800841c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008424:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008428:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800842c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008430:	4619      	mov	r1, r3
 8008432:	2200      	movs	r2, #0
 8008434:	4b74      	ldr	r3, [pc, #464]	@ (8008608 <_dtoa_r+0x2d8>)
 8008436:	f7f7 ff31 	bl	800029c <__aeabi_dsub>
 800843a:	a369      	add	r3, pc, #420	@ (adr r3, 80085e0 <_dtoa_r+0x2b0>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f8 f8e4 	bl	800060c <__aeabi_dmul>
 8008444:	a368      	add	r3, pc, #416	@ (adr r3, 80085e8 <_dtoa_r+0x2b8>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 ff29 	bl	80002a0 <__adddf3>
 800844e:	4604      	mov	r4, r0
 8008450:	4630      	mov	r0, r6
 8008452:	460d      	mov	r5, r1
 8008454:	f7f8 f870 	bl	8000538 <__aeabi_i2d>
 8008458:	a365      	add	r3, pc, #404	@ (adr r3, 80085f0 <_dtoa_r+0x2c0>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f8 f8d5 	bl	800060c <__aeabi_dmul>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f7 ff19 	bl	80002a0 <__adddf3>
 800846e:	4604      	mov	r4, r0
 8008470:	460d      	mov	r5, r1
 8008472:	f7f8 fb7b 	bl	8000b6c <__aeabi_d2iz>
 8008476:	2200      	movs	r2, #0
 8008478:	4607      	mov	r7, r0
 800847a:	2300      	movs	r3, #0
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f8 fb36 	bl	8000af0 <__aeabi_dcmplt>
 8008484:	b140      	cbz	r0, 8008498 <_dtoa_r+0x168>
 8008486:	4638      	mov	r0, r7
 8008488:	f7f8 f856 	bl	8000538 <__aeabi_i2d>
 800848c:	4622      	mov	r2, r4
 800848e:	462b      	mov	r3, r5
 8008490:	f7f8 fb24 	bl	8000adc <__aeabi_dcmpeq>
 8008494:	b900      	cbnz	r0, 8008498 <_dtoa_r+0x168>
 8008496:	3f01      	subs	r7, #1
 8008498:	2f16      	cmp	r7, #22
 800849a:	d851      	bhi.n	8008540 <_dtoa_r+0x210>
 800849c:	4b5b      	ldr	r3, [pc, #364]	@ (800860c <_dtoa_r+0x2dc>)
 800849e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084aa:	f7f8 fb21 	bl	8000af0 <__aeabi_dcmplt>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d048      	beq.n	8008544 <_dtoa_r+0x214>
 80084b2:	3f01      	subs	r7, #1
 80084b4:	2300      	movs	r3, #0
 80084b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80084b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084ba:	1b9b      	subs	r3, r3, r6
 80084bc:	1e5a      	subs	r2, r3, #1
 80084be:	bf44      	itt	mi
 80084c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80084c4:	2300      	movmi	r3, #0
 80084c6:	9208      	str	r2, [sp, #32]
 80084c8:	bf54      	ite	pl
 80084ca:	f04f 0800 	movpl.w	r8, #0
 80084ce:	9308      	strmi	r3, [sp, #32]
 80084d0:	2f00      	cmp	r7, #0
 80084d2:	db39      	blt.n	8008548 <_dtoa_r+0x218>
 80084d4:	9b08      	ldr	r3, [sp, #32]
 80084d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084d8:	443b      	add	r3, r7
 80084da:	9308      	str	r3, [sp, #32]
 80084dc:	2300      	movs	r3, #0
 80084de:	930a      	str	r3, [sp, #40]	@ 0x28
 80084e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e2:	2b09      	cmp	r3, #9
 80084e4:	d864      	bhi.n	80085b0 <_dtoa_r+0x280>
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	bfc4      	itt	gt
 80084ea:	3b04      	subgt	r3, #4
 80084ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f0:	f1a3 0302 	sub.w	r3, r3, #2
 80084f4:	bfcc      	ite	gt
 80084f6:	2400      	movgt	r4, #0
 80084f8:	2401      	movle	r4, #1
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d863      	bhi.n	80085c6 <_dtoa_r+0x296>
 80084fe:	e8df f003 	tbb	[pc, r3]
 8008502:	372a      	.short	0x372a
 8008504:	5535      	.short	0x5535
 8008506:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800850a:	441e      	add	r6, r3
 800850c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008510:	2b20      	cmp	r3, #32
 8008512:	bfc1      	itttt	gt
 8008514:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008518:	409f      	lslgt	r7, r3
 800851a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800851e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008522:	bfd6      	itet	le
 8008524:	f1c3 0320 	rsble	r3, r3, #32
 8008528:	ea47 0003 	orrgt.w	r0, r7, r3
 800852c:	fa04 f003 	lslle.w	r0, r4, r3
 8008530:	f7f7 fff2 	bl	8000518 <__aeabi_ui2d>
 8008534:	2201      	movs	r2, #1
 8008536:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800853a:	3e01      	subs	r6, #1
 800853c:	9214      	str	r2, [sp, #80]	@ 0x50
 800853e:	e777      	b.n	8008430 <_dtoa_r+0x100>
 8008540:	2301      	movs	r3, #1
 8008542:	e7b8      	b.n	80084b6 <_dtoa_r+0x186>
 8008544:	9012      	str	r0, [sp, #72]	@ 0x48
 8008546:	e7b7      	b.n	80084b8 <_dtoa_r+0x188>
 8008548:	427b      	negs	r3, r7
 800854a:	930a      	str	r3, [sp, #40]	@ 0x28
 800854c:	2300      	movs	r3, #0
 800854e:	eba8 0807 	sub.w	r8, r8, r7
 8008552:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008554:	e7c4      	b.n	80084e0 <_dtoa_r+0x1b0>
 8008556:	2300      	movs	r3, #0
 8008558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800855a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800855c:	2b00      	cmp	r3, #0
 800855e:	dc35      	bgt.n	80085cc <_dtoa_r+0x29c>
 8008560:	2301      	movs	r3, #1
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	461a      	mov	r2, r3
 8008568:	920e      	str	r2, [sp, #56]	@ 0x38
 800856a:	e00b      	b.n	8008584 <_dtoa_r+0x254>
 800856c:	2301      	movs	r3, #1
 800856e:	e7f3      	b.n	8008558 <_dtoa_r+0x228>
 8008570:	2300      	movs	r3, #0
 8008572:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	3301      	adds	r3, #1
 800857c:	2b01      	cmp	r3, #1
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	bfb8      	it	lt
 8008582:	2301      	movlt	r3, #1
 8008584:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008588:	2100      	movs	r1, #0
 800858a:	2204      	movs	r2, #4
 800858c:	f102 0514 	add.w	r5, r2, #20
 8008590:	429d      	cmp	r5, r3
 8008592:	d91f      	bls.n	80085d4 <_dtoa_r+0x2a4>
 8008594:	6041      	str	r1, [r0, #4]
 8008596:	4658      	mov	r0, fp
 8008598:	f001 f88a 	bl	80096b0 <_Balloc>
 800859c:	4682      	mov	sl, r0
 800859e:	2800      	cmp	r0, #0
 80085a0:	d13c      	bne.n	800861c <_dtoa_r+0x2ec>
 80085a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <_dtoa_r+0x2e0>)
 80085a4:	4602      	mov	r2, r0
 80085a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80085aa:	e6d8      	b.n	800835e <_dtoa_r+0x2e>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e7e0      	b.n	8008572 <_dtoa_r+0x242>
 80085b0:	2401      	movs	r4, #1
 80085b2:	2300      	movs	r3, #0
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	9307      	str	r3, [sp, #28]
 80085c0:	2200      	movs	r2, #0
 80085c2:	2312      	movs	r3, #18
 80085c4:	e7d0      	b.n	8008568 <_dtoa_r+0x238>
 80085c6:	2301      	movs	r3, #1
 80085c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085ca:	e7f5      	b.n	80085b8 <_dtoa_r+0x288>
 80085cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	9307      	str	r3, [sp, #28]
 80085d2:	e7d7      	b.n	8008584 <_dtoa_r+0x254>
 80085d4:	3101      	adds	r1, #1
 80085d6:	0052      	lsls	r2, r2, #1
 80085d8:	e7d8      	b.n	800858c <_dtoa_r+0x25c>
 80085da:	bf00      	nop
 80085dc:	f3af 8000 	nop.w
 80085e0:	636f4361 	.word	0x636f4361
 80085e4:	3fd287a7 	.word	0x3fd287a7
 80085e8:	8b60c8b3 	.word	0x8b60c8b3
 80085ec:	3fc68a28 	.word	0x3fc68a28
 80085f0:	509f79fb 	.word	0x509f79fb
 80085f4:	3fd34413 	.word	0x3fd34413
 80085f8:	0800b4a9 	.word	0x0800b4a9
 80085fc:	0800b4c0 	.word	0x0800b4c0
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	0800b479 	.word	0x0800b479
 8008608:	3ff80000 	.word	0x3ff80000
 800860c:	0800b5c8 	.word	0x0800b5c8
 8008610:	0800b518 	.word	0x0800b518
 8008614:	0800b4a5 	.word	0x0800b4a5
 8008618:	0800b478 	.word	0x0800b478
 800861c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008620:	6018      	str	r0, [r3, #0]
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	2b0e      	cmp	r3, #14
 8008626:	f200 80a4 	bhi.w	8008772 <_dtoa_r+0x442>
 800862a:	2c00      	cmp	r4, #0
 800862c:	f000 80a1 	beq.w	8008772 <_dtoa_r+0x442>
 8008630:	2f00      	cmp	r7, #0
 8008632:	dd33      	ble.n	800869c <_dtoa_r+0x36c>
 8008634:	4bad      	ldr	r3, [pc, #692]	@ (80088ec <_dtoa_r+0x5bc>)
 8008636:	f007 020f 	and.w	r2, r7, #15
 800863a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863e:	ed93 7b00 	vldr	d7, [r3]
 8008642:	05f8      	lsls	r0, r7, #23
 8008644:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800864c:	d516      	bpl.n	800867c <_dtoa_r+0x34c>
 800864e:	4ba8      	ldr	r3, [pc, #672]	@ (80088f0 <_dtoa_r+0x5c0>)
 8008650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008658:	f7f8 f902 	bl	8000860 <__aeabi_ddiv>
 800865c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008660:	f004 040f 	and.w	r4, r4, #15
 8008664:	2603      	movs	r6, #3
 8008666:	4da2      	ldr	r5, [pc, #648]	@ (80088f0 <_dtoa_r+0x5c0>)
 8008668:	b954      	cbnz	r4, 8008680 <_dtoa_r+0x350>
 800866a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800866e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008672:	f7f8 f8f5 	bl	8000860 <__aeabi_ddiv>
 8008676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800867a:	e028      	b.n	80086ce <_dtoa_r+0x39e>
 800867c:	2602      	movs	r6, #2
 800867e:	e7f2      	b.n	8008666 <_dtoa_r+0x336>
 8008680:	07e1      	lsls	r1, r4, #31
 8008682:	d508      	bpl.n	8008696 <_dtoa_r+0x366>
 8008684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800868c:	f7f7 ffbe 	bl	800060c <__aeabi_dmul>
 8008690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008694:	3601      	adds	r6, #1
 8008696:	1064      	asrs	r4, r4, #1
 8008698:	3508      	adds	r5, #8
 800869a:	e7e5      	b.n	8008668 <_dtoa_r+0x338>
 800869c:	f000 80d2 	beq.w	8008844 <_dtoa_r+0x514>
 80086a0:	427c      	negs	r4, r7
 80086a2:	4b92      	ldr	r3, [pc, #584]	@ (80088ec <_dtoa_r+0x5bc>)
 80086a4:	4d92      	ldr	r5, [pc, #584]	@ (80088f0 <_dtoa_r+0x5c0>)
 80086a6:	f004 020f 	and.w	r2, r4, #15
 80086aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086b6:	f7f7 ffa9 	bl	800060c <__aeabi_dmul>
 80086ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086be:	1124      	asrs	r4, r4, #4
 80086c0:	2300      	movs	r3, #0
 80086c2:	2602      	movs	r6, #2
 80086c4:	2c00      	cmp	r4, #0
 80086c6:	f040 80b2 	bne.w	800882e <_dtoa_r+0x4fe>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1d3      	bne.n	8008676 <_dtoa_r+0x346>
 80086ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 80b7 	beq.w	8008848 <_dtoa_r+0x518>
 80086da:	4b86      	ldr	r3, [pc, #536]	@ (80088f4 <_dtoa_r+0x5c4>)
 80086dc:	2200      	movs	r2, #0
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f8 fa05 	bl	8000af0 <__aeabi_dcmplt>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f000 80ae 	beq.w	8008848 <_dtoa_r+0x518>
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 80aa 	beq.w	8008848 <_dtoa_r+0x518>
 80086f4:	9b00      	ldr	r3, [sp, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd37      	ble.n	800876a <_dtoa_r+0x43a>
 80086fa:	1e7b      	subs	r3, r7, #1
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	4620      	mov	r0, r4
 8008700:	4b7d      	ldr	r3, [pc, #500]	@ (80088f8 <_dtoa_r+0x5c8>)
 8008702:	2200      	movs	r2, #0
 8008704:	4629      	mov	r1, r5
 8008706:	f7f7 ff81 	bl	800060c <__aeabi_dmul>
 800870a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800870e:	9c00      	ldr	r4, [sp, #0]
 8008710:	3601      	adds	r6, #1
 8008712:	4630      	mov	r0, r6
 8008714:	f7f7 ff10 	bl	8000538 <__aeabi_i2d>
 8008718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800871c:	f7f7 ff76 	bl	800060c <__aeabi_dmul>
 8008720:	4b76      	ldr	r3, [pc, #472]	@ (80088fc <_dtoa_r+0x5cc>)
 8008722:	2200      	movs	r2, #0
 8008724:	f7f7 fdbc 	bl	80002a0 <__adddf3>
 8008728:	4605      	mov	r5, r0
 800872a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800872e:	2c00      	cmp	r4, #0
 8008730:	f040 808d 	bne.w	800884e <_dtoa_r+0x51e>
 8008734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008738:	4b71      	ldr	r3, [pc, #452]	@ (8008900 <_dtoa_r+0x5d0>)
 800873a:	2200      	movs	r2, #0
 800873c:	f7f7 fdae 	bl	800029c <__aeabi_dsub>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008748:	462a      	mov	r2, r5
 800874a:	4633      	mov	r3, r6
 800874c:	f7f8 f9ee 	bl	8000b2c <__aeabi_dcmpgt>
 8008750:	2800      	cmp	r0, #0
 8008752:	f040 828b 	bne.w	8008c6c <_dtoa_r+0x93c>
 8008756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875a:	462a      	mov	r2, r5
 800875c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008760:	f7f8 f9c6 	bl	8000af0 <__aeabi_dcmplt>
 8008764:	2800      	cmp	r0, #0
 8008766:	f040 8128 	bne.w	80089ba <_dtoa_r+0x68a>
 800876a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800876e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008774:	2b00      	cmp	r3, #0
 8008776:	f2c0 815a 	blt.w	8008a2e <_dtoa_r+0x6fe>
 800877a:	2f0e      	cmp	r7, #14
 800877c:	f300 8157 	bgt.w	8008a2e <_dtoa_r+0x6fe>
 8008780:	4b5a      	ldr	r3, [pc, #360]	@ (80088ec <_dtoa_r+0x5bc>)
 8008782:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008786:	ed93 7b00 	vldr	d7, [r3]
 800878a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800878c:	2b00      	cmp	r3, #0
 800878e:	ed8d 7b00 	vstr	d7, [sp]
 8008792:	da03      	bge.n	800879c <_dtoa_r+0x46c>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f340 8101 	ble.w	800899e <_dtoa_r+0x66e>
 800879c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087a0:	4656      	mov	r6, sl
 80087a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f8 f859 	bl	8000860 <__aeabi_ddiv>
 80087ae:	f7f8 f9dd 	bl	8000b6c <__aeabi_d2iz>
 80087b2:	4680      	mov	r8, r0
 80087b4:	f7f7 fec0 	bl	8000538 <__aeabi_i2d>
 80087b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087bc:	f7f7 ff26 	bl	800060c <__aeabi_dmul>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087cc:	f7f7 fd66 	bl	800029c <__aeabi_dsub>
 80087d0:	f806 4b01 	strb.w	r4, [r6], #1
 80087d4:	9d07      	ldr	r5, [sp, #28]
 80087d6:	eba6 040a 	sub.w	r4, r6, sl
 80087da:	42a5      	cmp	r5, r4
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	f040 8117 	bne.w	8008a12 <_dtoa_r+0x6e2>
 80087e4:	f7f7 fd5c 	bl	80002a0 <__adddf3>
 80087e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	f7f8 f99c 	bl	8000b2c <__aeabi_dcmpgt>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f040 80f9 	bne.w	80089ec <_dtoa_r+0x6bc>
 80087fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f96b 	bl	8000adc <__aeabi_dcmpeq>
 8008806:	b118      	cbz	r0, 8008810 <_dtoa_r+0x4e0>
 8008808:	f018 0f01 	tst.w	r8, #1
 800880c:	f040 80ee 	bne.w	80089ec <_dtoa_r+0x6bc>
 8008810:	4649      	mov	r1, r9
 8008812:	4658      	mov	r0, fp
 8008814:	f000 ff8c 	bl	8009730 <_Bfree>
 8008818:	2300      	movs	r3, #0
 800881a:	7033      	strb	r3, [r6, #0]
 800881c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800881e:	3701      	adds	r7, #1
 8008820:	601f      	str	r7, [r3, #0]
 8008822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 831d 	beq.w	8008e64 <_dtoa_r+0xb34>
 800882a:	601e      	str	r6, [r3, #0]
 800882c:	e31a      	b.n	8008e64 <_dtoa_r+0xb34>
 800882e:	07e2      	lsls	r2, r4, #31
 8008830:	d505      	bpl.n	800883e <_dtoa_r+0x50e>
 8008832:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008836:	f7f7 fee9 	bl	800060c <__aeabi_dmul>
 800883a:	3601      	adds	r6, #1
 800883c:	2301      	movs	r3, #1
 800883e:	1064      	asrs	r4, r4, #1
 8008840:	3508      	adds	r5, #8
 8008842:	e73f      	b.n	80086c4 <_dtoa_r+0x394>
 8008844:	2602      	movs	r6, #2
 8008846:	e742      	b.n	80086ce <_dtoa_r+0x39e>
 8008848:	9c07      	ldr	r4, [sp, #28]
 800884a:	9704      	str	r7, [sp, #16]
 800884c:	e761      	b.n	8008712 <_dtoa_r+0x3e2>
 800884e:	4b27      	ldr	r3, [pc, #156]	@ (80088ec <_dtoa_r+0x5bc>)
 8008850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008852:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008856:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800885a:	4454      	add	r4, sl
 800885c:	2900      	cmp	r1, #0
 800885e:	d053      	beq.n	8008908 <_dtoa_r+0x5d8>
 8008860:	4928      	ldr	r1, [pc, #160]	@ (8008904 <_dtoa_r+0x5d4>)
 8008862:	2000      	movs	r0, #0
 8008864:	f7f7 fffc 	bl	8000860 <__aeabi_ddiv>
 8008868:	4633      	mov	r3, r6
 800886a:	462a      	mov	r2, r5
 800886c:	f7f7 fd16 	bl	800029c <__aeabi_dsub>
 8008870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008874:	4656      	mov	r6, sl
 8008876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800887a:	f7f8 f977 	bl	8000b6c <__aeabi_d2iz>
 800887e:	4605      	mov	r5, r0
 8008880:	f7f7 fe5a 	bl	8000538 <__aeabi_i2d>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800888c:	f7f7 fd06 	bl	800029c <__aeabi_dsub>
 8008890:	3530      	adds	r5, #48	@ 0x30
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800889a:	f806 5b01 	strb.w	r5, [r6], #1
 800889e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088a2:	f7f8 f925 	bl	8000af0 <__aeabi_dcmplt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d171      	bne.n	800898e <_dtoa_r+0x65e>
 80088aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ae:	4911      	ldr	r1, [pc, #68]	@ (80088f4 <_dtoa_r+0x5c4>)
 80088b0:	2000      	movs	r0, #0
 80088b2:	f7f7 fcf3 	bl	800029c <__aeabi_dsub>
 80088b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088ba:	f7f8 f919 	bl	8000af0 <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f040 8095 	bne.w	80089ee <_dtoa_r+0x6be>
 80088c4:	42a6      	cmp	r6, r4
 80088c6:	f43f af50 	beq.w	800876a <_dtoa_r+0x43a>
 80088ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088ce:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <_dtoa_r+0x5c8>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	f7f7 fe9b 	bl	800060c <__aeabi_dmul>
 80088d6:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <_dtoa_r+0x5c8>)
 80088d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088dc:	2200      	movs	r2, #0
 80088de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e2:	f7f7 fe93 	bl	800060c <__aeabi_dmul>
 80088e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ea:	e7c4      	b.n	8008876 <_dtoa_r+0x546>
 80088ec:	0800b5c8 	.word	0x0800b5c8
 80088f0:	0800b5a0 	.word	0x0800b5a0
 80088f4:	3ff00000 	.word	0x3ff00000
 80088f8:	40240000 	.word	0x40240000
 80088fc:	401c0000 	.word	0x401c0000
 8008900:	40140000 	.word	0x40140000
 8008904:	3fe00000 	.word	0x3fe00000
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	f7f7 fe7e 	bl	800060c <__aeabi_dmul>
 8008910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008914:	9415      	str	r4, [sp, #84]	@ 0x54
 8008916:	4656      	mov	r6, sl
 8008918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800891c:	f7f8 f926 	bl	8000b6c <__aeabi_d2iz>
 8008920:	4605      	mov	r5, r0
 8008922:	f7f7 fe09 	bl	8000538 <__aeabi_i2d>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892e:	f7f7 fcb5 	bl	800029c <__aeabi_dsub>
 8008932:	3530      	adds	r5, #48	@ 0x30
 8008934:	f806 5b01 	strb.w	r5, [r6], #1
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	42a6      	cmp	r6, r4
 800893e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	d124      	bne.n	8008992 <_dtoa_r+0x662>
 8008948:	4bac      	ldr	r3, [pc, #688]	@ (8008bfc <_dtoa_r+0x8cc>)
 800894a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800894e:	f7f7 fca7 	bl	80002a0 <__adddf3>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895a:	f7f8 f8e7 	bl	8000b2c <__aeabi_dcmpgt>
 800895e:	2800      	cmp	r0, #0
 8008960:	d145      	bne.n	80089ee <_dtoa_r+0x6be>
 8008962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008966:	49a5      	ldr	r1, [pc, #660]	@ (8008bfc <_dtoa_r+0x8cc>)
 8008968:	2000      	movs	r0, #0
 800896a:	f7f7 fc97 	bl	800029c <__aeabi_dsub>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008976:	f7f8 f8bb 	bl	8000af0 <__aeabi_dcmplt>
 800897a:	2800      	cmp	r0, #0
 800897c:	f43f aef5 	beq.w	800876a <_dtoa_r+0x43a>
 8008980:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008982:	1e73      	subs	r3, r6, #1
 8008984:	9315      	str	r3, [sp, #84]	@ 0x54
 8008986:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800898a:	2b30      	cmp	r3, #48	@ 0x30
 800898c:	d0f8      	beq.n	8008980 <_dtoa_r+0x650>
 800898e:	9f04      	ldr	r7, [sp, #16]
 8008990:	e73e      	b.n	8008810 <_dtoa_r+0x4e0>
 8008992:	4b9b      	ldr	r3, [pc, #620]	@ (8008c00 <_dtoa_r+0x8d0>)
 8008994:	f7f7 fe3a 	bl	800060c <__aeabi_dmul>
 8008998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800899c:	e7bc      	b.n	8008918 <_dtoa_r+0x5e8>
 800899e:	d10c      	bne.n	80089ba <_dtoa_r+0x68a>
 80089a0:	4b98      	ldr	r3, [pc, #608]	@ (8008c04 <_dtoa_r+0x8d4>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089a8:	f7f7 fe30 	bl	800060c <__aeabi_dmul>
 80089ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089b0:	f7f8 f8b2 	bl	8000b18 <__aeabi_dcmpge>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	f000 8157 	beq.w	8008c68 <_dtoa_r+0x938>
 80089ba:	2400      	movs	r4, #0
 80089bc:	4625      	mov	r5, r4
 80089be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c0:	43db      	mvns	r3, r3
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	4656      	mov	r6, sl
 80089c6:	2700      	movs	r7, #0
 80089c8:	4621      	mov	r1, r4
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 feb0 	bl	8009730 <_Bfree>
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	d0dc      	beq.n	800898e <_dtoa_r+0x65e>
 80089d4:	b12f      	cbz	r7, 80089e2 <_dtoa_r+0x6b2>
 80089d6:	42af      	cmp	r7, r5
 80089d8:	d003      	beq.n	80089e2 <_dtoa_r+0x6b2>
 80089da:	4639      	mov	r1, r7
 80089dc:	4658      	mov	r0, fp
 80089de:	f000 fea7 	bl	8009730 <_Bfree>
 80089e2:	4629      	mov	r1, r5
 80089e4:	4658      	mov	r0, fp
 80089e6:	f000 fea3 	bl	8009730 <_Bfree>
 80089ea:	e7d0      	b.n	800898e <_dtoa_r+0x65e>
 80089ec:	9704      	str	r7, [sp, #16]
 80089ee:	4633      	mov	r3, r6
 80089f0:	461e      	mov	r6, r3
 80089f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f6:	2a39      	cmp	r2, #57	@ 0x39
 80089f8:	d107      	bne.n	8008a0a <_dtoa_r+0x6da>
 80089fa:	459a      	cmp	sl, r3
 80089fc:	d1f8      	bne.n	80089f0 <_dtoa_r+0x6c0>
 80089fe:	9a04      	ldr	r2, [sp, #16]
 8008a00:	3201      	adds	r2, #1
 8008a02:	9204      	str	r2, [sp, #16]
 8008a04:	2230      	movs	r2, #48	@ 0x30
 8008a06:	f88a 2000 	strb.w	r2, [sl]
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	3201      	adds	r2, #1
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	e7bd      	b.n	800898e <_dtoa_r+0x65e>
 8008a12:	4b7b      	ldr	r3, [pc, #492]	@ (8008c00 <_dtoa_r+0x8d0>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	f7f7 fdf9 	bl	800060c <__aeabi_dmul>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	f7f8 f85b 	bl	8000adc <__aeabi_dcmpeq>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f43f aebb 	beq.w	80087a2 <_dtoa_r+0x472>
 8008a2c:	e6f0      	b.n	8008810 <_dtoa_r+0x4e0>
 8008a2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	f000 80db 	beq.w	8008bec <_dtoa_r+0x8bc>
 8008a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a38:	2a01      	cmp	r2, #1
 8008a3a:	f300 80bf 	bgt.w	8008bbc <_dtoa_r+0x88c>
 8008a3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	f000 80b7 	beq.w	8008bb4 <_dtoa_r+0x884>
 8008a46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a4c:	4646      	mov	r6, r8
 8008a4e:	9a08      	ldr	r2, [sp, #32]
 8008a50:	2101      	movs	r1, #1
 8008a52:	441a      	add	r2, r3
 8008a54:	4658      	mov	r0, fp
 8008a56:	4498      	add	r8, r3
 8008a58:	9208      	str	r2, [sp, #32]
 8008a5a:	f000 ff1d 	bl	8009898 <__i2b>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b15e      	cbz	r6, 8008a7a <_dtoa_r+0x74a>
 8008a62:	9b08      	ldr	r3, [sp, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd08      	ble.n	8008a7a <_dtoa_r+0x74a>
 8008a68:	42b3      	cmp	r3, r6
 8008a6a:	9a08      	ldr	r2, [sp, #32]
 8008a6c:	bfa8      	it	ge
 8008a6e:	4633      	movge	r3, r6
 8008a70:	eba8 0803 	sub.w	r8, r8, r3
 8008a74:	1af6      	subs	r6, r6, r3
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a7c:	b1f3      	cbz	r3, 8008abc <_dtoa_r+0x78c>
 8008a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 80b7 	beq.w	8008bf4 <_dtoa_r+0x8c4>
 8008a86:	b18c      	cbz	r4, 8008aac <_dtoa_r+0x77c>
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	4658      	mov	r0, fp
 8008a8e:	f000 ffc3 	bl	8009a18 <__pow5mult>
 8008a92:	464a      	mov	r2, r9
 8008a94:	4601      	mov	r1, r0
 8008a96:	4605      	mov	r5, r0
 8008a98:	4658      	mov	r0, fp
 8008a9a:	f000 ff13 	bl	80098c4 <__multiply>
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	9004      	str	r0, [sp, #16]
 8008aa2:	4658      	mov	r0, fp
 8008aa4:	f000 fe44 	bl	8009730 <_Bfree>
 8008aa8:	9b04      	ldr	r3, [sp, #16]
 8008aaa:	4699      	mov	r9, r3
 8008aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aae:	1b1a      	subs	r2, r3, r4
 8008ab0:	d004      	beq.n	8008abc <_dtoa_r+0x78c>
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	4658      	mov	r0, fp
 8008ab6:	f000 ffaf 	bl	8009a18 <__pow5mult>
 8008aba:	4681      	mov	r9, r0
 8008abc:	2101      	movs	r1, #1
 8008abe:	4658      	mov	r0, fp
 8008ac0:	f000 feea 	bl	8009898 <__i2b>
 8008ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 81cf 	beq.w	8008e6c <_dtoa_r+0xb3c>
 8008ace:	461a      	mov	r2, r3
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	4658      	mov	r0, fp
 8008ad4:	f000 ffa0 	bl	8009a18 <__pow5mult>
 8008ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	4604      	mov	r4, r0
 8008ade:	f300 8095 	bgt.w	8008c0c <_dtoa_r+0x8dc>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 8087 	bne.w	8008bf8 <_dtoa_r+0x8c8>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 8089 	bne.w	8008c08 <_dtoa_r+0x8d8>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008afc:	0d1b      	lsrs	r3, r3, #20
 8008afe:	051b      	lsls	r3, r3, #20
 8008b00:	b12b      	cbz	r3, 8008b0e <_dtoa_r+0x7de>
 8008b02:	9b08      	ldr	r3, [sp, #32]
 8008b04:	3301      	adds	r3, #1
 8008b06:	9308      	str	r3, [sp, #32]
 8008b08:	f108 0801 	add.w	r8, r8, #1
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 81b0 	beq.w	8008e78 <_dtoa_r+0xb48>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b1e:	6918      	ldr	r0, [r3, #16]
 8008b20:	f000 fe6e 	bl	8009800 <__hi0bits>
 8008b24:	f1c0 0020 	rsb	r0, r0, #32
 8008b28:	9b08      	ldr	r3, [sp, #32]
 8008b2a:	4418      	add	r0, r3
 8008b2c:	f010 001f 	ands.w	r0, r0, #31
 8008b30:	d077      	beq.n	8008c22 <_dtoa_r+0x8f2>
 8008b32:	f1c0 0320 	rsb	r3, r0, #32
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	dd6b      	ble.n	8008c12 <_dtoa_r+0x8e2>
 8008b3a:	9b08      	ldr	r3, [sp, #32]
 8008b3c:	f1c0 001c 	rsb	r0, r0, #28
 8008b40:	4403      	add	r3, r0
 8008b42:	4480      	add	r8, r0
 8008b44:	4406      	add	r6, r0
 8008b46:	9308      	str	r3, [sp, #32]
 8008b48:	f1b8 0f00 	cmp.w	r8, #0
 8008b4c:	dd05      	ble.n	8008b5a <_dtoa_r+0x82a>
 8008b4e:	4649      	mov	r1, r9
 8008b50:	4642      	mov	r2, r8
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 ffba 	bl	8009acc <__lshift>
 8008b58:	4681      	mov	r9, r0
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dd05      	ble.n	8008b6c <_dtoa_r+0x83c>
 8008b60:	4621      	mov	r1, r4
 8008b62:	461a      	mov	r2, r3
 8008b64:	4658      	mov	r0, fp
 8008b66:	f000 ffb1 	bl	8009acc <__lshift>
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d059      	beq.n	8008c26 <_dtoa_r+0x8f6>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4648      	mov	r0, r9
 8008b76:	f001 f815 	bl	8009ba4 <__mcmp>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	da53      	bge.n	8008c26 <_dtoa_r+0x8f6>
 8008b7e:	1e7b      	subs	r3, r7, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	4649      	mov	r1, r9
 8008b84:	2300      	movs	r3, #0
 8008b86:	220a      	movs	r2, #10
 8008b88:	4658      	mov	r0, fp
 8008b8a:	f000 fdf3 	bl	8009774 <__multadd>
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b90:	4681      	mov	r9, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 8172 	beq.w	8008e7c <_dtoa_r+0xb4c>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	220a      	movs	r2, #10
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	f000 fde8 	bl	8009774 <__multadd>
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	4605      	mov	r5, r0
 8008baa:	dc67      	bgt.n	8008c7c <_dtoa_r+0x94c>
 8008bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	dc41      	bgt.n	8008c36 <_dtoa_r+0x906>
 8008bb2:	e063      	b.n	8008c7c <_dtoa_r+0x94c>
 8008bb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008bba:	e746      	b.n	8008a4a <_dtoa_r+0x71a>
 8008bbc:	9b07      	ldr	r3, [sp, #28]
 8008bbe:	1e5c      	subs	r4, r3, #1
 8008bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	bfbf      	itttt	lt
 8008bc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008bca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008bcc:	1ae3      	sublt	r3, r4, r3
 8008bce:	bfb4      	ite	lt
 8008bd0:	18d2      	addlt	r2, r2, r3
 8008bd2:	1b1c      	subge	r4, r3, r4
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	bfbc      	itt	lt
 8008bd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008bda:	2400      	movlt	r4, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfb5      	itete	lt
 8008be0:	eba8 0603 	sublt.w	r6, r8, r3
 8008be4:	9b07      	ldrge	r3, [sp, #28]
 8008be6:	2300      	movlt	r3, #0
 8008be8:	4646      	movge	r6, r8
 8008bea:	e730      	b.n	8008a4e <_dtoa_r+0x71e>
 8008bec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008bf0:	4646      	mov	r6, r8
 8008bf2:	e735      	b.n	8008a60 <_dtoa_r+0x730>
 8008bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bf6:	e75c      	b.n	8008ab2 <_dtoa_r+0x782>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e788      	b.n	8008b0e <_dtoa_r+0x7de>
 8008bfc:	3fe00000 	.word	0x3fe00000
 8008c00:	40240000 	.word	0x40240000
 8008c04:	40140000 	.word	0x40140000
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	e780      	b.n	8008b0e <_dtoa_r+0x7de>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c10:	e782      	b.n	8008b18 <_dtoa_r+0x7e8>
 8008c12:	d099      	beq.n	8008b48 <_dtoa_r+0x818>
 8008c14:	9a08      	ldr	r2, [sp, #32]
 8008c16:	331c      	adds	r3, #28
 8008c18:	441a      	add	r2, r3
 8008c1a:	4498      	add	r8, r3
 8008c1c:	441e      	add	r6, r3
 8008c1e:	9208      	str	r2, [sp, #32]
 8008c20:	e792      	b.n	8008b48 <_dtoa_r+0x818>
 8008c22:	4603      	mov	r3, r0
 8008c24:	e7f6      	b.n	8008c14 <_dtoa_r+0x8e4>
 8008c26:	9b07      	ldr	r3, [sp, #28]
 8008c28:	9704      	str	r7, [sp, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	dc20      	bgt.n	8008c70 <_dtoa_r+0x940>
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	dd1e      	ble.n	8008c74 <_dtoa_r+0x944>
 8008c36:	9b00      	ldr	r3, [sp, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f47f aec0 	bne.w	80089be <_dtoa_r+0x68e>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	2205      	movs	r2, #5
 8008c42:	4658      	mov	r0, fp
 8008c44:	f000 fd96 	bl	8009774 <__multadd>
 8008c48:	4601      	mov	r1, r0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f000 ffa9 	bl	8009ba4 <__mcmp>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f77f aeb3 	ble.w	80089be <_dtoa_r+0x68e>
 8008c58:	4656      	mov	r6, sl
 8008c5a:	2331      	movs	r3, #49	@ 0x31
 8008c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c60:	9b04      	ldr	r3, [sp, #16]
 8008c62:	3301      	adds	r3, #1
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	e6ae      	b.n	80089c6 <_dtoa_r+0x696>
 8008c68:	9c07      	ldr	r4, [sp, #28]
 8008c6a:	9704      	str	r7, [sp, #16]
 8008c6c:	4625      	mov	r5, r4
 8008c6e:	e7f3      	b.n	8008c58 <_dtoa_r+0x928>
 8008c70:	9b07      	ldr	r3, [sp, #28]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8104 	beq.w	8008e84 <_dtoa_r+0xb54>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	dd05      	ble.n	8008c8c <_dtoa_r+0x95c>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4632      	mov	r2, r6
 8008c84:	4658      	mov	r0, fp
 8008c86:	f000 ff21 	bl	8009acc <__lshift>
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d05a      	beq.n	8008d48 <_dtoa_r+0xa18>
 8008c92:	6869      	ldr	r1, [r5, #4]
 8008c94:	4658      	mov	r0, fp
 8008c96:	f000 fd0b 	bl	80096b0 <_Balloc>
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	b928      	cbnz	r0, 8008caa <_dtoa_r+0x97a>
 8008c9e:	4b84      	ldr	r3, [pc, #528]	@ (8008eb0 <_dtoa_r+0xb80>)
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ca6:	f7ff bb5a 	b.w	800835e <_dtoa_r+0x2e>
 8008caa:	692a      	ldr	r2, [r5, #16]
 8008cac:	3202      	adds	r2, #2
 8008cae:	0092      	lsls	r2, r2, #2
 8008cb0:	f105 010c 	add.w	r1, r5, #12
 8008cb4:	300c      	adds	r0, #12
 8008cb6:	f7ff fa96 	bl	80081e6 <memcpy>
 8008cba:	2201      	movs	r2, #1
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	f000 ff04 	bl	8009acc <__lshift>
 8008cc4:	f10a 0301 	add.w	r3, sl, #1
 8008cc8:	9307      	str	r3, [sp, #28]
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	4453      	add	r3, sl
 8008cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	462f      	mov	r7, r5
 8008cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cda:	4605      	mov	r5, r0
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	4621      	mov	r1, r4
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	4648      	mov	r0, r9
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	f7ff fa9b 	bl	8008220 <quorem>
 8008cea:	4639      	mov	r1, r7
 8008cec:	9002      	str	r0, [sp, #8]
 8008cee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cf2:	4648      	mov	r0, r9
 8008cf4:	f000 ff56 	bl	8009ba4 <__mcmp>
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	9008      	str	r0, [sp, #32]
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4658      	mov	r0, fp
 8008d00:	f000 ff6c 	bl	8009bdc <__mdiff>
 8008d04:	68c2      	ldr	r2, [r0, #12]
 8008d06:	4606      	mov	r6, r0
 8008d08:	bb02      	cbnz	r2, 8008d4c <_dtoa_r+0xa1c>
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4648      	mov	r0, r9
 8008d0e:	f000 ff49 	bl	8009ba4 <__mcmp>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4631      	mov	r1, r6
 8008d16:	4658      	mov	r0, fp
 8008d18:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d1a:	f000 fd09 	bl	8009730 <_Bfree>
 8008d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d22:	9e07      	ldr	r6, [sp, #28]
 8008d24:	ea43 0102 	orr.w	r1, r3, r2
 8008d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d2a:	4319      	orrs	r1, r3
 8008d2c:	d110      	bne.n	8008d50 <_dtoa_r+0xa20>
 8008d2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d32:	d029      	beq.n	8008d88 <_dtoa_r+0xa58>
 8008d34:	9b08      	ldr	r3, [sp, #32]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dd02      	ble.n	8008d40 <_dtoa_r+0xa10>
 8008d3a:	9b02      	ldr	r3, [sp, #8]
 8008d3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d40:	9b00      	ldr	r3, [sp, #0]
 8008d42:	f883 8000 	strb.w	r8, [r3]
 8008d46:	e63f      	b.n	80089c8 <_dtoa_r+0x698>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e7bb      	b.n	8008cc4 <_dtoa_r+0x994>
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	e7e1      	b.n	8008d14 <_dtoa_r+0x9e4>
 8008d50:	9b08      	ldr	r3, [sp, #32]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	db04      	blt.n	8008d60 <_dtoa_r+0xa30>
 8008d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	d120      	bne.n	8008da2 <_dtoa_r+0xa72>
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	dded      	ble.n	8008d40 <_dtoa_r+0xa10>
 8008d64:	4649      	mov	r1, r9
 8008d66:	2201      	movs	r2, #1
 8008d68:	4658      	mov	r0, fp
 8008d6a:	f000 feaf 	bl	8009acc <__lshift>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4681      	mov	r9, r0
 8008d72:	f000 ff17 	bl	8009ba4 <__mcmp>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	dc03      	bgt.n	8008d82 <_dtoa_r+0xa52>
 8008d7a:	d1e1      	bne.n	8008d40 <_dtoa_r+0xa10>
 8008d7c:	f018 0f01 	tst.w	r8, #1
 8008d80:	d0de      	beq.n	8008d40 <_dtoa_r+0xa10>
 8008d82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d86:	d1d8      	bne.n	8008d3a <_dtoa_r+0xa0a>
 8008d88:	9a00      	ldr	r2, [sp, #0]
 8008d8a:	2339      	movs	r3, #57	@ 0x39
 8008d8c:	7013      	strb	r3, [r2, #0]
 8008d8e:	4633      	mov	r3, r6
 8008d90:	461e      	mov	r6, r3
 8008d92:	3b01      	subs	r3, #1
 8008d94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d98:	2a39      	cmp	r2, #57	@ 0x39
 8008d9a:	d052      	beq.n	8008e42 <_dtoa_r+0xb12>
 8008d9c:	3201      	adds	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	e612      	b.n	80089c8 <_dtoa_r+0x698>
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	dd07      	ble.n	8008db6 <_dtoa_r+0xa86>
 8008da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008daa:	d0ed      	beq.n	8008d88 <_dtoa_r+0xa58>
 8008dac:	9a00      	ldr	r2, [sp, #0]
 8008dae:	f108 0301 	add.w	r3, r8, #1
 8008db2:	7013      	strb	r3, [r2, #0]
 8008db4:	e608      	b.n	80089c8 <_dtoa_r+0x698>
 8008db6:	9b07      	ldr	r3, [sp, #28]
 8008db8:	9a07      	ldr	r2, [sp, #28]
 8008dba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d028      	beq.n	8008e16 <_dtoa_r+0xae6>
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4658      	mov	r0, fp
 8008dcc:	f000 fcd2 	bl	8009774 <__multadd>
 8008dd0:	42af      	cmp	r7, r5
 8008dd2:	4681      	mov	r9, r0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	f04f 020a 	mov.w	r2, #10
 8008ddc:	4639      	mov	r1, r7
 8008dde:	4658      	mov	r0, fp
 8008de0:	d107      	bne.n	8008df2 <_dtoa_r+0xac2>
 8008de2:	f000 fcc7 	bl	8009774 <__multadd>
 8008de6:	4607      	mov	r7, r0
 8008de8:	4605      	mov	r5, r0
 8008dea:	9b07      	ldr	r3, [sp, #28]
 8008dec:	3301      	adds	r3, #1
 8008dee:	9307      	str	r3, [sp, #28]
 8008df0:	e774      	b.n	8008cdc <_dtoa_r+0x9ac>
 8008df2:	f000 fcbf 	bl	8009774 <__multadd>
 8008df6:	4629      	mov	r1, r5
 8008df8:	4607      	mov	r7, r0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	4658      	mov	r0, fp
 8008e00:	f000 fcb8 	bl	8009774 <__multadd>
 8008e04:	4605      	mov	r5, r0
 8008e06:	e7f0      	b.n	8008dea <_dtoa_r+0xaba>
 8008e08:	9b00      	ldr	r3, [sp, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bfcc      	ite	gt
 8008e0e:	461e      	movgt	r6, r3
 8008e10:	2601      	movle	r6, #1
 8008e12:	4456      	add	r6, sl
 8008e14:	2700      	movs	r7, #0
 8008e16:	4649      	mov	r1, r9
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f000 fe56 	bl	8009acc <__lshift>
 8008e20:	4621      	mov	r1, r4
 8008e22:	4681      	mov	r9, r0
 8008e24:	f000 febe 	bl	8009ba4 <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dcb0      	bgt.n	8008d8e <_dtoa_r+0xa5e>
 8008e2c:	d102      	bne.n	8008e34 <_dtoa_r+0xb04>
 8008e2e:	f018 0f01 	tst.w	r8, #1
 8008e32:	d1ac      	bne.n	8008d8e <_dtoa_r+0xa5e>
 8008e34:	4633      	mov	r3, r6
 8008e36:	461e      	mov	r6, r3
 8008e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e3c:	2a30      	cmp	r2, #48	@ 0x30
 8008e3e:	d0fa      	beq.n	8008e36 <_dtoa_r+0xb06>
 8008e40:	e5c2      	b.n	80089c8 <_dtoa_r+0x698>
 8008e42:	459a      	cmp	sl, r3
 8008e44:	d1a4      	bne.n	8008d90 <_dtoa_r+0xa60>
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	2331      	movs	r3, #49	@ 0x31
 8008e4e:	f88a 3000 	strb.w	r3, [sl]
 8008e52:	e5b9      	b.n	80089c8 <_dtoa_r+0x698>
 8008e54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008eb4 <_dtoa_r+0xb84>
 8008e5a:	b11b      	cbz	r3, 8008e64 <_dtoa_r+0xb34>
 8008e5c:	f10a 0308 	add.w	r3, sl, #8
 8008e60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	4650      	mov	r0, sl
 8008e66:	b019      	add	sp, #100	@ 0x64
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	f77f ae37 	ble.w	8008ae2 <_dtoa_r+0x7b2>
 8008e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e78:	2001      	movs	r0, #1
 8008e7a:	e655      	b.n	8008b28 <_dtoa_r+0x7f8>
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f77f aed6 	ble.w	8008c30 <_dtoa_r+0x900>
 8008e84:	4656      	mov	r6, sl
 8008e86:	4621      	mov	r1, r4
 8008e88:	4648      	mov	r0, r9
 8008e8a:	f7ff f9c9 	bl	8008220 <quorem>
 8008e8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e92:	f806 8b01 	strb.w	r8, [r6], #1
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	eba6 020a 	sub.w	r2, r6, sl
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	ddb3      	ble.n	8008e08 <_dtoa_r+0xad8>
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	220a      	movs	r2, #10
 8008ea6:	4658      	mov	r0, fp
 8008ea8:	f000 fc64 	bl	8009774 <__multadd>
 8008eac:	4681      	mov	r9, r0
 8008eae:	e7ea      	b.n	8008e86 <_dtoa_r+0xb56>
 8008eb0:	0800b518 	.word	0x0800b518
 8008eb4:	0800b49c 	.word	0x0800b49c

08008eb8 <__ssputs_r>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	688e      	ldr	r6, [r1, #8]
 8008ebe:	461f      	mov	r7, r3
 8008ec0:	42be      	cmp	r6, r7
 8008ec2:	680b      	ldr	r3, [r1, #0]
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4690      	mov	r8, r2
 8008eca:	d82d      	bhi.n	8008f28 <__ssputs_r+0x70>
 8008ecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ed0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ed4:	d026      	beq.n	8008f24 <__ssputs_r+0x6c>
 8008ed6:	6965      	ldr	r5, [r4, #20]
 8008ed8:	6909      	ldr	r1, [r1, #16]
 8008eda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ede:	eba3 0901 	sub.w	r9, r3, r1
 8008ee2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ee6:	1c7b      	adds	r3, r7, #1
 8008ee8:	444b      	add	r3, r9
 8008eea:	106d      	asrs	r5, r5, #1
 8008eec:	429d      	cmp	r5, r3
 8008eee:	bf38      	it	cc
 8008ef0:	461d      	movcc	r5, r3
 8008ef2:	0553      	lsls	r3, r2, #21
 8008ef4:	d527      	bpl.n	8008f46 <__ssputs_r+0x8e>
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	f000 faa2 	bl	8009440 <_malloc_r>
 8008efc:	4606      	mov	r6, r0
 8008efe:	b360      	cbz	r0, 8008f5a <__ssputs_r+0xa2>
 8008f00:	6921      	ldr	r1, [r4, #16]
 8008f02:	464a      	mov	r2, r9
 8008f04:	f7ff f96f 	bl	80081e6 <memcpy>
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f12:	81a3      	strh	r3, [r4, #12]
 8008f14:	6126      	str	r6, [r4, #16]
 8008f16:	6165      	str	r5, [r4, #20]
 8008f18:	444e      	add	r6, r9
 8008f1a:	eba5 0509 	sub.w	r5, r5, r9
 8008f1e:	6026      	str	r6, [r4, #0]
 8008f20:	60a5      	str	r5, [r4, #8]
 8008f22:	463e      	mov	r6, r7
 8008f24:	42be      	cmp	r6, r7
 8008f26:	d900      	bls.n	8008f2a <__ssputs_r+0x72>
 8008f28:	463e      	mov	r6, r7
 8008f2a:	6820      	ldr	r0, [r4, #0]
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4641      	mov	r1, r8
 8008f30:	f7ff f906 	bl	8008140 <memmove>
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	1b9b      	subs	r3, r3, r6
 8008f38:	60a3      	str	r3, [r4, #8]
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	4433      	add	r3, r6
 8008f3e:	6023      	str	r3, [r4, #0]
 8008f40:	2000      	movs	r0, #0
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	462a      	mov	r2, r5
 8008f48:	f000 ff77 	bl	8009e3a <_realloc_r>
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d1e0      	bne.n	8008f14 <__ssputs_r+0x5c>
 8008f52:	6921      	ldr	r1, [r4, #16]
 8008f54:	4650      	mov	r0, sl
 8008f56:	f001 f965 	bl	800a224 <_free_r>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	f8ca 3000 	str.w	r3, [sl]
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f6c:	e7e9      	b.n	8008f42 <__ssputs_r+0x8a>
	...

08008f70 <_svfiprintf_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	4698      	mov	r8, r3
 8008f76:	898b      	ldrh	r3, [r1, #12]
 8008f78:	061b      	lsls	r3, r3, #24
 8008f7a:	b09d      	sub	sp, #116	@ 0x74
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	460d      	mov	r5, r1
 8008f80:	4614      	mov	r4, r2
 8008f82:	d510      	bpl.n	8008fa6 <_svfiprintf_r+0x36>
 8008f84:	690b      	ldr	r3, [r1, #16]
 8008f86:	b973      	cbnz	r3, 8008fa6 <_svfiprintf_r+0x36>
 8008f88:	2140      	movs	r1, #64	@ 0x40
 8008f8a:	f000 fa59 	bl	8009440 <_malloc_r>
 8008f8e:	6028      	str	r0, [r5, #0]
 8008f90:	6128      	str	r0, [r5, #16]
 8008f92:	b930      	cbnz	r0, 8008fa2 <_svfiprintf_r+0x32>
 8008f94:	230c      	movs	r3, #12
 8008f96:	603b      	str	r3, [r7, #0]
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f9c:	b01d      	add	sp, #116	@ 0x74
 8008f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa2:	2340      	movs	r3, #64	@ 0x40
 8008fa4:	616b      	str	r3, [r5, #20]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008faa:	2320      	movs	r3, #32
 8008fac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fb4:	2330      	movs	r3, #48	@ 0x30
 8008fb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009154 <_svfiprintf_r+0x1e4>
 8008fba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fbe:	f04f 0901 	mov.w	r9, #1
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	469a      	mov	sl, r3
 8008fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fca:	b10a      	cbz	r2, 8008fd0 <_svfiprintf_r+0x60>
 8008fcc:	2a25      	cmp	r2, #37	@ 0x25
 8008fce:	d1f9      	bne.n	8008fc4 <_svfiprintf_r+0x54>
 8008fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008fd4:	d00b      	beq.n	8008fee <_svfiprintf_r+0x7e>
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff ff6b 	bl	8008eb8 <__ssputs_r>
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	f000 80a7 	beq.w	8009136 <_svfiprintf_r+0x1c6>
 8008fe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fea:	445a      	add	r2, fp
 8008fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fee:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 809f 	beq.w	8009136 <_svfiprintf_r+0x1c6>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009002:	f10a 0a01 	add.w	sl, sl, #1
 8009006:	9304      	str	r3, [sp, #16]
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800900e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009010:	4654      	mov	r4, sl
 8009012:	2205      	movs	r2, #5
 8009014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009018:	484e      	ldr	r0, [pc, #312]	@ (8009154 <_svfiprintf_r+0x1e4>)
 800901a:	f7f7 f8d9 	bl	80001d0 <memchr>
 800901e:	9a04      	ldr	r2, [sp, #16]
 8009020:	b9d8      	cbnz	r0, 800905a <_svfiprintf_r+0xea>
 8009022:	06d0      	lsls	r0, r2, #27
 8009024:	bf44      	itt	mi
 8009026:	2320      	movmi	r3, #32
 8009028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800902c:	0711      	lsls	r1, r2, #28
 800902e:	bf44      	itt	mi
 8009030:	232b      	movmi	r3, #43	@ 0x2b
 8009032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009036:	f89a 3000 	ldrb.w	r3, [sl]
 800903a:	2b2a      	cmp	r3, #42	@ 0x2a
 800903c:	d015      	beq.n	800906a <_svfiprintf_r+0xfa>
 800903e:	9a07      	ldr	r2, [sp, #28]
 8009040:	4654      	mov	r4, sl
 8009042:	2000      	movs	r0, #0
 8009044:	f04f 0c0a 	mov.w	ip, #10
 8009048:	4621      	mov	r1, r4
 800904a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800904e:	3b30      	subs	r3, #48	@ 0x30
 8009050:	2b09      	cmp	r3, #9
 8009052:	d94b      	bls.n	80090ec <_svfiprintf_r+0x17c>
 8009054:	b1b0      	cbz	r0, 8009084 <_svfiprintf_r+0x114>
 8009056:	9207      	str	r2, [sp, #28]
 8009058:	e014      	b.n	8009084 <_svfiprintf_r+0x114>
 800905a:	eba0 0308 	sub.w	r3, r0, r8
 800905e:	fa09 f303 	lsl.w	r3, r9, r3
 8009062:	4313      	orrs	r3, r2
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	46a2      	mov	sl, r4
 8009068:	e7d2      	b.n	8009010 <_svfiprintf_r+0xa0>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	1d19      	adds	r1, r3, #4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	9103      	str	r1, [sp, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	bfbb      	ittet	lt
 8009076:	425b      	neglt	r3, r3
 8009078:	f042 0202 	orrlt.w	r2, r2, #2
 800907c:	9307      	strge	r3, [sp, #28]
 800907e:	9307      	strlt	r3, [sp, #28]
 8009080:	bfb8      	it	lt
 8009082:	9204      	strlt	r2, [sp, #16]
 8009084:	7823      	ldrb	r3, [r4, #0]
 8009086:	2b2e      	cmp	r3, #46	@ 0x2e
 8009088:	d10a      	bne.n	80090a0 <_svfiprintf_r+0x130>
 800908a:	7863      	ldrb	r3, [r4, #1]
 800908c:	2b2a      	cmp	r3, #42	@ 0x2a
 800908e:	d132      	bne.n	80090f6 <_svfiprintf_r+0x186>
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	9203      	str	r2, [sp, #12]
 8009098:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800909c:	3402      	adds	r4, #2
 800909e:	9305      	str	r3, [sp, #20]
 80090a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009164 <_svfiprintf_r+0x1f4>
 80090a4:	7821      	ldrb	r1, [r4, #0]
 80090a6:	2203      	movs	r2, #3
 80090a8:	4650      	mov	r0, sl
 80090aa:	f7f7 f891 	bl	80001d0 <memchr>
 80090ae:	b138      	cbz	r0, 80090c0 <_svfiprintf_r+0x150>
 80090b0:	9b04      	ldr	r3, [sp, #16]
 80090b2:	eba0 000a 	sub.w	r0, r0, sl
 80090b6:	2240      	movs	r2, #64	@ 0x40
 80090b8:	4082      	lsls	r2, r0
 80090ba:	4313      	orrs	r3, r2
 80090bc:	3401      	adds	r4, #1
 80090be:	9304      	str	r3, [sp, #16]
 80090c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c4:	4824      	ldr	r0, [pc, #144]	@ (8009158 <_svfiprintf_r+0x1e8>)
 80090c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090ca:	2206      	movs	r2, #6
 80090cc:	f7f7 f880 	bl	80001d0 <memchr>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d036      	beq.n	8009142 <_svfiprintf_r+0x1d2>
 80090d4:	4b21      	ldr	r3, [pc, #132]	@ (800915c <_svfiprintf_r+0x1ec>)
 80090d6:	bb1b      	cbnz	r3, 8009120 <_svfiprintf_r+0x1b0>
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	3307      	adds	r3, #7
 80090dc:	f023 0307 	bic.w	r3, r3, #7
 80090e0:	3308      	adds	r3, #8
 80090e2:	9303      	str	r3, [sp, #12]
 80090e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e6:	4433      	add	r3, r6
 80090e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ea:	e76a      	b.n	8008fc2 <_svfiprintf_r+0x52>
 80090ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80090f0:	460c      	mov	r4, r1
 80090f2:	2001      	movs	r0, #1
 80090f4:	e7a8      	b.n	8009048 <_svfiprintf_r+0xd8>
 80090f6:	2300      	movs	r3, #0
 80090f8:	3401      	adds	r4, #1
 80090fa:	9305      	str	r3, [sp, #20]
 80090fc:	4619      	mov	r1, r3
 80090fe:	f04f 0c0a 	mov.w	ip, #10
 8009102:	4620      	mov	r0, r4
 8009104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009108:	3a30      	subs	r2, #48	@ 0x30
 800910a:	2a09      	cmp	r2, #9
 800910c:	d903      	bls.n	8009116 <_svfiprintf_r+0x1a6>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0c6      	beq.n	80090a0 <_svfiprintf_r+0x130>
 8009112:	9105      	str	r1, [sp, #20]
 8009114:	e7c4      	b.n	80090a0 <_svfiprintf_r+0x130>
 8009116:	fb0c 2101 	mla	r1, ip, r1, r2
 800911a:	4604      	mov	r4, r0
 800911c:	2301      	movs	r3, #1
 800911e:	e7f0      	b.n	8009102 <_svfiprintf_r+0x192>
 8009120:	ab03      	add	r3, sp, #12
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	462a      	mov	r2, r5
 8009126:	4b0e      	ldr	r3, [pc, #56]	@ (8009160 <_svfiprintf_r+0x1f0>)
 8009128:	a904      	add	r1, sp, #16
 800912a:	4638      	mov	r0, r7
 800912c:	f7fe fb48 	bl	80077c0 <_printf_float>
 8009130:	1c42      	adds	r2, r0, #1
 8009132:	4606      	mov	r6, r0
 8009134:	d1d6      	bne.n	80090e4 <_svfiprintf_r+0x174>
 8009136:	89ab      	ldrh	r3, [r5, #12]
 8009138:	065b      	lsls	r3, r3, #25
 800913a:	f53f af2d 	bmi.w	8008f98 <_svfiprintf_r+0x28>
 800913e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009140:	e72c      	b.n	8008f9c <_svfiprintf_r+0x2c>
 8009142:	ab03      	add	r3, sp, #12
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	462a      	mov	r2, r5
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <_svfiprintf_r+0x1f0>)
 800914a:	a904      	add	r1, sp, #16
 800914c:	4638      	mov	r0, r7
 800914e:	f7fe fdcf 	bl	8007cf0 <_printf_i>
 8009152:	e7ed      	b.n	8009130 <_svfiprintf_r+0x1c0>
 8009154:	0800b529 	.word	0x0800b529
 8009158:	0800b533 	.word	0x0800b533
 800915c:	080077c1 	.word	0x080077c1
 8009160:	08008eb9 	.word	0x08008eb9
 8009164:	0800b52f 	.word	0x0800b52f

08009168 <__sfputc_r>:
 8009168:	6893      	ldr	r3, [r2, #8]
 800916a:	3b01      	subs	r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	b410      	push	{r4}
 8009170:	6093      	str	r3, [r2, #8]
 8009172:	da08      	bge.n	8009186 <__sfputc_r+0x1e>
 8009174:	6994      	ldr	r4, [r2, #24]
 8009176:	42a3      	cmp	r3, r4
 8009178:	db01      	blt.n	800917e <__sfputc_r+0x16>
 800917a:	290a      	cmp	r1, #10
 800917c:	d103      	bne.n	8009186 <__sfputc_r+0x1e>
 800917e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009182:	f000 be88 	b.w	8009e96 <__swbuf_r>
 8009186:	6813      	ldr	r3, [r2, #0]
 8009188:	1c58      	adds	r0, r3, #1
 800918a:	6010      	str	r0, [r2, #0]
 800918c:	7019      	strb	r1, [r3, #0]
 800918e:	4608      	mov	r0, r1
 8009190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009194:	4770      	bx	lr

08009196 <__sfputs_r>:
 8009196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009198:	4606      	mov	r6, r0
 800919a:	460f      	mov	r7, r1
 800919c:	4614      	mov	r4, r2
 800919e:	18d5      	adds	r5, r2, r3
 80091a0:	42ac      	cmp	r4, r5
 80091a2:	d101      	bne.n	80091a8 <__sfputs_r+0x12>
 80091a4:	2000      	movs	r0, #0
 80091a6:	e007      	b.n	80091b8 <__sfputs_r+0x22>
 80091a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ac:	463a      	mov	r2, r7
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7ff ffda 	bl	8009168 <__sfputc_r>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d1f3      	bne.n	80091a0 <__sfputs_r+0xa>
 80091b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091bc <_vfiprintf_r>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	460d      	mov	r5, r1
 80091c2:	b09d      	sub	sp, #116	@ 0x74
 80091c4:	4614      	mov	r4, r2
 80091c6:	4698      	mov	r8, r3
 80091c8:	4606      	mov	r6, r0
 80091ca:	b118      	cbz	r0, 80091d4 <_vfiprintf_r+0x18>
 80091cc:	6a03      	ldr	r3, [r0, #32]
 80091ce:	b90b      	cbnz	r3, 80091d4 <_vfiprintf_r+0x18>
 80091d0:	f7fe ff6e 	bl	80080b0 <__sinit>
 80091d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d6:	07d9      	lsls	r1, r3, #31
 80091d8:	d405      	bmi.n	80091e6 <_vfiprintf_r+0x2a>
 80091da:	89ab      	ldrh	r3, [r5, #12]
 80091dc:	059a      	lsls	r2, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_vfiprintf_r+0x2a>
 80091e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091e2:	f7fe fffe 	bl	80081e2 <__retarget_lock_acquire_recursive>
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	071b      	lsls	r3, r3, #28
 80091ea:	d501      	bpl.n	80091f0 <_vfiprintf_r+0x34>
 80091ec:	692b      	ldr	r3, [r5, #16]
 80091ee:	b99b      	cbnz	r3, 8009218 <_vfiprintf_r+0x5c>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f000 fe8e 	bl	8009f14 <__swsetup_r>
 80091f8:	b170      	cbz	r0, 8009218 <_vfiprintf_r+0x5c>
 80091fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091fc:	07dc      	lsls	r4, r3, #31
 80091fe:	d504      	bpl.n	800920a <_vfiprintf_r+0x4e>
 8009200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009204:	b01d      	add	sp, #116	@ 0x74
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	89ab      	ldrh	r3, [r5, #12]
 800920c:	0598      	lsls	r0, r3, #22
 800920e:	d4f7      	bmi.n	8009200 <_vfiprintf_r+0x44>
 8009210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009212:	f7fe ffe7 	bl	80081e4 <__retarget_lock_release_recursive>
 8009216:	e7f3      	b.n	8009200 <_vfiprintf_r+0x44>
 8009218:	2300      	movs	r3, #0
 800921a:	9309      	str	r3, [sp, #36]	@ 0x24
 800921c:	2320      	movs	r3, #32
 800921e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009222:	f8cd 800c 	str.w	r8, [sp, #12]
 8009226:	2330      	movs	r3, #48	@ 0x30
 8009228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093d8 <_vfiprintf_r+0x21c>
 800922c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009230:	f04f 0901 	mov.w	r9, #1
 8009234:	4623      	mov	r3, r4
 8009236:	469a      	mov	sl, r3
 8009238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800923c:	b10a      	cbz	r2, 8009242 <_vfiprintf_r+0x86>
 800923e:	2a25      	cmp	r2, #37	@ 0x25
 8009240:	d1f9      	bne.n	8009236 <_vfiprintf_r+0x7a>
 8009242:	ebba 0b04 	subs.w	fp, sl, r4
 8009246:	d00b      	beq.n	8009260 <_vfiprintf_r+0xa4>
 8009248:	465b      	mov	r3, fp
 800924a:	4622      	mov	r2, r4
 800924c:	4629      	mov	r1, r5
 800924e:	4630      	mov	r0, r6
 8009250:	f7ff ffa1 	bl	8009196 <__sfputs_r>
 8009254:	3001      	adds	r0, #1
 8009256:	f000 80a7 	beq.w	80093a8 <_vfiprintf_r+0x1ec>
 800925a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800925c:	445a      	add	r2, fp
 800925e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009260:	f89a 3000 	ldrb.w	r3, [sl]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 809f 	beq.w	80093a8 <_vfiprintf_r+0x1ec>
 800926a:	2300      	movs	r3, #0
 800926c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009274:	f10a 0a01 	add.w	sl, sl, #1
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009280:	931a      	str	r3, [sp, #104]	@ 0x68
 8009282:	4654      	mov	r4, sl
 8009284:	2205      	movs	r2, #5
 8009286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928a:	4853      	ldr	r0, [pc, #332]	@ (80093d8 <_vfiprintf_r+0x21c>)
 800928c:	f7f6 ffa0 	bl	80001d0 <memchr>
 8009290:	9a04      	ldr	r2, [sp, #16]
 8009292:	b9d8      	cbnz	r0, 80092cc <_vfiprintf_r+0x110>
 8009294:	06d1      	lsls	r1, r2, #27
 8009296:	bf44      	itt	mi
 8009298:	2320      	movmi	r3, #32
 800929a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929e:	0713      	lsls	r3, r2, #28
 80092a0:	bf44      	itt	mi
 80092a2:	232b      	movmi	r3, #43	@ 0x2b
 80092a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092a8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ae:	d015      	beq.n	80092dc <_vfiprintf_r+0x120>
 80092b0:	9a07      	ldr	r2, [sp, #28]
 80092b2:	4654      	mov	r4, sl
 80092b4:	2000      	movs	r0, #0
 80092b6:	f04f 0c0a 	mov.w	ip, #10
 80092ba:	4621      	mov	r1, r4
 80092bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092c0:	3b30      	subs	r3, #48	@ 0x30
 80092c2:	2b09      	cmp	r3, #9
 80092c4:	d94b      	bls.n	800935e <_vfiprintf_r+0x1a2>
 80092c6:	b1b0      	cbz	r0, 80092f6 <_vfiprintf_r+0x13a>
 80092c8:	9207      	str	r2, [sp, #28]
 80092ca:	e014      	b.n	80092f6 <_vfiprintf_r+0x13a>
 80092cc:	eba0 0308 	sub.w	r3, r0, r8
 80092d0:	fa09 f303 	lsl.w	r3, r9, r3
 80092d4:	4313      	orrs	r3, r2
 80092d6:	9304      	str	r3, [sp, #16]
 80092d8:	46a2      	mov	sl, r4
 80092da:	e7d2      	b.n	8009282 <_vfiprintf_r+0xc6>
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	1d19      	adds	r1, r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	9103      	str	r1, [sp, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfbb      	ittet	lt
 80092e8:	425b      	neglt	r3, r3
 80092ea:	f042 0202 	orrlt.w	r2, r2, #2
 80092ee:	9307      	strge	r3, [sp, #28]
 80092f0:	9307      	strlt	r3, [sp, #28]
 80092f2:	bfb8      	it	lt
 80092f4:	9204      	strlt	r2, [sp, #16]
 80092f6:	7823      	ldrb	r3, [r4, #0]
 80092f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80092fa:	d10a      	bne.n	8009312 <_vfiprintf_r+0x156>
 80092fc:	7863      	ldrb	r3, [r4, #1]
 80092fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009300:	d132      	bne.n	8009368 <_vfiprintf_r+0x1ac>
 8009302:	9b03      	ldr	r3, [sp, #12]
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	9203      	str	r2, [sp, #12]
 800930a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800930e:	3402      	adds	r4, #2
 8009310:	9305      	str	r3, [sp, #20]
 8009312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093e8 <_vfiprintf_r+0x22c>
 8009316:	7821      	ldrb	r1, [r4, #0]
 8009318:	2203      	movs	r2, #3
 800931a:	4650      	mov	r0, sl
 800931c:	f7f6 ff58 	bl	80001d0 <memchr>
 8009320:	b138      	cbz	r0, 8009332 <_vfiprintf_r+0x176>
 8009322:	9b04      	ldr	r3, [sp, #16]
 8009324:	eba0 000a 	sub.w	r0, r0, sl
 8009328:	2240      	movs	r2, #64	@ 0x40
 800932a:	4082      	lsls	r2, r0
 800932c:	4313      	orrs	r3, r2
 800932e:	3401      	adds	r4, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009336:	4829      	ldr	r0, [pc, #164]	@ (80093dc <_vfiprintf_r+0x220>)
 8009338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800933c:	2206      	movs	r2, #6
 800933e:	f7f6 ff47 	bl	80001d0 <memchr>
 8009342:	2800      	cmp	r0, #0
 8009344:	d03f      	beq.n	80093c6 <_vfiprintf_r+0x20a>
 8009346:	4b26      	ldr	r3, [pc, #152]	@ (80093e0 <_vfiprintf_r+0x224>)
 8009348:	bb1b      	cbnz	r3, 8009392 <_vfiprintf_r+0x1d6>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	3307      	adds	r3, #7
 800934e:	f023 0307 	bic.w	r3, r3, #7
 8009352:	3308      	adds	r3, #8
 8009354:	9303      	str	r3, [sp, #12]
 8009356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009358:	443b      	add	r3, r7
 800935a:	9309      	str	r3, [sp, #36]	@ 0x24
 800935c:	e76a      	b.n	8009234 <_vfiprintf_r+0x78>
 800935e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009362:	460c      	mov	r4, r1
 8009364:	2001      	movs	r0, #1
 8009366:	e7a8      	b.n	80092ba <_vfiprintf_r+0xfe>
 8009368:	2300      	movs	r3, #0
 800936a:	3401      	adds	r4, #1
 800936c:	9305      	str	r3, [sp, #20]
 800936e:	4619      	mov	r1, r3
 8009370:	f04f 0c0a 	mov.w	ip, #10
 8009374:	4620      	mov	r0, r4
 8009376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937a:	3a30      	subs	r2, #48	@ 0x30
 800937c:	2a09      	cmp	r2, #9
 800937e:	d903      	bls.n	8009388 <_vfiprintf_r+0x1cc>
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0c6      	beq.n	8009312 <_vfiprintf_r+0x156>
 8009384:	9105      	str	r1, [sp, #20]
 8009386:	e7c4      	b.n	8009312 <_vfiprintf_r+0x156>
 8009388:	fb0c 2101 	mla	r1, ip, r1, r2
 800938c:	4604      	mov	r4, r0
 800938e:	2301      	movs	r3, #1
 8009390:	e7f0      	b.n	8009374 <_vfiprintf_r+0x1b8>
 8009392:	ab03      	add	r3, sp, #12
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	462a      	mov	r2, r5
 8009398:	4b12      	ldr	r3, [pc, #72]	@ (80093e4 <_vfiprintf_r+0x228>)
 800939a:	a904      	add	r1, sp, #16
 800939c:	4630      	mov	r0, r6
 800939e:	f7fe fa0f 	bl	80077c0 <_printf_float>
 80093a2:	4607      	mov	r7, r0
 80093a4:	1c78      	adds	r0, r7, #1
 80093a6:	d1d6      	bne.n	8009356 <_vfiprintf_r+0x19a>
 80093a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093aa:	07d9      	lsls	r1, r3, #31
 80093ac:	d405      	bmi.n	80093ba <_vfiprintf_r+0x1fe>
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	059a      	lsls	r2, r3, #22
 80093b2:	d402      	bmi.n	80093ba <_vfiprintf_r+0x1fe>
 80093b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b6:	f7fe ff15 	bl	80081e4 <__retarget_lock_release_recursive>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	065b      	lsls	r3, r3, #25
 80093be:	f53f af1f 	bmi.w	8009200 <_vfiprintf_r+0x44>
 80093c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093c4:	e71e      	b.n	8009204 <_vfiprintf_r+0x48>
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b05      	ldr	r3, [pc, #20]	@ (80093e4 <_vfiprintf_r+0x228>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7fe fc8d 	bl	8007cf0 <_printf_i>
 80093d6:	e7e4      	b.n	80093a2 <_vfiprintf_r+0x1e6>
 80093d8:	0800b529 	.word	0x0800b529
 80093dc:	0800b533 	.word	0x0800b533
 80093e0:	080077c1 	.word	0x080077c1
 80093e4:	08009197 	.word	0x08009197
 80093e8:	0800b52f 	.word	0x0800b52f

080093ec <malloc>:
 80093ec:	4b02      	ldr	r3, [pc, #8]	@ (80093f8 <malloc+0xc>)
 80093ee:	4601      	mov	r1, r0
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	f000 b825 	b.w	8009440 <_malloc_r>
 80093f6:	bf00      	nop
 80093f8:	20000024 	.word	0x20000024

080093fc <sbrk_aligned>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	4e0f      	ldr	r6, [pc, #60]	@ (800943c <sbrk_aligned+0x40>)
 8009400:	460c      	mov	r4, r1
 8009402:	6831      	ldr	r1, [r6, #0]
 8009404:	4605      	mov	r5, r0
 8009406:	b911      	cbnz	r1, 800940e <sbrk_aligned+0x12>
 8009408:	f000 fed6 	bl	800a1b8 <_sbrk_r>
 800940c:	6030      	str	r0, [r6, #0]
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f000 fed1 	bl	800a1b8 <_sbrk_r>
 8009416:	1c43      	adds	r3, r0, #1
 8009418:	d103      	bne.n	8009422 <sbrk_aligned+0x26>
 800941a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800941e:	4620      	mov	r0, r4
 8009420:	bd70      	pop	{r4, r5, r6, pc}
 8009422:	1cc4      	adds	r4, r0, #3
 8009424:	f024 0403 	bic.w	r4, r4, #3
 8009428:	42a0      	cmp	r0, r4
 800942a:	d0f8      	beq.n	800941e <sbrk_aligned+0x22>
 800942c:	1a21      	subs	r1, r4, r0
 800942e:	4628      	mov	r0, r5
 8009430:	f000 fec2 	bl	800a1b8 <_sbrk_r>
 8009434:	3001      	adds	r0, #1
 8009436:	d1f2      	bne.n	800941e <sbrk_aligned+0x22>
 8009438:	e7ef      	b.n	800941a <sbrk_aligned+0x1e>
 800943a:	bf00      	nop
 800943c:	20000aa8 	.word	0x20000aa8

08009440 <_malloc_r>:
 8009440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009444:	1ccd      	adds	r5, r1, #3
 8009446:	f025 0503 	bic.w	r5, r5, #3
 800944a:	3508      	adds	r5, #8
 800944c:	2d0c      	cmp	r5, #12
 800944e:	bf38      	it	cc
 8009450:	250c      	movcc	r5, #12
 8009452:	2d00      	cmp	r5, #0
 8009454:	4606      	mov	r6, r0
 8009456:	db01      	blt.n	800945c <_malloc_r+0x1c>
 8009458:	42a9      	cmp	r1, r5
 800945a:	d904      	bls.n	8009466 <_malloc_r+0x26>
 800945c:	230c      	movs	r3, #12
 800945e:	6033      	str	r3, [r6, #0]
 8009460:	2000      	movs	r0, #0
 8009462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009466:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800953c <_malloc_r+0xfc>
 800946a:	f000 f915 	bl	8009698 <__malloc_lock>
 800946e:	f8d8 3000 	ldr.w	r3, [r8]
 8009472:	461c      	mov	r4, r3
 8009474:	bb44      	cbnz	r4, 80094c8 <_malloc_r+0x88>
 8009476:	4629      	mov	r1, r5
 8009478:	4630      	mov	r0, r6
 800947a:	f7ff ffbf 	bl	80093fc <sbrk_aligned>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	4604      	mov	r4, r0
 8009482:	d158      	bne.n	8009536 <_malloc_r+0xf6>
 8009484:	f8d8 4000 	ldr.w	r4, [r8]
 8009488:	4627      	mov	r7, r4
 800948a:	2f00      	cmp	r7, #0
 800948c:	d143      	bne.n	8009516 <_malloc_r+0xd6>
 800948e:	2c00      	cmp	r4, #0
 8009490:	d04b      	beq.n	800952a <_malloc_r+0xea>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	4639      	mov	r1, r7
 8009496:	4630      	mov	r0, r6
 8009498:	eb04 0903 	add.w	r9, r4, r3
 800949c:	f000 fe8c 	bl	800a1b8 <_sbrk_r>
 80094a0:	4581      	cmp	r9, r0
 80094a2:	d142      	bne.n	800952a <_malloc_r+0xea>
 80094a4:	6821      	ldr	r1, [r4, #0]
 80094a6:	1a6d      	subs	r5, r5, r1
 80094a8:	4629      	mov	r1, r5
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff ffa6 	bl	80093fc <sbrk_aligned>
 80094b0:	3001      	adds	r0, #1
 80094b2:	d03a      	beq.n	800952a <_malloc_r+0xea>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	442b      	add	r3, r5
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	f8d8 3000 	ldr.w	r3, [r8]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	bb62      	cbnz	r2, 800951c <_malloc_r+0xdc>
 80094c2:	f8c8 7000 	str.w	r7, [r8]
 80094c6:	e00f      	b.n	80094e8 <_malloc_r+0xa8>
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	1b52      	subs	r2, r2, r5
 80094cc:	d420      	bmi.n	8009510 <_malloc_r+0xd0>
 80094ce:	2a0b      	cmp	r2, #11
 80094d0:	d917      	bls.n	8009502 <_malloc_r+0xc2>
 80094d2:	1961      	adds	r1, r4, r5
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	6025      	str	r5, [r4, #0]
 80094d8:	bf18      	it	ne
 80094da:	6059      	strne	r1, [r3, #4]
 80094dc:	6863      	ldr	r3, [r4, #4]
 80094de:	bf08      	it	eq
 80094e0:	f8c8 1000 	streq.w	r1, [r8]
 80094e4:	5162      	str	r2, [r4, r5]
 80094e6:	604b      	str	r3, [r1, #4]
 80094e8:	4630      	mov	r0, r6
 80094ea:	f000 f8db 	bl	80096a4 <__malloc_unlock>
 80094ee:	f104 000b 	add.w	r0, r4, #11
 80094f2:	1d23      	adds	r3, r4, #4
 80094f4:	f020 0007 	bic.w	r0, r0, #7
 80094f8:	1ac2      	subs	r2, r0, r3
 80094fa:	bf1c      	itt	ne
 80094fc:	1a1b      	subne	r3, r3, r0
 80094fe:	50a3      	strne	r3, [r4, r2]
 8009500:	e7af      	b.n	8009462 <_malloc_r+0x22>
 8009502:	6862      	ldr	r2, [r4, #4]
 8009504:	42a3      	cmp	r3, r4
 8009506:	bf0c      	ite	eq
 8009508:	f8c8 2000 	streq.w	r2, [r8]
 800950c:	605a      	strne	r2, [r3, #4]
 800950e:	e7eb      	b.n	80094e8 <_malloc_r+0xa8>
 8009510:	4623      	mov	r3, r4
 8009512:	6864      	ldr	r4, [r4, #4]
 8009514:	e7ae      	b.n	8009474 <_malloc_r+0x34>
 8009516:	463c      	mov	r4, r7
 8009518:	687f      	ldr	r7, [r7, #4]
 800951a:	e7b6      	b.n	800948a <_malloc_r+0x4a>
 800951c:	461a      	mov	r2, r3
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	42a3      	cmp	r3, r4
 8009522:	d1fb      	bne.n	800951c <_malloc_r+0xdc>
 8009524:	2300      	movs	r3, #0
 8009526:	6053      	str	r3, [r2, #4]
 8009528:	e7de      	b.n	80094e8 <_malloc_r+0xa8>
 800952a:	230c      	movs	r3, #12
 800952c:	6033      	str	r3, [r6, #0]
 800952e:	4630      	mov	r0, r6
 8009530:	f000 f8b8 	bl	80096a4 <__malloc_unlock>
 8009534:	e794      	b.n	8009460 <_malloc_r+0x20>
 8009536:	6005      	str	r5, [r0, #0]
 8009538:	e7d6      	b.n	80094e8 <_malloc_r+0xa8>
 800953a:	bf00      	nop
 800953c:	20000aac 	.word	0x20000aac

08009540 <__sflush_r>:
 8009540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009548:	0716      	lsls	r6, r2, #28
 800954a:	4605      	mov	r5, r0
 800954c:	460c      	mov	r4, r1
 800954e:	d454      	bmi.n	80095fa <__sflush_r+0xba>
 8009550:	684b      	ldr	r3, [r1, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	dc02      	bgt.n	800955c <__sflush_r+0x1c>
 8009556:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009558:	2b00      	cmp	r3, #0
 800955a:	dd48      	ble.n	80095ee <__sflush_r+0xae>
 800955c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800955e:	2e00      	cmp	r6, #0
 8009560:	d045      	beq.n	80095ee <__sflush_r+0xae>
 8009562:	2300      	movs	r3, #0
 8009564:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009568:	682f      	ldr	r7, [r5, #0]
 800956a:	6a21      	ldr	r1, [r4, #32]
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	d030      	beq.n	80095d2 <__sflush_r+0x92>
 8009570:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	0759      	lsls	r1, r3, #29
 8009576:	d505      	bpl.n	8009584 <__sflush_r+0x44>
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	1ad2      	subs	r2, r2, r3
 800957c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800957e:	b10b      	cbz	r3, 8009584 <__sflush_r+0x44>
 8009580:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009582:	1ad2      	subs	r2, r2, r3
 8009584:	2300      	movs	r3, #0
 8009586:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009588:	6a21      	ldr	r1, [r4, #32]
 800958a:	4628      	mov	r0, r5
 800958c:	47b0      	blx	r6
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	d106      	bne.n	80095a2 <__sflush_r+0x62>
 8009594:	6829      	ldr	r1, [r5, #0]
 8009596:	291d      	cmp	r1, #29
 8009598:	d82b      	bhi.n	80095f2 <__sflush_r+0xb2>
 800959a:	4a2a      	ldr	r2, [pc, #168]	@ (8009644 <__sflush_r+0x104>)
 800959c:	410a      	asrs	r2, r1
 800959e:	07d6      	lsls	r6, r2, #31
 80095a0:	d427      	bmi.n	80095f2 <__sflush_r+0xb2>
 80095a2:	2200      	movs	r2, #0
 80095a4:	6062      	str	r2, [r4, #4]
 80095a6:	04d9      	lsls	r1, r3, #19
 80095a8:	6922      	ldr	r2, [r4, #16]
 80095aa:	6022      	str	r2, [r4, #0]
 80095ac:	d504      	bpl.n	80095b8 <__sflush_r+0x78>
 80095ae:	1c42      	adds	r2, r0, #1
 80095b0:	d101      	bne.n	80095b6 <__sflush_r+0x76>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b903      	cbnz	r3, 80095b8 <__sflush_r+0x78>
 80095b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80095b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095ba:	602f      	str	r7, [r5, #0]
 80095bc:	b1b9      	cbz	r1, 80095ee <__sflush_r+0xae>
 80095be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095c2:	4299      	cmp	r1, r3
 80095c4:	d002      	beq.n	80095cc <__sflush_r+0x8c>
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 fe2c 	bl	800a224 <_free_r>
 80095cc:	2300      	movs	r3, #0
 80095ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80095d0:	e00d      	b.n	80095ee <__sflush_r+0xae>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b0      	blx	r6
 80095d8:	4602      	mov	r2, r0
 80095da:	1c50      	adds	r0, r2, #1
 80095dc:	d1c9      	bne.n	8009572 <__sflush_r+0x32>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d0c6      	beq.n	8009572 <__sflush_r+0x32>
 80095e4:	2b1d      	cmp	r3, #29
 80095e6:	d001      	beq.n	80095ec <__sflush_r+0xac>
 80095e8:	2b16      	cmp	r3, #22
 80095ea:	d11e      	bne.n	800962a <__sflush_r+0xea>
 80095ec:	602f      	str	r7, [r5, #0]
 80095ee:	2000      	movs	r0, #0
 80095f0:	e022      	b.n	8009638 <__sflush_r+0xf8>
 80095f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095f6:	b21b      	sxth	r3, r3
 80095f8:	e01b      	b.n	8009632 <__sflush_r+0xf2>
 80095fa:	690f      	ldr	r7, [r1, #16]
 80095fc:	2f00      	cmp	r7, #0
 80095fe:	d0f6      	beq.n	80095ee <__sflush_r+0xae>
 8009600:	0793      	lsls	r3, r2, #30
 8009602:	680e      	ldr	r6, [r1, #0]
 8009604:	bf08      	it	eq
 8009606:	694b      	ldreq	r3, [r1, #20]
 8009608:	600f      	str	r7, [r1, #0]
 800960a:	bf18      	it	ne
 800960c:	2300      	movne	r3, #0
 800960e:	eba6 0807 	sub.w	r8, r6, r7
 8009612:	608b      	str	r3, [r1, #8]
 8009614:	f1b8 0f00 	cmp.w	r8, #0
 8009618:	dde9      	ble.n	80095ee <__sflush_r+0xae>
 800961a:	6a21      	ldr	r1, [r4, #32]
 800961c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800961e:	4643      	mov	r3, r8
 8009620:	463a      	mov	r2, r7
 8009622:	4628      	mov	r0, r5
 8009624:	47b0      	blx	r6
 8009626:	2800      	cmp	r0, #0
 8009628:	dc08      	bgt.n	800963c <__sflush_r+0xfc>
 800962a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800962e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800963c:	4407      	add	r7, r0
 800963e:	eba8 0800 	sub.w	r8, r8, r0
 8009642:	e7e7      	b.n	8009614 <__sflush_r+0xd4>
 8009644:	dfbffffe 	.word	0xdfbffffe

08009648 <_fflush_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	4605      	mov	r5, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b913      	cbnz	r3, 8009658 <_fflush_r+0x10>
 8009652:	2500      	movs	r5, #0
 8009654:	4628      	mov	r0, r5
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	b118      	cbz	r0, 8009662 <_fflush_r+0x1a>
 800965a:	6a03      	ldr	r3, [r0, #32]
 800965c:	b90b      	cbnz	r3, 8009662 <_fflush_r+0x1a>
 800965e:	f7fe fd27 	bl	80080b0 <__sinit>
 8009662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0f3      	beq.n	8009652 <_fflush_r+0xa>
 800966a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800966c:	07d0      	lsls	r0, r2, #31
 800966e:	d404      	bmi.n	800967a <_fflush_r+0x32>
 8009670:	0599      	lsls	r1, r3, #22
 8009672:	d402      	bmi.n	800967a <_fflush_r+0x32>
 8009674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009676:	f7fe fdb4 	bl	80081e2 <__retarget_lock_acquire_recursive>
 800967a:	4628      	mov	r0, r5
 800967c:	4621      	mov	r1, r4
 800967e:	f7ff ff5f 	bl	8009540 <__sflush_r>
 8009682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009684:	07da      	lsls	r2, r3, #31
 8009686:	4605      	mov	r5, r0
 8009688:	d4e4      	bmi.n	8009654 <_fflush_r+0xc>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	059b      	lsls	r3, r3, #22
 800968e:	d4e1      	bmi.n	8009654 <_fflush_r+0xc>
 8009690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009692:	f7fe fda7 	bl	80081e4 <__retarget_lock_release_recursive>
 8009696:	e7dd      	b.n	8009654 <_fflush_r+0xc>

08009698 <__malloc_lock>:
 8009698:	4801      	ldr	r0, [pc, #4]	@ (80096a0 <__malloc_lock+0x8>)
 800969a:	f7fe bda2 	b.w	80081e2 <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	20000aa4 	.word	0x20000aa4

080096a4 <__malloc_unlock>:
 80096a4:	4801      	ldr	r0, [pc, #4]	@ (80096ac <__malloc_unlock+0x8>)
 80096a6:	f7fe bd9d 	b.w	80081e4 <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	20000aa4 	.word	0x20000aa4

080096b0 <_Balloc>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	69c6      	ldr	r6, [r0, #28]
 80096b4:	4604      	mov	r4, r0
 80096b6:	460d      	mov	r5, r1
 80096b8:	b976      	cbnz	r6, 80096d8 <_Balloc+0x28>
 80096ba:	2010      	movs	r0, #16
 80096bc:	f7ff fe96 	bl	80093ec <malloc>
 80096c0:	4602      	mov	r2, r0
 80096c2:	61e0      	str	r0, [r4, #28]
 80096c4:	b920      	cbnz	r0, 80096d0 <_Balloc+0x20>
 80096c6:	4b18      	ldr	r3, [pc, #96]	@ (8009728 <_Balloc+0x78>)
 80096c8:	4818      	ldr	r0, [pc, #96]	@ (800972c <_Balloc+0x7c>)
 80096ca:	216b      	movs	r1, #107	@ 0x6b
 80096cc:	f7fd ffba 	bl	8007644 <__assert_func>
 80096d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096d4:	6006      	str	r6, [r0, #0]
 80096d6:	60c6      	str	r6, [r0, #12]
 80096d8:	69e6      	ldr	r6, [r4, #28]
 80096da:	68f3      	ldr	r3, [r6, #12]
 80096dc:	b183      	cbz	r3, 8009700 <_Balloc+0x50>
 80096de:	69e3      	ldr	r3, [r4, #28]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096e6:	b9b8      	cbnz	r0, 8009718 <_Balloc+0x68>
 80096e8:	2101      	movs	r1, #1
 80096ea:	fa01 f605 	lsl.w	r6, r1, r5
 80096ee:	1d72      	adds	r2, r6, #5
 80096f0:	0092      	lsls	r2, r2, #2
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fd82 	bl	800a1fc <_calloc_r>
 80096f8:	b160      	cbz	r0, 8009714 <_Balloc+0x64>
 80096fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096fe:	e00e      	b.n	800971e <_Balloc+0x6e>
 8009700:	2221      	movs	r2, #33	@ 0x21
 8009702:	2104      	movs	r1, #4
 8009704:	4620      	mov	r0, r4
 8009706:	f000 fd79 	bl	800a1fc <_calloc_r>
 800970a:	69e3      	ldr	r3, [r4, #28]
 800970c:	60f0      	str	r0, [r6, #12]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e4      	bne.n	80096de <_Balloc+0x2e>
 8009714:	2000      	movs	r0, #0
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	6802      	ldr	r2, [r0, #0]
 800971a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800971e:	2300      	movs	r3, #0
 8009720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009724:	e7f7      	b.n	8009716 <_Balloc+0x66>
 8009726:	bf00      	nop
 8009728:	0800b4a9 	.word	0x0800b4a9
 800972c:	0800b53a 	.word	0x0800b53a

08009730 <_Bfree>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	69c6      	ldr	r6, [r0, #28]
 8009734:	4605      	mov	r5, r0
 8009736:	460c      	mov	r4, r1
 8009738:	b976      	cbnz	r6, 8009758 <_Bfree+0x28>
 800973a:	2010      	movs	r0, #16
 800973c:	f7ff fe56 	bl	80093ec <malloc>
 8009740:	4602      	mov	r2, r0
 8009742:	61e8      	str	r0, [r5, #28]
 8009744:	b920      	cbnz	r0, 8009750 <_Bfree+0x20>
 8009746:	4b09      	ldr	r3, [pc, #36]	@ (800976c <_Bfree+0x3c>)
 8009748:	4809      	ldr	r0, [pc, #36]	@ (8009770 <_Bfree+0x40>)
 800974a:	218f      	movs	r1, #143	@ 0x8f
 800974c:	f7fd ff7a 	bl	8007644 <__assert_func>
 8009750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009754:	6006      	str	r6, [r0, #0]
 8009756:	60c6      	str	r6, [r0, #12]
 8009758:	b13c      	cbz	r4, 800976a <_Bfree+0x3a>
 800975a:	69eb      	ldr	r3, [r5, #28]
 800975c:	6862      	ldr	r2, [r4, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009764:	6021      	str	r1, [r4, #0]
 8009766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	0800b4a9 	.word	0x0800b4a9
 8009770:	0800b53a 	.word	0x0800b53a

08009774 <__multadd>:
 8009774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	690d      	ldr	r5, [r1, #16]
 800977a:	4607      	mov	r7, r0
 800977c:	460c      	mov	r4, r1
 800977e:	461e      	mov	r6, r3
 8009780:	f101 0c14 	add.w	ip, r1, #20
 8009784:	2000      	movs	r0, #0
 8009786:	f8dc 3000 	ldr.w	r3, [ip]
 800978a:	b299      	uxth	r1, r3
 800978c:	fb02 6101 	mla	r1, r2, r1, r6
 8009790:	0c1e      	lsrs	r6, r3, #16
 8009792:	0c0b      	lsrs	r3, r1, #16
 8009794:	fb02 3306 	mla	r3, r2, r6, r3
 8009798:	b289      	uxth	r1, r1
 800979a:	3001      	adds	r0, #1
 800979c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097a0:	4285      	cmp	r5, r0
 80097a2:	f84c 1b04 	str.w	r1, [ip], #4
 80097a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097aa:	dcec      	bgt.n	8009786 <__multadd+0x12>
 80097ac:	b30e      	cbz	r6, 80097f2 <__multadd+0x7e>
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	42ab      	cmp	r3, r5
 80097b2:	dc19      	bgt.n	80097e8 <__multadd+0x74>
 80097b4:	6861      	ldr	r1, [r4, #4]
 80097b6:	4638      	mov	r0, r7
 80097b8:	3101      	adds	r1, #1
 80097ba:	f7ff ff79 	bl	80096b0 <_Balloc>
 80097be:	4680      	mov	r8, r0
 80097c0:	b928      	cbnz	r0, 80097ce <__multadd+0x5a>
 80097c2:	4602      	mov	r2, r0
 80097c4:	4b0c      	ldr	r3, [pc, #48]	@ (80097f8 <__multadd+0x84>)
 80097c6:	480d      	ldr	r0, [pc, #52]	@ (80097fc <__multadd+0x88>)
 80097c8:	21ba      	movs	r1, #186	@ 0xba
 80097ca:	f7fd ff3b 	bl	8007644 <__assert_func>
 80097ce:	6922      	ldr	r2, [r4, #16]
 80097d0:	3202      	adds	r2, #2
 80097d2:	f104 010c 	add.w	r1, r4, #12
 80097d6:	0092      	lsls	r2, r2, #2
 80097d8:	300c      	adds	r0, #12
 80097da:	f7fe fd04 	bl	80081e6 <memcpy>
 80097de:	4621      	mov	r1, r4
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ffa5 	bl	8009730 <_Bfree>
 80097e6:	4644      	mov	r4, r8
 80097e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097ec:	3501      	adds	r5, #1
 80097ee:	615e      	str	r6, [r3, #20]
 80097f0:	6125      	str	r5, [r4, #16]
 80097f2:	4620      	mov	r0, r4
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	0800b518 	.word	0x0800b518
 80097fc:	0800b53a 	.word	0x0800b53a

08009800 <__hi0bits>:
 8009800:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009804:	4603      	mov	r3, r0
 8009806:	bf36      	itet	cc
 8009808:	0403      	lslcc	r3, r0, #16
 800980a:	2000      	movcs	r0, #0
 800980c:	2010      	movcc	r0, #16
 800980e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009812:	bf3c      	itt	cc
 8009814:	021b      	lslcc	r3, r3, #8
 8009816:	3008      	addcc	r0, #8
 8009818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800981c:	bf3c      	itt	cc
 800981e:	011b      	lslcc	r3, r3, #4
 8009820:	3004      	addcc	r0, #4
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009826:	bf3c      	itt	cc
 8009828:	009b      	lslcc	r3, r3, #2
 800982a:	3002      	addcc	r0, #2
 800982c:	2b00      	cmp	r3, #0
 800982e:	db05      	blt.n	800983c <__hi0bits+0x3c>
 8009830:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009834:	f100 0001 	add.w	r0, r0, #1
 8009838:	bf08      	it	eq
 800983a:	2020      	moveq	r0, #32
 800983c:	4770      	bx	lr

0800983e <__lo0bits>:
 800983e:	6803      	ldr	r3, [r0, #0]
 8009840:	4602      	mov	r2, r0
 8009842:	f013 0007 	ands.w	r0, r3, #7
 8009846:	d00b      	beq.n	8009860 <__lo0bits+0x22>
 8009848:	07d9      	lsls	r1, r3, #31
 800984a:	d421      	bmi.n	8009890 <__lo0bits+0x52>
 800984c:	0798      	lsls	r0, r3, #30
 800984e:	bf49      	itett	mi
 8009850:	085b      	lsrmi	r3, r3, #1
 8009852:	089b      	lsrpl	r3, r3, #2
 8009854:	2001      	movmi	r0, #1
 8009856:	6013      	strmi	r3, [r2, #0]
 8009858:	bf5c      	itt	pl
 800985a:	6013      	strpl	r3, [r2, #0]
 800985c:	2002      	movpl	r0, #2
 800985e:	4770      	bx	lr
 8009860:	b299      	uxth	r1, r3
 8009862:	b909      	cbnz	r1, 8009868 <__lo0bits+0x2a>
 8009864:	0c1b      	lsrs	r3, r3, #16
 8009866:	2010      	movs	r0, #16
 8009868:	b2d9      	uxtb	r1, r3
 800986a:	b909      	cbnz	r1, 8009870 <__lo0bits+0x32>
 800986c:	3008      	adds	r0, #8
 800986e:	0a1b      	lsrs	r3, r3, #8
 8009870:	0719      	lsls	r1, r3, #28
 8009872:	bf04      	itt	eq
 8009874:	091b      	lsreq	r3, r3, #4
 8009876:	3004      	addeq	r0, #4
 8009878:	0799      	lsls	r1, r3, #30
 800987a:	bf04      	itt	eq
 800987c:	089b      	lsreq	r3, r3, #2
 800987e:	3002      	addeq	r0, #2
 8009880:	07d9      	lsls	r1, r3, #31
 8009882:	d403      	bmi.n	800988c <__lo0bits+0x4e>
 8009884:	085b      	lsrs	r3, r3, #1
 8009886:	f100 0001 	add.w	r0, r0, #1
 800988a:	d003      	beq.n	8009894 <__lo0bits+0x56>
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	4770      	bx	lr
 8009890:	2000      	movs	r0, #0
 8009892:	4770      	bx	lr
 8009894:	2020      	movs	r0, #32
 8009896:	4770      	bx	lr

08009898 <__i2b>:
 8009898:	b510      	push	{r4, lr}
 800989a:	460c      	mov	r4, r1
 800989c:	2101      	movs	r1, #1
 800989e:	f7ff ff07 	bl	80096b0 <_Balloc>
 80098a2:	4602      	mov	r2, r0
 80098a4:	b928      	cbnz	r0, 80098b2 <__i2b+0x1a>
 80098a6:	4b05      	ldr	r3, [pc, #20]	@ (80098bc <__i2b+0x24>)
 80098a8:	4805      	ldr	r0, [pc, #20]	@ (80098c0 <__i2b+0x28>)
 80098aa:	f240 1145 	movw	r1, #325	@ 0x145
 80098ae:	f7fd fec9 	bl	8007644 <__assert_func>
 80098b2:	2301      	movs	r3, #1
 80098b4:	6144      	str	r4, [r0, #20]
 80098b6:	6103      	str	r3, [r0, #16]
 80098b8:	bd10      	pop	{r4, pc}
 80098ba:	bf00      	nop
 80098bc:	0800b518 	.word	0x0800b518
 80098c0:	0800b53a 	.word	0x0800b53a

080098c4 <__multiply>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4614      	mov	r4, r2
 80098ca:	690a      	ldr	r2, [r1, #16]
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	bfa8      	it	ge
 80098d2:	4623      	movge	r3, r4
 80098d4:	460f      	mov	r7, r1
 80098d6:	bfa4      	itt	ge
 80098d8:	460c      	movge	r4, r1
 80098da:	461f      	movge	r7, r3
 80098dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	6861      	ldr	r1, [r4, #4]
 80098e8:	eb0a 0609 	add.w	r6, sl, r9
 80098ec:	42b3      	cmp	r3, r6
 80098ee:	b085      	sub	sp, #20
 80098f0:	bfb8      	it	lt
 80098f2:	3101      	addlt	r1, #1
 80098f4:	f7ff fedc 	bl	80096b0 <_Balloc>
 80098f8:	b930      	cbnz	r0, 8009908 <__multiply+0x44>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b44      	ldr	r3, [pc, #272]	@ (8009a10 <__multiply+0x14c>)
 80098fe:	4845      	ldr	r0, [pc, #276]	@ (8009a14 <__multiply+0x150>)
 8009900:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009904:	f7fd fe9e 	bl	8007644 <__assert_func>
 8009908:	f100 0514 	add.w	r5, r0, #20
 800990c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009910:	462b      	mov	r3, r5
 8009912:	2200      	movs	r2, #0
 8009914:	4543      	cmp	r3, r8
 8009916:	d321      	bcc.n	800995c <__multiply+0x98>
 8009918:	f107 0114 	add.w	r1, r7, #20
 800991c:	f104 0214 	add.w	r2, r4, #20
 8009920:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009924:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009928:	9302      	str	r3, [sp, #8]
 800992a:	1b13      	subs	r3, r2, r4
 800992c:	3b15      	subs	r3, #21
 800992e:	f023 0303 	bic.w	r3, r3, #3
 8009932:	3304      	adds	r3, #4
 8009934:	f104 0715 	add.w	r7, r4, #21
 8009938:	42ba      	cmp	r2, r7
 800993a:	bf38      	it	cc
 800993c:	2304      	movcc	r3, #4
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	9b02      	ldr	r3, [sp, #8]
 8009942:	9103      	str	r1, [sp, #12]
 8009944:	428b      	cmp	r3, r1
 8009946:	d80c      	bhi.n	8009962 <__multiply+0x9e>
 8009948:	2e00      	cmp	r6, #0
 800994a:	dd03      	ble.n	8009954 <__multiply+0x90>
 800994c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009950:	2b00      	cmp	r3, #0
 8009952:	d05b      	beq.n	8009a0c <__multiply+0x148>
 8009954:	6106      	str	r6, [r0, #16]
 8009956:	b005      	add	sp, #20
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	f843 2b04 	str.w	r2, [r3], #4
 8009960:	e7d8      	b.n	8009914 <__multiply+0x50>
 8009962:	f8b1 a000 	ldrh.w	sl, [r1]
 8009966:	f1ba 0f00 	cmp.w	sl, #0
 800996a:	d024      	beq.n	80099b6 <__multiply+0xf2>
 800996c:	f104 0e14 	add.w	lr, r4, #20
 8009970:	46a9      	mov	r9, r5
 8009972:	f04f 0c00 	mov.w	ip, #0
 8009976:	f85e 7b04 	ldr.w	r7, [lr], #4
 800997a:	f8d9 3000 	ldr.w	r3, [r9]
 800997e:	fa1f fb87 	uxth.w	fp, r7
 8009982:	b29b      	uxth	r3, r3
 8009984:	fb0a 330b 	mla	r3, sl, fp, r3
 8009988:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800998c:	f8d9 7000 	ldr.w	r7, [r9]
 8009990:	4463      	add	r3, ip
 8009992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009996:	fb0a c70b 	mla	r7, sl, fp, ip
 800999a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800999e:	b29b      	uxth	r3, r3
 80099a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099a4:	4572      	cmp	r2, lr
 80099a6:	f849 3b04 	str.w	r3, [r9], #4
 80099aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80099ae:	d8e2      	bhi.n	8009976 <__multiply+0xb2>
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	f845 c003 	str.w	ip, [r5, r3]
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80099bc:	3104      	adds	r1, #4
 80099be:	f1b9 0f00 	cmp.w	r9, #0
 80099c2:	d021      	beq.n	8009a08 <__multiply+0x144>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	f104 0c14 	add.w	ip, r4, #20
 80099ca:	46ae      	mov	lr, r5
 80099cc:	f04f 0a00 	mov.w	sl, #0
 80099d0:	f8bc b000 	ldrh.w	fp, [ip]
 80099d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80099d8:	fb09 770b 	mla	r7, r9, fp, r7
 80099dc:	4457      	add	r7, sl
 80099de:	b29b      	uxth	r3, r3
 80099e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099e4:	f84e 3b04 	str.w	r3, [lr], #4
 80099e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099f0:	f8be 3000 	ldrh.w	r3, [lr]
 80099f4:	fb09 330a 	mla	r3, r9, sl, r3
 80099f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099fc:	4562      	cmp	r2, ip
 80099fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a02:	d8e5      	bhi.n	80099d0 <__multiply+0x10c>
 8009a04:	9f01      	ldr	r7, [sp, #4]
 8009a06:	51eb      	str	r3, [r5, r7]
 8009a08:	3504      	adds	r5, #4
 8009a0a:	e799      	b.n	8009940 <__multiply+0x7c>
 8009a0c:	3e01      	subs	r6, #1
 8009a0e:	e79b      	b.n	8009948 <__multiply+0x84>
 8009a10:	0800b518 	.word	0x0800b518
 8009a14:	0800b53a 	.word	0x0800b53a

08009a18 <__pow5mult>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	4615      	mov	r5, r2
 8009a1e:	f012 0203 	ands.w	r2, r2, #3
 8009a22:	4607      	mov	r7, r0
 8009a24:	460e      	mov	r6, r1
 8009a26:	d007      	beq.n	8009a38 <__pow5mult+0x20>
 8009a28:	4c25      	ldr	r4, [pc, #148]	@ (8009ac0 <__pow5mult+0xa8>)
 8009a2a:	3a01      	subs	r2, #1
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a32:	f7ff fe9f 	bl	8009774 <__multadd>
 8009a36:	4606      	mov	r6, r0
 8009a38:	10ad      	asrs	r5, r5, #2
 8009a3a:	d03d      	beq.n	8009ab8 <__pow5mult+0xa0>
 8009a3c:	69fc      	ldr	r4, [r7, #28]
 8009a3e:	b97c      	cbnz	r4, 8009a60 <__pow5mult+0x48>
 8009a40:	2010      	movs	r0, #16
 8009a42:	f7ff fcd3 	bl	80093ec <malloc>
 8009a46:	4602      	mov	r2, r0
 8009a48:	61f8      	str	r0, [r7, #28]
 8009a4a:	b928      	cbnz	r0, 8009a58 <__pow5mult+0x40>
 8009a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac4 <__pow5mult+0xac>)
 8009a4e:	481e      	ldr	r0, [pc, #120]	@ (8009ac8 <__pow5mult+0xb0>)
 8009a50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a54:	f7fd fdf6 	bl	8007644 <__assert_func>
 8009a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a5c:	6004      	str	r4, [r0, #0]
 8009a5e:	60c4      	str	r4, [r0, #12]
 8009a60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a68:	b94c      	cbnz	r4, 8009a7e <__pow5mult+0x66>
 8009a6a:	f240 2171 	movw	r1, #625	@ 0x271
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f7ff ff12 	bl	8009898 <__i2b>
 8009a74:	2300      	movs	r3, #0
 8009a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	6003      	str	r3, [r0, #0]
 8009a7e:	f04f 0900 	mov.w	r9, #0
 8009a82:	07eb      	lsls	r3, r5, #31
 8009a84:	d50a      	bpl.n	8009a9c <__pow5mult+0x84>
 8009a86:	4631      	mov	r1, r6
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f7ff ff1a 	bl	80098c4 <__multiply>
 8009a90:	4631      	mov	r1, r6
 8009a92:	4680      	mov	r8, r0
 8009a94:	4638      	mov	r0, r7
 8009a96:	f7ff fe4b 	bl	8009730 <_Bfree>
 8009a9a:	4646      	mov	r6, r8
 8009a9c:	106d      	asrs	r5, r5, #1
 8009a9e:	d00b      	beq.n	8009ab8 <__pow5mult+0xa0>
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	b938      	cbnz	r0, 8009ab4 <__pow5mult+0x9c>
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7ff ff0b 	bl	80098c4 <__multiply>
 8009aae:	6020      	str	r0, [r4, #0]
 8009ab0:	f8c0 9000 	str.w	r9, [r0]
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	e7e4      	b.n	8009a82 <__pow5mult+0x6a>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009abe:	bf00      	nop
 8009ac0:	0800b594 	.word	0x0800b594
 8009ac4:	0800b4a9 	.word	0x0800b4a9
 8009ac8:	0800b53a 	.word	0x0800b53a

08009acc <__lshift>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	6849      	ldr	r1, [r1, #4]
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	4607      	mov	r7, r0
 8009ade:	4691      	mov	r9, r2
 8009ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ae4:	f108 0601 	add.w	r6, r8, #1
 8009ae8:	42b3      	cmp	r3, r6
 8009aea:	db0b      	blt.n	8009b04 <__lshift+0x38>
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff fddf 	bl	80096b0 <_Balloc>
 8009af2:	4605      	mov	r5, r0
 8009af4:	b948      	cbnz	r0, 8009b0a <__lshift+0x3e>
 8009af6:	4602      	mov	r2, r0
 8009af8:	4b28      	ldr	r3, [pc, #160]	@ (8009b9c <__lshift+0xd0>)
 8009afa:	4829      	ldr	r0, [pc, #164]	@ (8009ba0 <__lshift+0xd4>)
 8009afc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b00:	f7fd fda0 	bl	8007644 <__assert_func>
 8009b04:	3101      	adds	r1, #1
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	e7ee      	b.n	8009ae8 <__lshift+0x1c>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f100 0114 	add.w	r1, r0, #20
 8009b10:	f100 0210 	add.w	r2, r0, #16
 8009b14:	4618      	mov	r0, r3
 8009b16:	4553      	cmp	r3, sl
 8009b18:	db33      	blt.n	8009b82 <__lshift+0xb6>
 8009b1a:	6920      	ldr	r0, [r4, #16]
 8009b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b20:	f104 0314 	add.w	r3, r4, #20
 8009b24:	f019 091f 	ands.w	r9, r9, #31
 8009b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b30:	d02b      	beq.n	8009b8a <__lshift+0xbe>
 8009b32:	f1c9 0e20 	rsb	lr, r9, #32
 8009b36:	468a      	mov	sl, r1
 8009b38:	2200      	movs	r2, #0
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b40:	4310      	orrs	r0, r2
 8009b42:	f84a 0b04 	str.w	r0, [sl], #4
 8009b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4a:	459c      	cmp	ip, r3
 8009b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b50:	d8f3      	bhi.n	8009b3a <__lshift+0x6e>
 8009b52:	ebac 0304 	sub.w	r3, ip, r4
 8009b56:	3b15      	subs	r3, #21
 8009b58:	f023 0303 	bic.w	r3, r3, #3
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	f104 0015 	add.w	r0, r4, #21
 8009b62:	4584      	cmp	ip, r0
 8009b64:	bf38      	it	cc
 8009b66:	2304      	movcc	r3, #4
 8009b68:	50ca      	str	r2, [r1, r3]
 8009b6a:	b10a      	cbz	r2, 8009b70 <__lshift+0xa4>
 8009b6c:	f108 0602 	add.w	r6, r8, #2
 8009b70:	3e01      	subs	r6, #1
 8009b72:	4638      	mov	r0, r7
 8009b74:	612e      	str	r6, [r5, #16]
 8009b76:	4621      	mov	r1, r4
 8009b78:	f7ff fdda 	bl	8009730 <_Bfree>
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b86:	3301      	adds	r3, #1
 8009b88:	e7c5      	b.n	8009b16 <__lshift+0x4a>
 8009b8a:	3904      	subs	r1, #4
 8009b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b94:	459c      	cmp	ip, r3
 8009b96:	d8f9      	bhi.n	8009b8c <__lshift+0xc0>
 8009b98:	e7ea      	b.n	8009b70 <__lshift+0xa4>
 8009b9a:	bf00      	nop
 8009b9c:	0800b518 	.word	0x0800b518
 8009ba0:	0800b53a 	.word	0x0800b53a

08009ba4 <__mcmp>:
 8009ba4:	690a      	ldr	r2, [r1, #16]
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	6900      	ldr	r0, [r0, #16]
 8009baa:	1a80      	subs	r0, r0, r2
 8009bac:	b530      	push	{r4, r5, lr}
 8009bae:	d10e      	bne.n	8009bce <__mcmp+0x2a>
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	3114      	adds	r1, #20
 8009bb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009bb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009bbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bc4:	4295      	cmp	r5, r2
 8009bc6:	d003      	beq.n	8009bd0 <__mcmp+0x2c>
 8009bc8:	d205      	bcs.n	8009bd6 <__mcmp+0x32>
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bce:	bd30      	pop	{r4, r5, pc}
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	d3f3      	bcc.n	8009bbc <__mcmp+0x18>
 8009bd4:	e7fb      	b.n	8009bce <__mcmp+0x2a>
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	e7f9      	b.n	8009bce <__mcmp+0x2a>
	...

08009bdc <__mdiff>:
 8009bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	4689      	mov	r9, r1
 8009be2:	4606      	mov	r6, r0
 8009be4:	4611      	mov	r1, r2
 8009be6:	4648      	mov	r0, r9
 8009be8:	4614      	mov	r4, r2
 8009bea:	f7ff ffdb 	bl	8009ba4 <__mcmp>
 8009bee:	1e05      	subs	r5, r0, #0
 8009bf0:	d112      	bne.n	8009c18 <__mdiff+0x3c>
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff fd5b 	bl	80096b0 <_Balloc>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	b928      	cbnz	r0, 8009c0a <__mdiff+0x2e>
 8009bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8009cfc <__mdiff+0x120>)
 8009c00:	f240 2137 	movw	r1, #567	@ 0x237
 8009c04:	483e      	ldr	r0, [pc, #248]	@ (8009d00 <__mdiff+0x124>)
 8009c06:	f7fd fd1d 	bl	8007644 <__assert_func>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c10:	4610      	mov	r0, r2
 8009c12:	b003      	add	sp, #12
 8009c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	bfbc      	itt	lt
 8009c1a:	464b      	movlt	r3, r9
 8009c1c:	46a1      	movlt	r9, r4
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c24:	bfba      	itte	lt
 8009c26:	461c      	movlt	r4, r3
 8009c28:	2501      	movlt	r5, #1
 8009c2a:	2500      	movge	r5, #0
 8009c2c:	f7ff fd40 	bl	80096b0 <_Balloc>
 8009c30:	4602      	mov	r2, r0
 8009c32:	b918      	cbnz	r0, 8009c3c <__mdiff+0x60>
 8009c34:	4b31      	ldr	r3, [pc, #196]	@ (8009cfc <__mdiff+0x120>)
 8009c36:	f240 2145 	movw	r1, #581	@ 0x245
 8009c3a:	e7e3      	b.n	8009c04 <__mdiff+0x28>
 8009c3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c40:	6926      	ldr	r6, [r4, #16]
 8009c42:	60c5      	str	r5, [r0, #12]
 8009c44:	f109 0310 	add.w	r3, r9, #16
 8009c48:	f109 0514 	add.w	r5, r9, #20
 8009c4c:	f104 0e14 	add.w	lr, r4, #20
 8009c50:	f100 0b14 	add.w	fp, r0, #20
 8009c54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	46d9      	mov	r9, fp
 8009c60:	f04f 0c00 	mov.w	ip, #0
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	fa1f f38a 	uxth.w	r3, sl
 8009c74:	4619      	mov	r1, r3
 8009c76:	b283      	uxth	r3, r0
 8009c78:	1acb      	subs	r3, r1, r3
 8009c7a:	0c00      	lsrs	r0, r0, #16
 8009c7c:	4463      	add	r3, ip
 8009c7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c8c:	4576      	cmp	r6, lr
 8009c8e:	f849 3b04 	str.w	r3, [r9], #4
 8009c92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c96:	d8e5      	bhi.n	8009c64 <__mdiff+0x88>
 8009c98:	1b33      	subs	r3, r6, r4
 8009c9a:	3b15      	subs	r3, #21
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	3415      	adds	r4, #21
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	42a6      	cmp	r6, r4
 8009ca6:	bf38      	it	cc
 8009ca8:	2304      	movcc	r3, #4
 8009caa:	441d      	add	r5, r3
 8009cac:	445b      	add	r3, fp
 8009cae:	461e      	mov	r6, r3
 8009cb0:	462c      	mov	r4, r5
 8009cb2:	4544      	cmp	r4, r8
 8009cb4:	d30e      	bcc.n	8009cd4 <__mdiff+0xf8>
 8009cb6:	f108 0103 	add.w	r1, r8, #3
 8009cba:	1b49      	subs	r1, r1, r5
 8009cbc:	f021 0103 	bic.w	r1, r1, #3
 8009cc0:	3d03      	subs	r5, #3
 8009cc2:	45a8      	cmp	r8, r5
 8009cc4:	bf38      	it	cc
 8009cc6:	2100      	movcc	r1, #0
 8009cc8:	440b      	add	r3, r1
 8009cca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cce:	b191      	cbz	r1, 8009cf6 <__mdiff+0x11a>
 8009cd0:	6117      	str	r7, [r2, #16]
 8009cd2:	e79d      	b.n	8009c10 <__mdiff+0x34>
 8009cd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cd8:	46e6      	mov	lr, ip
 8009cda:	0c08      	lsrs	r0, r1, #16
 8009cdc:	fa1c fc81 	uxtah	ip, ip, r1
 8009ce0:	4471      	add	r1, lr
 8009ce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ce6:	b289      	uxth	r1, r1
 8009ce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cec:	f846 1b04 	str.w	r1, [r6], #4
 8009cf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cf4:	e7dd      	b.n	8009cb2 <__mdiff+0xd6>
 8009cf6:	3f01      	subs	r7, #1
 8009cf8:	e7e7      	b.n	8009cca <__mdiff+0xee>
 8009cfa:	bf00      	nop
 8009cfc:	0800b518 	.word	0x0800b518
 8009d00:	0800b53a 	.word	0x0800b53a

08009d04 <__d2b>:
 8009d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d08:	460f      	mov	r7, r1
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	ec59 8b10 	vmov	r8, r9, d0
 8009d10:	4616      	mov	r6, r2
 8009d12:	f7ff fccd 	bl	80096b0 <_Balloc>
 8009d16:	4604      	mov	r4, r0
 8009d18:	b930      	cbnz	r0, 8009d28 <__d2b+0x24>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	4b23      	ldr	r3, [pc, #140]	@ (8009dac <__d2b+0xa8>)
 8009d1e:	4824      	ldr	r0, [pc, #144]	@ (8009db0 <__d2b+0xac>)
 8009d20:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d24:	f7fd fc8e 	bl	8007644 <__assert_func>
 8009d28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d30:	b10d      	cbz	r5, 8009d36 <__d2b+0x32>
 8009d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	f1b8 0300 	subs.w	r3, r8, #0
 8009d3c:	d023      	beq.n	8009d86 <__d2b+0x82>
 8009d3e:	4668      	mov	r0, sp
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	f7ff fd7c 	bl	800983e <__lo0bits>
 8009d46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d4a:	b1d0      	cbz	r0, 8009d82 <__d2b+0x7e>
 8009d4c:	f1c0 0320 	rsb	r3, r0, #32
 8009d50:	fa02 f303 	lsl.w	r3, r2, r3
 8009d54:	430b      	orrs	r3, r1
 8009d56:	40c2      	lsrs	r2, r0
 8009d58:	6163      	str	r3, [r4, #20]
 8009d5a:	9201      	str	r2, [sp, #4]
 8009d5c:	9b01      	ldr	r3, [sp, #4]
 8009d5e:	61a3      	str	r3, [r4, #24]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bf0c      	ite	eq
 8009d64:	2201      	moveq	r2, #1
 8009d66:	2202      	movne	r2, #2
 8009d68:	6122      	str	r2, [r4, #16]
 8009d6a:	b1a5      	cbz	r5, 8009d96 <__d2b+0x92>
 8009d6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d70:	4405      	add	r5, r0
 8009d72:	603d      	str	r5, [r7, #0]
 8009d74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d78:	6030      	str	r0, [r6, #0]
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	b003      	add	sp, #12
 8009d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d82:	6161      	str	r1, [r4, #20]
 8009d84:	e7ea      	b.n	8009d5c <__d2b+0x58>
 8009d86:	a801      	add	r0, sp, #4
 8009d88:	f7ff fd59 	bl	800983e <__lo0bits>
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	6163      	str	r3, [r4, #20]
 8009d90:	3020      	adds	r0, #32
 8009d92:	2201      	movs	r2, #1
 8009d94:	e7e8      	b.n	8009d68 <__d2b+0x64>
 8009d96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d9e:	6038      	str	r0, [r7, #0]
 8009da0:	6918      	ldr	r0, [r3, #16]
 8009da2:	f7ff fd2d 	bl	8009800 <__hi0bits>
 8009da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009daa:	e7e5      	b.n	8009d78 <__d2b+0x74>
 8009dac:	0800b518 	.word	0x0800b518
 8009db0:	0800b53a 	.word	0x0800b53a

08009db4 <__sread>:
 8009db4:	b510      	push	{r4, lr}
 8009db6:	460c      	mov	r4, r1
 8009db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dbc:	f000 f9d6 	bl	800a16c <_read_r>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	bfab      	itete	ge
 8009dc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc8:	181b      	addge	r3, r3, r0
 8009dca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dce:	bfac      	ite	ge
 8009dd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dd2:	81a3      	strhlt	r3, [r4, #12]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__swrite>:
 8009dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dda:	461f      	mov	r7, r3
 8009ddc:	898b      	ldrh	r3, [r1, #12]
 8009dde:	05db      	lsls	r3, r3, #23
 8009de0:	4605      	mov	r5, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	4616      	mov	r6, r2
 8009de6:	d505      	bpl.n	8009df4 <__swrite+0x1e>
 8009de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dec:	2302      	movs	r3, #2
 8009dee:	2200      	movs	r2, #0
 8009df0:	f000 f97a 	bl	800a0e8 <_lseek_r>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	4632      	mov	r2, r6
 8009e02:	463b      	mov	r3, r7
 8009e04:	4628      	mov	r0, r5
 8009e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0a:	f000 b9e5 	b.w	800a1d8 <_write_r>

08009e0e <__sseek>:
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	460c      	mov	r4, r1
 8009e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e16:	f000 f967 	bl	800a0e8 <_lseek_r>
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	bf15      	itete	ne
 8009e20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e2a:	81a3      	strheq	r3, [r4, #12]
 8009e2c:	bf18      	it	ne
 8009e2e:	81a3      	strhne	r3, [r4, #12]
 8009e30:	bd10      	pop	{r4, pc}

08009e32 <__sclose>:
 8009e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e36:	f000 b925 	b.w	800a084 <_close_r>

08009e3a <_realloc_r>:
 8009e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	4680      	mov	r8, r0
 8009e40:	4615      	mov	r5, r2
 8009e42:	460c      	mov	r4, r1
 8009e44:	b921      	cbnz	r1, 8009e50 <_realloc_r+0x16>
 8009e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	f7ff baf8 	b.w	8009440 <_malloc_r>
 8009e50:	b92a      	cbnz	r2, 8009e5e <_realloc_r+0x24>
 8009e52:	f000 f9e7 	bl	800a224 <_free_r>
 8009e56:	2400      	movs	r4, #0
 8009e58:	4620      	mov	r0, r4
 8009e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5e:	f000 fa3d 	bl	800a2dc <_malloc_usable_size_r>
 8009e62:	4285      	cmp	r5, r0
 8009e64:	4606      	mov	r6, r0
 8009e66:	d802      	bhi.n	8009e6e <_realloc_r+0x34>
 8009e68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009e6c:	d8f4      	bhi.n	8009e58 <_realloc_r+0x1e>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4640      	mov	r0, r8
 8009e72:	f7ff fae5 	bl	8009440 <_malloc_r>
 8009e76:	4607      	mov	r7, r0
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d0ec      	beq.n	8009e56 <_realloc_r+0x1c>
 8009e7c:	42b5      	cmp	r5, r6
 8009e7e:	462a      	mov	r2, r5
 8009e80:	4621      	mov	r1, r4
 8009e82:	bf28      	it	cs
 8009e84:	4632      	movcs	r2, r6
 8009e86:	f7fe f9ae 	bl	80081e6 <memcpy>
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	f000 f9c9 	bl	800a224 <_free_r>
 8009e92:	463c      	mov	r4, r7
 8009e94:	e7e0      	b.n	8009e58 <_realloc_r+0x1e>

08009e96 <__swbuf_r>:
 8009e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e98:	460e      	mov	r6, r1
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	b118      	cbz	r0, 8009ea8 <__swbuf_r+0x12>
 8009ea0:	6a03      	ldr	r3, [r0, #32]
 8009ea2:	b90b      	cbnz	r3, 8009ea8 <__swbuf_r+0x12>
 8009ea4:	f7fe f904 	bl	80080b0 <__sinit>
 8009ea8:	69a3      	ldr	r3, [r4, #24]
 8009eaa:	60a3      	str	r3, [r4, #8]
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	071a      	lsls	r2, r3, #28
 8009eb0:	d501      	bpl.n	8009eb6 <__swbuf_r+0x20>
 8009eb2:	6923      	ldr	r3, [r4, #16]
 8009eb4:	b943      	cbnz	r3, 8009ec8 <__swbuf_r+0x32>
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f000 f82b 	bl	8009f14 <__swsetup_r>
 8009ebe:	b118      	cbz	r0, 8009ec8 <__swbuf_r+0x32>
 8009ec0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	6922      	ldr	r2, [r4, #16]
 8009ecc:	1a98      	subs	r0, r3, r2
 8009ece:	6963      	ldr	r3, [r4, #20]
 8009ed0:	b2f6      	uxtb	r6, r6
 8009ed2:	4283      	cmp	r3, r0
 8009ed4:	4637      	mov	r7, r6
 8009ed6:	dc05      	bgt.n	8009ee4 <__swbuf_r+0x4e>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4628      	mov	r0, r5
 8009edc:	f7ff fbb4 	bl	8009648 <_fflush_r>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d1ed      	bne.n	8009ec0 <__swbuf_r+0x2a>
 8009ee4:	68a3      	ldr	r3, [r4, #8]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	60a3      	str	r3, [r4, #8]
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	6022      	str	r2, [r4, #0]
 8009ef0:	701e      	strb	r6, [r3, #0]
 8009ef2:	6962      	ldr	r2, [r4, #20]
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d004      	beq.n	8009f04 <__swbuf_r+0x6e>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	07db      	lsls	r3, r3, #31
 8009efe:	d5e1      	bpl.n	8009ec4 <__swbuf_r+0x2e>
 8009f00:	2e0a      	cmp	r6, #10
 8009f02:	d1df      	bne.n	8009ec4 <__swbuf_r+0x2e>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4628      	mov	r0, r5
 8009f08:	f7ff fb9e 	bl	8009648 <_fflush_r>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d0d9      	beq.n	8009ec4 <__swbuf_r+0x2e>
 8009f10:	e7d6      	b.n	8009ec0 <__swbuf_r+0x2a>
	...

08009f14 <__swsetup_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4b29      	ldr	r3, [pc, #164]	@ (8009fbc <__swsetup_r+0xa8>)
 8009f18:	4605      	mov	r5, r0
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	b118      	cbz	r0, 8009f28 <__swsetup_r+0x14>
 8009f20:	6a03      	ldr	r3, [r0, #32]
 8009f22:	b90b      	cbnz	r3, 8009f28 <__swsetup_r+0x14>
 8009f24:	f7fe f8c4 	bl	80080b0 <__sinit>
 8009f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2c:	0719      	lsls	r1, r3, #28
 8009f2e:	d422      	bmi.n	8009f76 <__swsetup_r+0x62>
 8009f30:	06da      	lsls	r2, r3, #27
 8009f32:	d407      	bmi.n	8009f44 <__swsetup_r+0x30>
 8009f34:	2209      	movs	r2, #9
 8009f36:	602a      	str	r2, [r5, #0]
 8009f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f42:	e033      	b.n	8009fac <__swsetup_r+0x98>
 8009f44:	0758      	lsls	r0, r3, #29
 8009f46:	d512      	bpl.n	8009f6e <__swsetup_r+0x5a>
 8009f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f4a:	b141      	cbz	r1, 8009f5e <__swsetup_r+0x4a>
 8009f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f50:	4299      	cmp	r1, r3
 8009f52:	d002      	beq.n	8009f5a <__swsetup_r+0x46>
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 f965 	bl	800a224 <_free_r>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	2300      	movs	r3, #0
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	f043 0308 	orr.w	r3, r3, #8
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	b94b      	cbnz	r3, 8009f8e <__swsetup_r+0x7a>
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f84:	d003      	beq.n	8009f8e <__swsetup_r+0x7a>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 f83f 	bl	800a00c <__smakebuf_r>
 8009f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f92:	f013 0201 	ands.w	r2, r3, #1
 8009f96:	d00a      	beq.n	8009fae <__swsetup_r+0x9a>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	60a2      	str	r2, [r4, #8]
 8009f9c:	6962      	ldr	r2, [r4, #20]
 8009f9e:	4252      	negs	r2, r2
 8009fa0:	61a2      	str	r2, [r4, #24]
 8009fa2:	6922      	ldr	r2, [r4, #16]
 8009fa4:	b942      	cbnz	r2, 8009fb8 <__swsetup_r+0xa4>
 8009fa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009faa:	d1c5      	bne.n	8009f38 <__swsetup_r+0x24>
 8009fac:	bd38      	pop	{r3, r4, r5, pc}
 8009fae:	0799      	lsls	r1, r3, #30
 8009fb0:	bf58      	it	pl
 8009fb2:	6962      	ldrpl	r2, [r4, #20]
 8009fb4:	60a2      	str	r2, [r4, #8]
 8009fb6:	e7f4      	b.n	8009fa2 <__swsetup_r+0x8e>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	e7f7      	b.n	8009fac <__swsetup_r+0x98>
 8009fbc:	20000024 	.word	0x20000024

08009fc0 <__swhatbuf_r>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc8:	2900      	cmp	r1, #0
 8009fca:	b096      	sub	sp, #88	@ 0x58
 8009fcc:	4615      	mov	r5, r2
 8009fce:	461e      	mov	r6, r3
 8009fd0:	da0d      	bge.n	8009fee <__swhatbuf_r+0x2e>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fd8:	f04f 0100 	mov.w	r1, #0
 8009fdc:	bf14      	ite	ne
 8009fde:	2340      	movne	r3, #64	@ 0x40
 8009fe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	6031      	str	r1, [r6, #0]
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	b016      	add	sp, #88	@ 0x58
 8009fec:	bd70      	pop	{r4, r5, r6, pc}
 8009fee:	466a      	mov	r2, sp
 8009ff0:	f000 f858 	bl	800a0a4 <_fstat_r>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	dbec      	blt.n	8009fd2 <__swhatbuf_r+0x12>
 8009ff8:	9901      	ldr	r1, [sp, #4]
 8009ffa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ffe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a002:	4259      	negs	r1, r3
 800a004:	4159      	adcs	r1, r3
 800a006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a00a:	e7eb      	b.n	8009fe4 <__swhatbuf_r+0x24>

0800a00c <__smakebuf_r>:
 800a00c:	898b      	ldrh	r3, [r1, #12]
 800a00e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a010:	079d      	lsls	r5, r3, #30
 800a012:	4606      	mov	r6, r0
 800a014:	460c      	mov	r4, r1
 800a016:	d507      	bpl.n	800a028 <__smakebuf_r+0x1c>
 800a018:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	6123      	str	r3, [r4, #16]
 800a020:	2301      	movs	r3, #1
 800a022:	6163      	str	r3, [r4, #20]
 800a024:	b003      	add	sp, #12
 800a026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a028:	ab01      	add	r3, sp, #4
 800a02a:	466a      	mov	r2, sp
 800a02c:	f7ff ffc8 	bl	8009fc0 <__swhatbuf_r>
 800a030:	9f00      	ldr	r7, [sp, #0]
 800a032:	4605      	mov	r5, r0
 800a034:	4639      	mov	r1, r7
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff fa02 	bl	8009440 <_malloc_r>
 800a03c:	b948      	cbnz	r0, 800a052 <__smakebuf_r+0x46>
 800a03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a042:	059a      	lsls	r2, r3, #22
 800a044:	d4ee      	bmi.n	800a024 <__smakebuf_r+0x18>
 800a046:	f023 0303 	bic.w	r3, r3, #3
 800a04a:	f043 0302 	orr.w	r3, r3, #2
 800a04e:	81a3      	strh	r3, [r4, #12]
 800a050:	e7e2      	b.n	800a018 <__smakebuf_r+0xc>
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	6020      	str	r0, [r4, #0]
 800a056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a062:	b15b      	cbz	r3, 800a07c <__smakebuf_r+0x70>
 800a064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a068:	4630      	mov	r0, r6
 800a06a:	f000 f82d 	bl	800a0c8 <_isatty_r>
 800a06e:	b128      	cbz	r0, 800a07c <__smakebuf_r+0x70>
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	f023 0303 	bic.w	r3, r3, #3
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	431d      	orrs	r5, r3
 800a080:	81a5      	strh	r5, [r4, #12]
 800a082:	e7cf      	b.n	800a024 <__smakebuf_r+0x18>

0800a084 <_close_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4d06      	ldr	r5, [pc, #24]	@ (800a0a0 <_close_r+0x1c>)
 800a088:	2300      	movs	r3, #0
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f7 ffc7 	bl	8002022 <_close>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_close_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_close_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20000ab0 	.word	0x20000ab0

0800a0a4 <_fstat_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	@ (800a0c4 <_fstat_r+0x20>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	602b      	str	r3, [r5, #0]
 800a0b2:	f7f7 ffc2 	bl	800203a <_fstat>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d102      	bne.n	800a0c0 <_fstat_r+0x1c>
 800a0ba:	682b      	ldr	r3, [r5, #0]
 800a0bc:	b103      	cbz	r3, 800a0c0 <_fstat_r+0x1c>
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	bd38      	pop	{r3, r4, r5, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000ab0 	.word	0x20000ab0

0800a0c8 <_isatty_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	@ (800a0e4 <_isatty_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f7 ffc1 	bl	800205a <_isatty>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_isatty_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_isatty_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20000ab0 	.word	0x20000ab0

0800a0e8 <_lseek_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d07      	ldr	r5, [pc, #28]	@ (800a108 <_lseek_r+0x20>)
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	4608      	mov	r0, r1
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	602a      	str	r2, [r5, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f7f7 ffba 	bl	8002070 <_lseek>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_lseek_r+0x1e>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_lseek_r+0x1e>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	20000ab0 	.word	0x20000ab0

0800a10c <_raise_r>:
 800a10c:	291f      	cmp	r1, #31
 800a10e:	b538      	push	{r3, r4, r5, lr}
 800a110:	4605      	mov	r5, r0
 800a112:	460c      	mov	r4, r1
 800a114:	d904      	bls.n	800a120 <_raise_r+0x14>
 800a116:	2316      	movs	r3, #22
 800a118:	6003      	str	r3, [r0, #0]
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a122:	b112      	cbz	r2, 800a12a <_raise_r+0x1e>
 800a124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a128:	b94b      	cbnz	r3, 800a13e <_raise_r+0x32>
 800a12a:	4628      	mov	r0, r5
 800a12c:	f000 f842 	bl	800a1b4 <_getpid_r>
 800a130:	4622      	mov	r2, r4
 800a132:	4601      	mov	r1, r0
 800a134:	4628      	mov	r0, r5
 800a136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a13a:	f000 b829 	b.w	800a190 <_kill_r>
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d00a      	beq.n	800a158 <_raise_r+0x4c>
 800a142:	1c59      	adds	r1, r3, #1
 800a144:	d103      	bne.n	800a14e <_raise_r+0x42>
 800a146:	2316      	movs	r3, #22
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	2001      	movs	r0, #1
 800a14c:	e7e7      	b.n	800a11e <_raise_r+0x12>
 800a14e:	2100      	movs	r1, #0
 800a150:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a154:	4620      	mov	r0, r4
 800a156:	4798      	blx	r3
 800a158:	2000      	movs	r0, #0
 800a15a:	e7e0      	b.n	800a11e <_raise_r+0x12>

0800a15c <raise>:
 800a15c:	4b02      	ldr	r3, [pc, #8]	@ (800a168 <raise+0xc>)
 800a15e:	4601      	mov	r1, r0
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	f7ff bfd3 	b.w	800a10c <_raise_r>
 800a166:	bf00      	nop
 800a168:	20000024 	.word	0x20000024

0800a16c <_read_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	@ (800a18c <_read_r+0x20>)
 800a170:	4604      	mov	r4, r0
 800a172:	4608      	mov	r0, r1
 800a174:	4611      	mov	r1, r2
 800a176:	2200      	movs	r2, #0
 800a178:	602a      	str	r2, [r5, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f7f7 ff18 	bl	8001fb0 <_read>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_read_r+0x1e>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_read_r+0x1e>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20000ab0 	.word	0x20000ab0

0800a190 <_kill_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d07      	ldr	r5, [pc, #28]	@ (800a1b0 <_kill_r+0x20>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	4611      	mov	r1, r2
 800a19c:	602b      	str	r3, [r5, #0]
 800a19e:	f7f7 feec 	bl	8001f7a <_kill>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d102      	bne.n	800a1ac <_kill_r+0x1c>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	b103      	cbz	r3, 800a1ac <_kill_r+0x1c>
 800a1aa:	6023      	str	r3, [r4, #0]
 800a1ac:	bd38      	pop	{r3, r4, r5, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000ab0 	.word	0x20000ab0

0800a1b4 <_getpid_r>:
 800a1b4:	f7f7 bed9 	b.w	8001f6a <_getpid>

0800a1b8 <_sbrk_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4d06      	ldr	r5, [pc, #24]	@ (800a1d4 <_sbrk_r+0x1c>)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4604      	mov	r4, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	602b      	str	r3, [r5, #0]
 800a1c4:	f7f7 ff62 	bl	800208c <_sbrk>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_sbrk_r+0x1a>
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_sbrk_r+0x1a>
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	20000ab0 	.word	0x20000ab0

0800a1d8 <_write_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d07      	ldr	r5, [pc, #28]	@ (800a1f8 <_write_r+0x20>)
 800a1dc:	4604      	mov	r4, r0
 800a1de:	4608      	mov	r0, r1
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	602a      	str	r2, [r5, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f7f7 feff 	bl	8001fea <_write>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d102      	bne.n	800a1f6 <_write_r+0x1e>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	b103      	cbz	r3, 800a1f6 <_write_r+0x1e>
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	20000ab0 	.word	0x20000ab0

0800a1fc <_calloc_r>:
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	fba1 5402 	umull	r5, r4, r1, r2
 800a202:	b93c      	cbnz	r4, 800a214 <_calloc_r+0x18>
 800a204:	4629      	mov	r1, r5
 800a206:	f7ff f91b 	bl	8009440 <_malloc_r>
 800a20a:	4606      	mov	r6, r0
 800a20c:	b928      	cbnz	r0, 800a21a <_calloc_r+0x1e>
 800a20e:	2600      	movs	r6, #0
 800a210:	4630      	mov	r0, r6
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	220c      	movs	r2, #12
 800a216:	6002      	str	r2, [r0, #0]
 800a218:	e7f9      	b.n	800a20e <_calloc_r+0x12>
 800a21a:	462a      	mov	r2, r5
 800a21c:	4621      	mov	r1, r4
 800a21e:	f7fd ffa9 	bl	8008174 <memset>
 800a222:	e7f5      	b.n	800a210 <_calloc_r+0x14>

0800a224 <_free_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4605      	mov	r5, r0
 800a228:	2900      	cmp	r1, #0
 800a22a:	d041      	beq.n	800a2b0 <_free_r+0x8c>
 800a22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a230:	1f0c      	subs	r4, r1, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	bfb8      	it	lt
 800a236:	18e4      	addlt	r4, r4, r3
 800a238:	f7ff fa2e 	bl	8009698 <__malloc_lock>
 800a23c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b4 <_free_r+0x90>)
 800a23e:	6813      	ldr	r3, [r2, #0]
 800a240:	b933      	cbnz	r3, 800a250 <_free_r+0x2c>
 800a242:	6063      	str	r3, [r4, #4]
 800a244:	6014      	str	r4, [r2, #0]
 800a246:	4628      	mov	r0, r5
 800a248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a24c:	f7ff ba2a 	b.w	80096a4 <__malloc_unlock>
 800a250:	42a3      	cmp	r3, r4
 800a252:	d908      	bls.n	800a266 <_free_r+0x42>
 800a254:	6820      	ldr	r0, [r4, #0]
 800a256:	1821      	adds	r1, r4, r0
 800a258:	428b      	cmp	r3, r1
 800a25a:	bf01      	itttt	eq
 800a25c:	6819      	ldreq	r1, [r3, #0]
 800a25e:	685b      	ldreq	r3, [r3, #4]
 800a260:	1809      	addeq	r1, r1, r0
 800a262:	6021      	streq	r1, [r4, #0]
 800a264:	e7ed      	b.n	800a242 <_free_r+0x1e>
 800a266:	461a      	mov	r2, r3
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	b10b      	cbz	r3, 800a270 <_free_r+0x4c>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d9fa      	bls.n	800a266 <_free_r+0x42>
 800a270:	6811      	ldr	r1, [r2, #0]
 800a272:	1850      	adds	r0, r2, r1
 800a274:	42a0      	cmp	r0, r4
 800a276:	d10b      	bne.n	800a290 <_free_r+0x6c>
 800a278:	6820      	ldr	r0, [r4, #0]
 800a27a:	4401      	add	r1, r0
 800a27c:	1850      	adds	r0, r2, r1
 800a27e:	4283      	cmp	r3, r0
 800a280:	6011      	str	r1, [r2, #0]
 800a282:	d1e0      	bne.n	800a246 <_free_r+0x22>
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	6053      	str	r3, [r2, #4]
 800a28a:	4408      	add	r0, r1
 800a28c:	6010      	str	r0, [r2, #0]
 800a28e:	e7da      	b.n	800a246 <_free_r+0x22>
 800a290:	d902      	bls.n	800a298 <_free_r+0x74>
 800a292:	230c      	movs	r3, #12
 800a294:	602b      	str	r3, [r5, #0]
 800a296:	e7d6      	b.n	800a246 <_free_r+0x22>
 800a298:	6820      	ldr	r0, [r4, #0]
 800a29a:	1821      	adds	r1, r4, r0
 800a29c:	428b      	cmp	r3, r1
 800a29e:	bf04      	itt	eq
 800a2a0:	6819      	ldreq	r1, [r3, #0]
 800a2a2:	685b      	ldreq	r3, [r3, #4]
 800a2a4:	6063      	str	r3, [r4, #4]
 800a2a6:	bf04      	itt	eq
 800a2a8:	1809      	addeq	r1, r1, r0
 800a2aa:	6021      	streq	r1, [r4, #0]
 800a2ac:	6054      	str	r4, [r2, #4]
 800a2ae:	e7ca      	b.n	800a246 <_free_r+0x22>
 800a2b0:	bd38      	pop	{r3, r4, r5, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20000aac 	.word	0x20000aac

0800a2b8 <__ascii_mbtowc>:
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	b901      	cbnz	r1, 800a2be <__ascii_mbtowc+0x6>
 800a2bc:	a901      	add	r1, sp, #4
 800a2be:	b142      	cbz	r2, 800a2d2 <__ascii_mbtowc+0x1a>
 800a2c0:	b14b      	cbz	r3, 800a2d6 <__ascii_mbtowc+0x1e>
 800a2c2:	7813      	ldrb	r3, [r2, #0]
 800a2c4:	600b      	str	r3, [r1, #0]
 800a2c6:	7812      	ldrb	r2, [r2, #0]
 800a2c8:	1e10      	subs	r0, r2, #0
 800a2ca:	bf18      	it	ne
 800a2cc:	2001      	movne	r0, #1
 800a2ce:	b002      	add	sp, #8
 800a2d0:	4770      	bx	lr
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	e7fb      	b.n	800a2ce <__ascii_mbtowc+0x16>
 800a2d6:	f06f 0001 	mvn.w	r0, #1
 800a2da:	e7f8      	b.n	800a2ce <__ascii_mbtowc+0x16>

0800a2dc <_malloc_usable_size_r>:
 800a2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e0:	1f18      	subs	r0, r3, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bfbc      	itt	lt
 800a2e6:	580b      	ldrlt	r3, [r1, r0]
 800a2e8:	18c0      	addlt	r0, r0, r3
 800a2ea:	4770      	bx	lr

0800a2ec <__ascii_wctomb>:
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	b141      	cbz	r1, 800a304 <__ascii_wctomb+0x18>
 800a2f2:	2aff      	cmp	r2, #255	@ 0xff
 800a2f4:	d904      	bls.n	800a300 <__ascii_wctomb+0x14>
 800a2f6:	228a      	movs	r2, #138	@ 0x8a
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2fe:	4770      	bx	lr
 800a300:	700a      	strb	r2, [r1, #0]
 800a302:	2001      	movs	r0, #1
 800a304:	4770      	bx	lr
	...

0800a308 <_init>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	bf00      	nop
 800a30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30e:	bc08      	pop	{r3}
 800a310:	469e      	mov	lr, r3
 800a312:	4770      	bx	lr

0800a314 <_fini>:
 800a314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a316:	bf00      	nop
 800a318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31a:	bc08      	pop	{r3}
 800a31c:	469e      	mov	lr, r3
 800a31e:	4770      	bx	lr
